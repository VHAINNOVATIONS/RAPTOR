<?php
/*
 * ------------------------------------------------------------------------------------
 * Created by SAN Business Consultants for RAPTOR phase 2
 * Open Source VA Innovation Project 2011-2014
 * Innovator: Dr. Jonathan Medverd
 * SAN Implementation: Andrew Casertano, Frank Font, et al
 * Contacts: acasertano@sanbusinessconsultants.com, ffont@sanbusinessconsultants.com
 * ------------------------------------------------------------------------------------
 *  
 * A data layer module that gets content for the RAPTOR application. 
 *
 * 20140716a Updated
 */

require_once('core/data_user.php');
require_once('core/data_utility.php');
require_once('core/data_user.php');
require_once('core/data_context.php');
require_once('core/data_ticket_tracking.php');
require_once('core/data_worklist.php');
require_once('core/data_dashboard.php');
require_once('core/data_protocolsupport.php');
require_once('core/data_graphdata.php');
require_once('core/data_listoptions.php');

require_once('form/ViewReportRoomReservations.php');
require_once('form/ViewReportUserActivity.php');

//require_once('form/GetProtocolLibTab.php');
require_once('form/ManageProtocolLibPage.php');
require_once('form/AddProtocolLibPage.php');
require_once('form/ViewProtocolLibPage.php');
require_once('form/EditProtocolLibPage.php');
require_once('form/DeleteProtocolLibPage.php');

require_once('form/ManageContraIndicationsPage.php');
require_once('form/ViewContraIndicationPage.php');
require_once('form/AddContraIndicationPage.php');
require_once('form/EditContraIndicationPage.php');
require_once('form/DeleteContraIndicationPage.php');

require_once('form/ManageUsersPage.php');
require_once('form/ViewUserPage.php');
require_once('form/AddUserPage.php');
require_once('form/EditUserPage.php');
require_once('form/DeleteUserPage.php');

require_once('form/EditWorklistRankingPage.php');
require_once('form/ProtocolInfoPage.php');
require_once('form/WorklistPage.php');
require_once('form/raptor_page_functions.inc');

require_once('form/ManageListsPage.php');
require_once('form/EditListHydrationPage.php');
require_once('form/EditListSedationPage.php');
require_once('form/EditListContrastPage.php');
require_once('form/EditListRadioisotopePage.php');
require_once('form/EditListExamRoomPage.php');
require_once('form/EditListAtRiskMedsPage.php');

require_once('form/ManageReportsPage.php');
require_once('form/ViewReport1Page.php');
require_once('form/ViewReport2Page.php');

require_once('form/ChangePasswordPage.php');
require_once('form/RequestCollaboratePage.php');
require_once('form/SuspendTicketPage.php');
require_once('form/ScheduleTicketPage.php');

//TODO -- merge MY_MODULE_PATH and raptor_datalayer_path var!!!!!!!
global $raptor_datalayer_path;
$raptor_datalayer_path = 'sites/all/modules/raptor_datalayer/core';
define('MY_MODULE_PATH', drupal_get_path('module', 'raptor_datalayer'));  


/*
//TODO idea from https://api.drupal.org/api/drupal/modules%21system%21system.api.php/function/hook_theme/7
function raptor_datalayer_theme(&$existing, &$type, &$theme, &$path) 
{
    error_log('Starting raptor_datalayer_theme');
    
    return array(
        'raptor_datalayer_page' => array(
            'results' => array(),
            'template' => 'raptor_datalayer_page', // define xxx-xxx.tpl.php inside module
            'variables' => array('page' => null), //define $xxx so it will available in your xxx-xxx.tpl.php
        
        ),
    );
}
*/

/**
 * Populate some variables that can be displayed by the theme pages.
 * @param type page 
 */
function raptor_datalayer_page_alter(&$page) 
{
    global $user;
    $currentpath = current_path();
    $currentpage = drupal_lookup_path('alias',$currentpath);
    if(substr($currentpath,0,4) == 'user' || substr($currentpage,0,14) == 'raptor_kickout' || substr($currentpath,0,14) == 'raptor_kickout')
    {
        error_log('HIT PAGEALTER>>>[' . $currentpath . '] and [' . $currentpage . ']');
        return;
    }
    error_log('TOP PAGEALTER>>>[' . $currentpath . '] and [' . $currentpage . ']');

    //Go to our custom front page url.
    $is_front_page = drupal_is_front_page();
    if($is_front_page)
    {
        if(user_is_logged_in())
        {
            $redirect = 'user/logout'; //.$user->name.'/my-argument';
        } else {
            $redirect = 'user/login'; //.$user->name.'/my-argument';
        }
        drupal_goto($redirect);
        return;
    }
    $oContext = \raptor\Context::getInstance();
    if($oContext == NULL)
    {
        //Log this joker out
        error_log('Got NULL context, sending user to logout page');
        if(user_is_logged_in())
        {
            $redirect = 'user/logout'; //.$user->name.'/my-argument';
        } else {
            $redirect = 'user/login'; //.$user->name.'/my-argument';
        }
        drupal_goto($redirect);
        return;
    } else
    if($oContext->hasForceLogoutReason())
    {
        $reason = $oContext->getForceLogoutReason();
        $msg = $reason['text'];
        drupal_set_message($msg,'error');
        $redirect = 'raptor_kickout_accountconflict';
        drupal_goto($redirect);   
    }
    
    global $raptor_worklist_rows;
    global $raptor_protocoldashboard;
    global $raptor_protocol_content;
    global $raptor_context;
    
    $userinfo = $oContext->getUserInfo();
    $userprivs = $userinfo->getSystemPrivileges();
    $raptor_context = $oContext;
	
    if($userinfo->getUserID() < 0)
    {
        //This is not a valid user session, this can happen on kickout and things like that.
        error_log('Did not have a valid user id (' . $userinfo->getUserID() . ')');
        if($userinfo->getUserID() == -99)
        {
            $redirect = 'raptor_kickout_accountconflict'; 
            drupal_goto($redirect);   
        }
        return;
    } else
    if($currentpage == 'protocol' || $currentpath == 'protocol')
    {
        error_log('IN PAGEALTER protocol >>>[' . $currentpath . '] and [' . $currentpage . ']');
        if(!$oContext->hasSelectedTrackingID())
        {
            //This can happen when we are done with a personal batch or somethning like that.
            die('Did NOT find a selected Tracking ID.  Go back to the worklist.');
        }
        
        //Set all the Protocol page values
        $oDD = new \raptor\DashboardData();
        $raptor_protocoldashboard = $oDD->getDashboardDetails($oContext);
        $oPSD = new \raptor\ProtocolSupportingData($oContext);
        $oGD = new \raptor\GraphData($oContext);
        $oLO = new \raptor\ListOptions();
        
        $raptor_protocol_content = array();
        $formContent = raptor_datalayer_protocolinfo_form_inputarea();
        
        $raptor_protocol_content['Input']['Protocol'] = drupal_render($formContent);
        $raptor_protocol_content['Reference']['OrderOverview'] = $oPSD->getOrderOverview();
        $raptor_protocol_content['Reference']['VitalsSummary'] = $oPSD->getVitalsSummary();
        $raptor_protocol_content['Reference']['MedicationsDetail'] = $oPSD->getMedicationsDetail();
        $raptor_protocol_content['Reference']['VitalsDetail'] = $oPSD->getVitalsDetail();
        $raptor_protocol_content['Reference']['AllergiesDetail'] = $oPSD->getAllergiesDetail();
        $raptor_protocol_content['Reference']['ProcedureLabsDetail'] = $oPSD->getProcedureLabsDetail();
        $raptor_protocol_content['Reference']['DiagnosticLabsDetail'] = $oPSD->getDiagnosticLabsDetail();
        $raptor_protocol_content['Reference']['DoseHxDetail'] = $oPSD->getDoseHxDetail();
        $raptor_protocol_content['Reference']['PathologyReportsDetail'] = $oPSD->getPathologyReportsDetail();
        $raptor_protocol_content['Reference']['SurgeryReportsDetail'] = $oPSD->getSurgeryReportsDetail();
        $raptor_protocol_content['Reference']['ProblemsListDetail'] = $oPSD->getProblemsListDetail();
        $raptor_protocol_content['Reference']['NotesDetail'] = $oPSD->getNotesDetail();
        $raptor_protocol_content['Reference']['RadiologyReportsDetail'] = $oPSD->getRadiologyReportsDetail();
        $raptor_protocol_content['Reference']['Graph']['Thumbnail'] = $oGD->getThumbnailGraphValues();
        $raptor_protocol_content['Reference']['Graph']['Labs'] = $oGD->getLabsGraphValues();
        $raptor_protocol_content['Reference']['Graph']['Vitals'] = $oGD->getVitalsGraphValues();
        $raptor_protocol_content['AtRiskMeds'] = $oLO->getAtRiskMedsKeywords();
    } else if($currentpage == 'worklist' || $currentpath == 'worklist'){
        
        error_log('IN PAGEALTER worklist >>>[' . $currentpath . '] and [' . $currentpage . ']');

        //Clear any batch values from the session if any exist.
        $oContext->clearPersonalBatchStack();
        
        if($userprivs['SWI1'] != 1 )
        {   
            //Cannot view worklist.
            $raptor_worklist_rows = array();
        } else {
            if($userinfo->isSiteAdministrator())
            {
                //Cannot view worklist.
                $raptor_worklist_rows = array();
                drupal_set_message('Administrator accounts should not have privilege SWI1!, but this one does.  Check the database.','warning');
            } else {
                //Set all the Worklist page values
                $oWL = new \raptor\WorklistData($oContext);
                $raptor_worklist_rows = $oWL->getWorklistRows($oContext);
            }
        }
		
    } else {
	
        error_log('IN PAGEALTER other >>>[' . $currentpath . '] and [' . $currentpage . ']');

        //Some kind of admin page.
        $raptor_worklist_rows = null;
        $raptor_protocol_content = null;
		
    }
}

function raptor_datalayer_user_logout($account)
{
    $oContext = \raptor\Context::getInstance(TRUE);
    $oContext->logoutSubsystems();
    drupal_set_message(t('Logout completed.'));
}

function raptor_datalayer_form_user_login_alter( &$form, $form_state )
{
    $form['#attributes']['autocomplete'] = 'off';
    $form['values']['name']['#attributes']['autocomplete'] = 'off';
    $form['values']['pass']['#attributes']['autocomplete'] = 'off';
    $form['#validate'] = array( 'user_login_name_validate', 'user_login_authenticate_validate', 'raptor_datalayer_login_validate', 'user_login_final_validate' );
}

function raptor_datalayer_login_validate( $form, &$form_state )
{
    $username = trim($form_state['values']['name']);
    $password = trim($form_state['values']['pass']);
    error_log("login validating username=[$username] password=[$password]");
    $errmsg = null;
    $isvalid = raptor_datalayer_check_user( $username, $password, $fatalerrmsg );
    if ($isvalid === TRUE )
    {
        error_log("login validated username=[$username] password=[$password] Is valid user");
        $candidateuser = user_load_by_name($username);
        if( $candidateuser == null || $candidateuser === FALSE )
        {
            $message = 'Did NOT find account information for username=['.$username.']';
            drupal_set_message($message,'warning');
            error_log($message);
        } else {
            $form_state['uid'] = $candidateuser->uid;
            user_login_submit($form, $form_state);
        }
    }

    if($fatalerrmsg != null)
    {
        //Too important not to stop everything here.
        die('FATAL ERROR MESSAGE>>>'.$fatalerrmsg);
    }
    // else drop through to the end and return nothing - Drupal will handle the rejection for us   
}

/**
 * Checks the user by trying to log in.  Do NOT call this to check on 'other' users.
 * @param type $username
 * @param type $password
 * @param type $fatalerrmsg
 * @return boolean
 */
function raptor_datalayer_check_user($username, $password, &$fatalerrmsg)
{
    $username = trim($username);    //20140620
    $isvalid = TRUE;  //Assume valid user unless we reject it in following code.
    if(trim($username) == '' || trim($password) == '')
    {
        return FALSE;
    }
    
    //Check if in DRUPAL
    $drupaluser = user_load_by_name($username);
    if( $drupaluser == null || $drupaluser === FALSE)
    {
        $message = ('Did NOT find account information for username=['.$username.'] in Drupal');
        error_log($message);
        $isvalid = FALSE;
    } else {
        //If we are here, then we know this is a valid DRUPAL account, but is it a valid RAPTOR user?
        try 
        {
            $oUserInfo = new \raptor\UserInfo($drupaluser->uid);
            if(!isset($oUserInfo) || $oUserInfo->getUserName() == '')
            {
                error_log('Trouble checking for user ['.$username.'] with uid=['.$drupaluser->uid.']: did NOT get UserInfo instance!');
                $isvalid = FALSE;    
            }
        } catch (\Exception $ex) {
            error_log('Exception checking for user ['.$username.'] with uid=['.$drupaluser->uid.']: ' .  $e->getMessage());
            $isvalid = FALSE;
        } 

        //Check the rest of the attributes.
        
        if($isvalid)
        {
            if(trim(strtolower($oUserInfo->getUserName())) !== trim(strtolower($username))) //trim on 20140620
            {
                //Internal configuration error!
                error_log('Tried logging in as user ['.$username.'] with uid=['.$drupaluser->uid.'], but RAPTOR username=['
                        .$oUserInfo->getUserName().'] for that uid! >> first char of username=' . ord($username)  );
                $fatalerrmsg = "Detected username configuration inconsistency for user account '$username'; there is mismatch with the RAPTOR user profile!  Contact the RAPTOR site administrator for correction. [" 
                        . strtolower($oUserInfo->getUserName()) . "]!==[" . strtolower($username) .'] >> first char of username=' . ord($username);
                $isvalid = FALSE;
            } else
            if($oUserInfo->getUserID() !== $drupaluser->uid)
            {
                //Internal configuration error!
                error_log('Tried logging in as user ['.$username.'] with Drupal uid=['.$drupaluser->uid.'], but RAPTOR uid=['.$oUserInfo->getUserID().'] for that username!');
                $fatalerrmsg = "Detected ID configuration inconsistency for user account '$username'; there is mismatch with the RAPTOR user profile!  Contact the RAPTOR site administrator for correction.".$oUserInfo->getUserID()." !== " .$drupaluser->uid;
                $isvalid = FALSE;
            } else
            if(!$oUserInfo->isEnabled())
            {
                error_log('Tried logging in with disabled user ['.$username.'] with uid=['.$drupaluser->uid.']');
                $isvalid = FALSE;
            } else {

                //We are done if this is a site administrator, else keep validating.
                if(!$oUserInfo->isSiteAdministrator())
                {
                    //Check against MDWS
                    $oContext = \raptor\Context::getInstance(TRUE);
                    $oContext->logoutSubsystems();  //Workaround to avoid getting 'already logged in' issue
                    $result = $oContext->authenticateSubsystems($username, $password);
                    if(is_array($result))
                    {
                        //We are here because the authentication failed.
                        error_log('Failed subsystem authentication of user ['.$username.'] (pwd=['.$password.']) with uid=['.$drupaluser->uid.']: Details=' . print_r($result,true));
                        $isvalid = FALSE;
                    }
                }
            }
            //Still valid?
            if($isvalid)
            {
                $tempUID = $drupaluser->uid; //Use the drupal UID now.
                $updated_dt = date("Y-m-d H:i:s", time());
                try
                {
                    db_insert('raptor_user_activity_tracking')
                        ->fields(array(
                            'uid'=>$tempUID,
                            'action_cd' => UATC_LOGIN,
                            'ipaddress' => $_SERVER['REMOTE_ADDR'],
                            'updated_dt'=>$updated_dt,
                        ))
                        ->execute();
                    db_merge('raptor_user_recent_activity_tracking')
                        ->key(array('uid'=>$tempUID,'ipaddress'=>$_SERVER['REMOTE_ADDR'],))
                        ->fields(array(
                            'uid'=>$tempUID,
                            'ipaddress' => $_SERVER['REMOTE_ADDR'],
                            'most_recent_login_dt'=>$updated_dt,
                            'most_recent_action_dt'=>$updated_dt,
                            'most_recent_action_cd' => UATC_LOGIN,
                        ))
                        ->execute();
                } catch (\Exception $ex) {
                    error_log('Trouble updating raptor_user_activity_tracking>>>'.print_r($ex,TRUE));
                    db_insert('raptor_user_activity_tracking')
                    ->fields(array(
                            'uid'=>$tempUID,
                            'action_cd' => UATC_ERR_AUTHENTICATION,
                            'ipaddress' => $_SERVER['REMOTE_ADDR'],
                            'updated_dt'=>$updated_dt,
                        ))
                        ->execute();
                }
            }
        }
    }
    return $isvalid;
}

function raptor_datalayer_user_login(&$edit, $account) 
{
    if (!isset($_POST['form_id']) || $_POST['form_id'] != 'user_pass_reset' || variable_get('login_destination_immediate_redirect', FALSE)) 
    {
        //login_destination_perform_redirect('login');
        $edit['redirect'] = 'worklist';
    }
}

function raptor_datalayer_menu_alter(&$items)
{
    $items['user/password']['access callback'] = FALSE;
    $items['user/register']['access callback'] = FALSE;
}

function raptor_datalayer_menu() 
{
    $items = array();
    
    $items['raptor_adminuserdatadump'] = array(
      'title' => t('User Account Data Dump'),
      'page callback' => 'raptor_adminuserdatadump_form',
      'access arguments' => array('access content'),
      'access callback' => TRUE,        
      'description' => t('Exract to a file all the non-admin RAPTOR user accounts'),
      'type' => MENU_CALLBACK,
    );

    $items['raptor_adminprotocollibdatadump'] = array(
      'title' => t('ProtocolLib Data Dump'),
      'page callback' => 'raptor_adminprotocollibdatadump_form',
      'access arguments' => array('access content'),
      'access callback' => TRUE,        
      'description' => t('Extract to a file all protocol lib data'),
      'type' => MENU_CALLBACK,
    );

    $items['raptor_declarehiddenworklistcols'] = array(
      'title' => t('Declare Hidden Worklist Cols'),
      'page callback' => 'raptor_declarehiddenworklistcols_form',
      'access arguments' => array('access content'),
      'access callback' => TRUE,        
      'description' => t('Declare Hidden Worklist Cols'),
      'type' => MENU_CALLBACK,
    );
    
    $items['raptor_resetdatafordemo'] = array(
      'title' => t('Reset data for demo'),
      'page callback' => 'raptor_resetdatafordemo_form',
      'access arguments' => array('access content'),
      'access callback' => TRUE,        
      'description' => t('Reset data for demo'),
      'type' => MENU_CALLBACK,
    );
    
    $items['raptor_kickout_accountconflict'] = array(
      'title' => t('User Session Account Kickout Account Conflict'),
      'page callback' => 'raptor_kickout_accountconflict_form',
      'access arguments' => array('access content'),
      'access callback' => TRUE,        
      'description' => t('User account session kickout because of account conflict'),
      'type' => MENU_CALLBACK,
    );
    $items['raptor_kickout_timeout'] = array(
      'title' => t('User Session Account Kickout Session Timeout'),
      'page callback' => 'raptor_kickout_timeout_form',
      'access arguments' => array('access content'),
      'access callback' => TRUE,        
      'description' => t('User account session kickout because of timeout'),
      'type' => MENU_CALLBACK,
    );

    $items['worklist'] = array(
      'title' => t('Worklist'),
      'page callback' => 'raptor_datalayer_worklist_form',
      'access arguments' => array('access content'),
      'access callback' => TRUE,        
      'description' => t('The RAPTOR Worklist Page'),
      'type' => MENU_CALLBACK,
    );
    $items['protocol'] = array(
      'title' => t('Protocol'),
      'page callback' => 'raptor_datalayer_protocolinfo_form_stub',
      //'page arguments' => array(1),
      'access arguments' => array('access content'),
      'access callback' => TRUE,        
      'description' => t('The RAPTOR Protocol Page'),
      'type' => MENU_CALLBACK,
    );
	 
    $items['raptor_datalayer/changepassword'] = array(
      'title' => t('RAPTOR Password Change'),
      'page callback' => 'raptor_datalayer_chgpwd_form',
      'access arguments' => array('access content'),
      'access callback' => TRUE,        
      'description' => t('Change Password Form'),
      'type' => MENU_CALLBACK,
    );
    $items['raptor_datalayer/manageusers'] = array(
      'title' => t('Manage User Accounts'),
      'page callback' => 'raptor_datalayer_mngusers_form',
      'access arguments' => array('access content'),
      'access callback' => TRUE,        
      'description' => t('Manage Users Form'),
      'type' => MENU_CALLBACK,
    );
    $items['raptor_datalayer/showroomreservations'] = array(
      'title' => t('Show Room Reservations'),
      'page callback' => 'raptor_datalayer_showroomreservations_form',
      'access arguments' => array('access content'),
      'access callback' => TRUE,        
      'description' => t('Show Room Reservations'),
      'type' => MENU_CALLBACK,
    );
    $items['raptor_datalayer/showuseractivity'] = array(
      'title' => t('Show User Activity'),
      'page callback' => 'raptor_datalayer_showuseractivity_form',
      'access arguments' => array('access content'),
      'access callback' => TRUE,        
      'description' => t('Show User Activity'),
      'type' => MENU_CALLBACK,
    );    
    $items['raptor_datalayer/viewuser'] = array(
      'title' => t('View User Profile'),
      'page callback' => 'raptor_datalayer_viewuser_form',
      'access arguments' => array('access content'),
      'access callback' => TRUE,        
      'description' => t('View User Profile'),
      'type' => MENU_CALLBACK,
    );
    $items['raptor_datalayer/adduser'] = array(
      'title' => t('Add User'),
      'page callback' => 'raptor_datalayer_adduser_form',
      'access arguments' => array('access content'),
      'access callback' => TRUE,        
      'description' => t('Add User Form'),
      'type' => MENU_CALLBACK,
    );
    $items['raptor_datalayer/deleteuser'] = array(
      'title' => t('Delete User'),
      'page callback' => 'raptor_datalayer_deleteuser_form',
      'access arguments' => array('access content'),
      'access callback' => TRUE,        
      'description' => t('Delete User Form'),
      'type' => MENU_CALLBACK,
    );
    $items['raptor_datalayer/edituser'] = array(
      'title' => t('Edit User'),
      'page callback' => 'raptor_datalayer_edituser_form',
      'access arguments' => array('access content'),
      'access callback' => TRUE,        
      'description' => t('Edit User Form'),
      'type' => MENU_CALLBACK,
    );
    
    $items['raptor_datalayer/managecontraindications'] = array(
      'title' => t('Manage Contraindications'),
      'page callback' => 'raptor_datalayer_mng_ci_form',
      'access arguments' => array('access content'),
      'access callback' => TRUE,        
      'description' => t('Manage Contraindications Form'),
      'type' => MENU_CALLBACK,
    );
    $items['raptor_datalayer/viewcontraindication'] = array(
      'title' => t('View Contraindication'),
      'page callback' => 'raptor_datalayer_viewci_form',
      'access arguments' => array('access content'),
      'access callback' => TRUE,        
      'description' => t('View Contraindications Detail'),
      'type' => MENU_CALLBACK,
    );
    $items['raptor_datalayer/addcontraindication'] = array(
      'title' => t('Add Contraindication'),
      'page callback' => 'raptor_datalayer_addci_form',
      'access arguments' => array('access content'),
      'access callback' => TRUE,        
      'description' => t('Add Contraindications Detail'),
      'type' => MENU_CALLBACK,
    );
    $items['raptor_datalayer/editcontraindication'] = array(
      'title' => t('Edit Contraindication'),
      'page callback' => 'raptor_datalayer_editci_form',
      'access arguments' => array('access content'),
      'access callback' => TRUE,        
      'description' => t('Edit Contraindications Detail'),
      'type' => MENU_CALLBACK,
    );
    $items['raptor_datalayer/deletecontraindication'] = array(
      'title' => t('Delete Contraindication'),
      'page callback' => 'raptor_datalayer_deleteci_form',
      'access arguments' => array('access content'),
      'access callback' => TRUE,        
      'description' => t('Delete Contraindications Detail'),
      'type' => MENU_CALLBACK,
    );
    
    $items['raptor_datalayer/manageprotocollib'] = array(
      'title' => t('Manage Protocols'),
      'page callback' => 'raptor_datalayer_mng_protocols_form',
      'access arguments' => array('access content'),
      'access callback' => TRUE,        
      'description' => t('Manage Protocols Form'),
      'type' => MENU_CALLBACK,
    );
    
    $items['raptor_datalayer/getprotocollibtab'] = array(
        'file' => 'GetProtocolLibTab.php',
        'file path' => MY_MODULE_PATH . '/form/',
        'title' => 'Protocol Library',
        'page callback' => 'raptor_datalayer_getprotocollibtab_form',
        'access arguments' => array('access content'),
        'access callback' => TRUE,        
        'description' => t('Protocol library tab content'),
        'type' => MENU_CALLBACK,
    );
    
    $items['raptor_datalayer/getradrptstab'] = array(
        'title' => 'Radiology Reports',
        'page callback' => 'raptor_datalayer_getradrptstab_form',
        'access arguments' => array('access content'),
        'access callback' => TRUE,        
        'description' => t('Radiology Reports tab content'),
        'type' => MENU_CALLBACK,
        'file' => 'GetRadiologyReportsTab.php',
        'file path' => MY_MODULE_PATH . '/form/',
    );

    $items['raptor_datalayer/viewprotocollib'] = array(
      'title' => t('View Protocol Lib'),
      'page callback' => 'raptor_datalayer_viewprotocollib_form',
      'access arguments' => array('access content'),
      'access callback' => TRUE,        
      'description' => t('View Protocol Lib Form'),
      'type' => MENU_CALLBACK,
    );
    $items['raptor_datalayer/addprotocollib'] = array(
      'title' => t('Add Protocol to Library'),
      'page callback' => 'raptor_datalayer_addprotocollib_form',
      'access arguments' => array('access content'),
      'access callback' => TRUE,        
      'description' => t('Add Protocol Lib Form'),
      'type' => MENU_CALLBACK,
    );
    $items['raptor_datalayer/deleteprotocollib'] = array(
      'title' => t('Delete Protocol from Library'),
      'page callback' => 'raptor_datalayer_deleteprotocollib_form',
      'access arguments' => array('access content'),
      'access callback' => TRUE,        
      'description' => t('Delete Protocol Lib Form'),
      'type' => MENU_CALLBACK,
    );
    $items['raptor_datalayer/editprotocollib'] = array(
      'title' => t('Edit Protocol in Library'),
      'page callback' => 'raptor_datalayer_editprotocollib_form',
      'access arguments' => array('access content'),
      'access callback' => TRUE,        
      'description' => t('Edit Protocol Lib Form'),
      'type' => MENU_CALLBACK,
    );
    
    $items['raptor_datalayer/managelists'] = array(
      'title' => t('Manage Lists'),
      'page callback' => 'raptor_datalayer_mng_lists_form',
      'access arguments' => array('access content'),
      'access callback' => TRUE,        
      'description' => t('Manage Lists Form'),
      'type' => MENU_CALLBACK,
    );
    $items['raptor_datalayer/editsedationoptions'] = array(
      'title' => t('Edit Sedation Options'),
      'page callback' => 'raptor_datalayer_editsedationoptions_form',
      'access arguments' => array('access content'),
      'access callback' => TRUE,        
      'description' => t('Edit Sedation Options Form'),
      'type' => MENU_CALLBACK,
    );
    $items['raptor_datalayer/edithydrationoptions'] = array(
      'title' => t('Edit Hydration Options'),
      'page callback' => 'raptor_datalayer_edithydrationoptions_form',
      'access arguments' => array('access content'),
      'access callback' => TRUE,        
      'description' => t('Edit Hydration Options Form'),
      'type' => MENU_CALLBACK,
    );
    $items['raptor_datalayer/editcontrastoptions'] = array(
      'title' => t('Edit Contrast Options'),
      'page callback' => 'raptor_datalayer_editcontrastoptions_form',
      'access arguments' => array('access content'),
      'access callback' => TRUE,        
      'description' => t('Edit Contrast Options Form'),
      'type' => MENU_CALLBACK,
    );
    $items['raptor_datalayer/editradioisotopeoptions'] = array(
      'title' => t('Edit Radioisotope Options'),
      'page callback' => 'raptor_datalayer_editradioisotopeoptions_form',
      'access arguments' => array('access content'),
      'access callback' => TRUE,        
      'description' => t('Edit Radioisotope Options Form'),
      'type' => MENU_CALLBACK,
    );
    $items['raptor_datalayer/editexamroomoptions'] = array(
      'title' => t('Edit Exam Room Options'),
      'page callback' => 'raptor_datalayer_editexamroomoptions_form',
      'access arguments' => array('access content'),
      'access callback' => TRUE,        
      'description' => t('Edit Exam Room Options Form'),
      'type' => MENU_CALLBACK,
    );
    $items['raptor_datalayer/editatriskmeds'] = array(
      'title' => t('Edit At Risk Medications List'),
      'page callback' => 'raptor_datalayer_editatriskmeds_form',
      'access arguments' => array('access content'),
      'access callback' => TRUE,        
      'description' => t('Edit At Risk Medications List Form'),
      'type' => MENU_CALLBACK,
    );
    

    $items['raptor_datalayer/viewReports'] = array(
      'title' => t('View Reports'),
      'page callback' => 'raptor_datalayer_viewreports_form',
      'access arguments' => array('access content'),
      'access callback' => TRUE,        
      'description' => t('View Reports Form'),
      'type' => MENU_CALLBACK,
    );
    $items['raptor_datalayer/viewrepdepact1'] = array(
      'title' => t('View Department Activity Report'),
      'page callback' => 'raptor_datalayer_viewrepdepact1_form',
      'access arguments' => array('access content'),
      'access callback' => TRUE,        
      'description' => t('View Department Activity Report Form'),
      'type' => MENU_CALLBACK,
    );
    $items['raptor_datalayer/viewrepusract1'] = array(
      'title' => t('View User Activity Analysis Report'),
      'page callback' => 'raptor_datalayer_viewrepusract1_form',
      'access arguments' => array('access content'),
      'access callback' => TRUE,        
      'description' => t('View User Activity Analysis Report Form'),
      'type' => MENU_CALLBACK,
    );
    
    $items['raptor_datalayer/editworklistranking'] = array(
      'title' => t('Edit Worklist Ranking'),
      'page callback' => 'raptor_datalayer_editworklistranking_form',
      'access arguments' => array('access content'),
      'access callback' => TRUE,        
      'description' => t('Edit Worklist Ranking Form'),
      'type' => MENU_CALLBACK,
    );
    
    $items['raptor_datalayer/requestcollaborate'] = array(
      'title' => t('Request Collaboration'),
      'page callback' => 'raptor_datalayer_requestcollaborate_form',
      'access arguments' => array('access content'),
      'access callback' => TRUE,        
      'description' => t('Request Collaboration Form'),
      'type' => MENU_CALLBACK,
    );
    $items['raptor_datalayer/suspendticket'] = array(
      'title' => t('Suspend Ticket'),
      'page callback' => 'raptor_datalayer_suspendticket_form',
      'access arguments' => array('access content'),
      'access callback' => TRUE,        
      'description' => t('Suspend Ticket Form'),
      'type' => MENU_CALLBACK,
    );
    
    $items['raptor_datalayer/scheduleticket'] = array(
      'title' => t('Schedule Ticket'),
      'page callback' => 'raptor_datalayer_scheduleticket_form',
      'access arguments' => array('access content'),
      'access callback' => TRUE,        
      'description' => t('Schedule Ticket Form'),
      'type' => MENU_CALLBACK,
    );
    
    return $items;
}

function raptor_datalayer_showuseractivity_form() 
{
    return drupal_get_form("raptor_datalayer_showuseractivity_form_builder");
}


function raptor_datalayer_showroomreservations_form() 
{
    return drupal_get_form("raptor_datalayer_showroomreservations_form_builder");
}


//User management
function raptor_datalayer_mngusers_form() 
{
    return drupal_get_form("raptor_datalayer_mngusers_form_builder");
}
function raptor_datalayer_viewuser_form() 
{
    return drupal_get_form("raptor_datalayer_viewuser_form_builder");
}
function raptor_datalayer_adduser_form() 
{
    return drupal_get_form("raptor_datalayer_adduser_form_builder");
}
function raptor_datalayer_edituser_form() 
{
    return drupal_get_form("raptor_datalayer_edituser_form_builder");
}
function raptor_datalayer_deleteuser_form() 
{
    return drupal_get_form("raptor_datalayer_deleteuser_form_builder");
}

function raptor_datalayer_getradrptstab_form() 
{
    return drupal_get_form("raptor_datalayer_getradrptstab_form_builder");
}

//Protocol lib management
function raptor_datalayer_getprotocollibtab_form() 
{
    return drupal_get_form("raptor_datalayer_getprotocollibtab_form_builder");
}
function raptor_datalayer_mng_protocols_form() 
{
    return drupal_get_form("raptor_datalayer_mng_protocols_form_builder");
}
function raptor_datalayer_viewprotocollib_form() 
{
    return drupal_get_form("raptor_datalayer_viewprotocollib_form_builder");
}
function raptor_datalayer_addprotocollib_form() 
{
    return drupal_get_form("raptor_datalayer_addprotocollib_form_builder");
}
function raptor_datalayer_editprotocollib_form() 
{
    return drupal_get_form("raptor_datalayer_editprotocollib_form_builder");
}
function raptor_datalayer_deleteprotocollib_form() 
{
    return drupal_get_form("raptor_datalayer_deleteprotocollib_form_builder");
}

function raptor_datalayer_mng_lists_form() 
{
    return drupal_get_form("raptor_datalayer_mng_lists_form_builder");
}
function raptor_datalayer_editsedationoptions_form() 
{
    return drupal_get_form("raptor_datalayer_editsedationoptions_form_builder");
}
function raptor_datalayer_edithydrationoptions_form() 
{
    return drupal_get_form("raptor_datalayer_edithydrationoptions_form_builder");
}
function raptor_datalayer_editcontrastoptions_form() 
{
    return drupal_get_form("raptor_datalayer_editcontrastoptions_form_builder");
}
function raptor_datalayer_editradioisotopeoptions_form() 
{
    return drupal_get_form("raptor_datalayer_editradioisotopeoptions_form_builder");
}
function raptor_datalayer_editexamroomoptions_form() 
{
    return drupal_get_form("raptor_datalayer_editexamroomoptions_form_builder");
}
function raptor_datalayer_editatriskmeds_form() 
{
    return drupal_get_form("raptor_datalayer_editatriskmeds_form_builder");
}


function raptor_datalayer_viewreports_form() 
{
    return drupal_get_form("raptor_datalayer_viewreports_form_builder");
}
function raptor_datalayer_viewrepdepact1_form() 
{
    return drupal_get_form("raptor_datalayer_viewrepdepact1_form_builder");
}
function raptor_datalayer_viewrepusract1_form() 
{
    return drupal_get_form("raptor_datalayer_viewrepusract1_form_builder");
}




//Manage contraindications
function raptor_datalayer_mng_ci_form() 
{
    return drupal_get_form("raptor_datalayer_mng_ci_form_builder");
}
function raptor_datalayer_viewci_form() 
{
    return drupal_get_form("raptor_datalayer_viewci_form_builder");
}
function raptor_datalayer_addci_form() 
{
    return drupal_get_form("raptor_datalayer_addci_form_builder");
}
function raptor_datalayer_editci_form() 
{
    return drupal_get_form("raptor_datalayer_editci_form_builder");
}
function raptor_datalayer_deleteci_form() 
{
    return drupal_get_form("raptor_datalayer_deleteci_form_builder");
}

//Miscellaneous forms
function raptor_datalayer_editworklistranking_form() 
{
    return drupal_get_form("raptor_datalayer_editworklistranking_form_builder");
}

/**
 * 
 * @return renderable Drupal input form
 */
function raptor_datalayer_protocolinfo_form_inputarea() 
{
    return drupal_get_form("raptor_datalayer_protocolinfo_form_builder");
}

function raptor_datalayer_protocolinfo_form_stub() 
{
    //drupal_set_message('About to check for selected TID');
    $oContext = \raptor\Context::getInstance();
    if(isset($_REQUEST['pbatch']))
    {
        //drupal_set_message('PBATCH detected!!!>>>' . $_REQUEST['pbatch']);
        $rawrtid=null;
        $pbatch=$_REQUEST['pbatch'];
        if($pbatch !== 'CONTINUE')
        {
            $aPBatch=explode(',', urldecode($pbatch));
            $oContext->setPersonalBatchStack($aPBatch);
        } else {
            //drupal_set_message('PBATCH CONTINUE detected and selected!!!');
            $oContext->clearSelectedTrackingID();  //Blank out current selection so gets next from the stack.
        }
    } else if(isset($_REQUEST['rawrtid'])) {
        $rawrtid=$_REQUEST['rawrtid'];
        $pbatch=null;
        if($rawrtid === null || substr($rawrtid,0,1) !== '[' || substr($rawrtid,-1) !== ']')
        {
            die("The rawrtid parameter MUST start with [ and end with ] bracket!");
        }
        $clean_rawrtid = substr($rawrtid, 1, -1);
        $oContext->setSelectedTrackingID($clean_rawrtid);
    }
    if(!$oContext->hasSelectedTrackingID())
    {
        //drupal_set_message('<h1>Did NOT find a selected TID</h1>');
        drupal_goto('worklist',array('redirectreason'=>'nomorertids'));
    }
    //drupal_set_message('Found a selected TID');
    return array(); //The theme builds it.
}

function raptor_adminuserdatadump_form() 
{
    return drupal_get_form("raptor_adminuserdatadump_form_builder");
}

function raptor_adminprotocollibdatadump_form() 
{
    return drupal_get_form("raptor_adminprotocollibdatadump_form_builder");
}

function raptor_declarehiddenworklistcols_form() 
{
    return drupal_get_form("raptor_declarehiddenworklistcols_form_builder");
}

function raptor_resetdatafordemo_form() 
{
    return drupal_get_form("raptor_resetdatafordemo_form_builder");
}

function raptor_kickout_accountconflict_form() 
{
    return drupal_get_form("raptor_kickout_accountconflict_form_builder");
}

function raptor_kickout_timeout_form() 
{
    return drupal_get_form("raptor_kickout_timeout_form_builder");
}

function raptor_datalayer_worklist_form() 
{
    return drupal_get_form("raptor_datalayer_worklist_form_builder");
}

function raptor_datalayer_login_form() 
{
    return drupal_get_form("raptor_datalayer_login_form_builder");
}


function raptor_datalayer_chgpwd_form() 
{
    return drupal_get_form("raptor_datalayer_chgpwd_form_builder");
}


function raptor_datalayer_requestcollaborate_form() 
{
    return drupal_get_form("raptor_datalayer_requestcollaborate_form_builder");
}

function raptor_datalayer_suspendticket_form() 
{
    return drupal_get_form("raptor_datalayer_suspendticket_form_builder");
}

function raptor_datalayer_scheduleticket_form() 
{
    return drupal_get_form("raptor_datalayer_scheduleticket_form_builder");
}

function raptor_datalayer_getradrptstab_form_builder($form_state)
{
    $oContext = \raptor\Context::getInstance();    
    $oPI = new \raptor\GetRadiologyReportsTab($oContext);
    $form = array();
    $disabled = FALSE;
    $myvalues = array();    //No values for this one.
    return $oPI->getForm($form, $form_state, $disabled, $myvalues);
}

function raptor_datalayer_getprotocollibtab_form_builder($form_state)
{
    $oPI = new \raptor\GetProtocolLibTab();
    $form = array();
    $disabled = false;
    $myvalues = array();    //No values for this one.
    return $oPI->getForm($form, $form_state, $disabled, $myvalues);
}


function raptor_datalayer_mngusers_form_builder($form_state)
{
    $oPI = new \raptor\ManageUsersPage();
    $form = array();
    $disabled = false;
    $myvalues = array();    //No values for this one.
    return $oPI->getForm($form, $form_state, $disabled, $myvalues);
}
function raptor_datalayer_mng_protocols_form_builder($form_state)
{
    $oPI = new \raptor\ManageProtocolLibPage();
    $form = array();
    $disabled = false;
    $myvalues = array();    //No values for this one.
    return $oPI->getForm($form, $form_state, $disabled, $myvalues);
}
function raptor_datalayer_mng_ci_form_builder($form_state)
{
    $oPI = new \raptor\ManageContraIndicationsPage();
    $form = array();
    $disabled = false;
    $myvalues = array();    //No values for this one.
    return $oPI->getForm($form, $form_state, $disabled, $myvalues);
}



function raptor_datalayer_mng_lists_form_builder($form_state)
{
    $oPI = new \raptor\ManageListsPage();
    $form = array();
    $disabled = false;
    $myvalues = array();    //No values for this one.
    return $oPI->getForm($form, $form_state, $disabled, $myvalues);
}


function raptor_datalayer_showuseractivity_form_builder($form_state)
{
    $oPI = new \raptor\ViewReportUserActivity();
    $form = array();
    $disabled = false;
    $myvalues = array();    //No values for this one.
    return $oPI->getForm($form, $form_state, $disabled, $myvalues);
}


function raptor_datalayer_showroomreservations_form_builder($form_state)
{
    $oPI = new \raptor\ViewReportRoomReservations();
    $form = array();
    $disabled = false;
    $myvalues = array();    //No values for this one.
    return $oPI->getForm($form, $form_state, $disabled, $myvalues);
}



function raptor_datalayer_edithydrationoptions_form_builder($form_state)
{
    $oPI = new \raptor\EditListHydrationPage();
    $form = array();
    $disabled = false;
    $myvalues = $oPI->getFieldValues();    
    return $oPI->getForm($form, $form_state, $disabled, $myvalues);
}
function raptor_datalayer_edithydrationoptions_form_builder_validate($form, &$form_state) 
{
    $oPI = new \raptor\EditListHydrationPage();
    $rowsupdated = $oPI->updateDatabase($form_state['values']);
}
function raptor_datalayer_edithydrationoptions_form_builder_submit($form, &$form_state) 
{
    //Success!
    $form_state['redirect'] = array(
        'worklist',
        array(
          'query' => array(
            'dialog' => 'managelists',
          ),
        ),
      );
}


function raptor_datalayer_viewreports_form_builder($form_state)
{
    $oPI = new \raptor\ManageReportsPage();
    $form = array();
    $disabled = false;
    $myvalues = array();    //No values for this one.
    return $oPI->getForm($form, $form_state, $disabled, $myvalues);
}



function raptor_datalayer_viewrepdepact1_form_builder($form_state)
{
    $oPI = new \raptor\ViewReport1Page();
    $form = array();
    $disabled = false;
    $myvalues = $oPI->getFieldValues();    
    return $oPI->getForm($form, $form_state, $disabled, $myvalues);
}
function raptor_datalayer_viewrepdepact1_form_builder_validate($form, &$form_state) 
{
    //TODO if we add filter criteria
    $oPI = new \raptor\ViewReport1Page();
}
function raptor_datalayer_viewrepdepact1_form_builder_submit($form, &$form_state) 
{
    //TODO refresh the result
    $oPI = new \raptor\ViewReport1Page();
}

function raptor_datalayer_viewrepusract1_form_builder($form_state)
{
    $oPI = new \raptor\ViewReport2Page();
    $form = array();
    $disabled = false;
    $myvalues = $oPI->getFieldValues();    
    return $oPI->getForm($form, $form_state, $disabled, $myvalues);
}
function raptor_datalayer_viewrepusract1_form_builder_validate($form, &$form_state) 
{
    //TODO if we add filter criteria
    $oPI = new \raptor\ViewReport2Page();
}
function raptor_datalayer_viewrepusract1_form_builder_submit($form, &$form_state) 
{
    //TODO refresh the result
    $oPI = new \raptor\ViewReport2Page();
}



function raptor_datalayer_editsedationoptions_form_builder($form_state)
{
    $oPI = new \raptor\EditListSedationPage();
    $form = array();
    $disabled = false;
    $myvalues = $oPI->getFieldValues();    
    return $oPI->getForm($form, $form_state, $disabled, $myvalues);
}
function raptor_datalayer_editsedationoptions_form_builder_validate($form, &$form_state) 
{
    $oPI = new \raptor\EditListSedationPage();
    $rowsupdated = $oPI->updateDatabase($form_state['values']);
}
function raptor_datalayer_editsedationoptions_form_builder_submit($form, &$form_state) 
{
    //Success!
    $form_state['redirect'] = array(
        'worklist',
        array(
          'query' => array(
            'dialog' => 'managelists',
          ),
        ),
      );
}

function raptor_datalayer_editcontrastoptions_form_builder($form_state)
{
    $oPI = new \raptor\EditListContrastPage();
    $form = array();
    $disabled = false;
    $myvalues = $oPI->getFieldValues();    
    return $oPI->getForm($form, $form_state, $disabled, $myvalues);
}
function raptor_datalayer_editcontrastoptions_form_builder_validate($form, &$form_state) 
{
    $oPI = new \raptor\EditListContrastPage();
    $rowsupdated = $oPI->updateDatabase($form_state['values']);
}
function raptor_datalayer_editcontrastoptions_form_builder_submit($form, &$form_state) 
{
    //Success!
    $form_state['redirect'] = array(
        'worklist',
        array(
          'query' => array(
            'dialog' => 'managelists',
          ),
        ),
      );
}


function raptor_datalayer_editradioisotopeoptions_form_builder($form_state)
{
    $oPI = new \raptor\EditListRadioisotopePage();
    $form = array();
    $disabled = false;
    $myvalues = $oPI->getFieldValues();    
    return $oPI->getForm($form, $form_state, $disabled, $myvalues);
}
function raptor_datalayer_editradioisotopeoptions_form_builder_validate($form, &$form_state) 
{
    $oPI = new \raptor\EditListRadioisotopePage();
    $rowsupdated = $oPI->updateDatabase($form_state['values']);
}
function raptor_datalayer_editradioisotopeoptions_form_builder_submit($form, &$form_state) 
{
    //Success!
    $form_state['redirect'] = array(
        'worklist',
        array(
          'query' => array(
            'dialog' => 'managelists',
          ),
        ),
      );
}

function raptor_datalayer_editexamroomoptions_form_builder($form_state)
{
    $oPI = new \raptor\EditListExamRoomPage();
    $form = array();
    $disabled = false;
    $myvalues = $oPI->getFieldValues();    
    return $oPI->getForm($form, $form_state, $disabled, $myvalues);
}
function raptor_datalayer_editexamroomoptions_form_builder_validate($form, &$form_state) 
{
    $oPI = new \raptor\EditListExamRoomPage();
    $rowsupdated = $oPI->updateDatabase($form_state['values']);
}
function raptor_datalayer_editexamroomoptions_form_builder_submit($form, &$form_state) 
{
    //Success!
    $form_state['redirect'] = array(
        'worklist',
        array(
          'query' => array(
            'dialog' => 'managelists',
          ),
        ),
      );
}

function raptor_datalayer_editatriskmeds_form_builder($form_state)
{
    $oPI = new \raptor\EditListAtRiskMedsPage();
    $form = array();
    $disabled = false;
    $myvalues = $oPI->getFieldValues();    
    return $oPI->getForm($form, $form_state, $disabled, $myvalues);
}
function raptor_datalayer_editatriskmeds_form_builder_validate($form, &$form_state) 
{
    $oPI = new \raptor\EditListAtRiskMedsPage();
    $rowsupdated = $oPI->updateDatabase($form_state['values']);
}
function raptor_datalayer_editatriskmeds_form_builder_submit($form, &$form_state) 
{
    //Success!
    $form_state['redirect'] = array(
        'worklist',
        array(
          'query' => array(
            'dialog' => 'managelists',
          ),
        ),
      );
}





function raptor_datalayer_chgpwd_form_builder($form_state)
{
    $oPI = new \raptor\ChangePasswordPage();
    $form = array();
    $disabled = false;
    $myvalues = array();    //TODO
    return $oPI->getForm($form, $form_state, $disabled, $myvalues);
}
function raptor_datalayer_chgpwd_form_builder_validate($form, &$form_state) 
{
    $oPI = new \raptor\ChangePasswordPage();
    $rowsupdated = $oPI->updateDatabase($form, $form_state['values']);
}
function raptor_datalayer_chgpwd_form_builder_submit($form, &$form_state) 
{
    //Success!
    //drupal_set_message('Created new user ' . $form_state['values']['username'], 'status');
    $form_state['redirect'] = array(
        'worklist',
      );
}



function raptor_datalayer_adduser_form_builder($form_state)
{
    $oPI = new \raptor\AddUserPage();
    $form = array();
    $disabled = false;
    $myvalues = $oPI->getFieldValues();    
    return $oPI->getForm($form, $form_state, $disabled, $myvalues);
}
function raptor_datalayer_adduser_form_builder_validate($form, &$form_state) 
{
    $oPI = new \raptor\AddUserPage();
    $rowsupdated = $oPI->updateDatabase($form, $form_state['values']);
}
function raptor_datalayer_adduser_form_builder_submit($form, &$form_state) 
{
    //Success!
    //drupal_set_message('Created new user ' . $form_state['values']['username'], 'status');
    $form_state['redirect'] = array(
        'worklist',
        array(
          'query' => array(
            'dialog' => 'manageUsers',
          ),
        ),
      );
}

function raptor_datalayer_addprotocollib_form_builder($form_state)
{
    $oPI = new \raptor\AddProtocolLibPage();
    $form = array();
    $disabled = false;
    $myvalues = $oPI->getFieldValues();
    return $oPI->getForm($form, $form_state, $disabled, $myvalues);
}
function raptor_datalayer_addprotocollib_form_builder_customvalidate($form, &$form_state) 
{
    $oPI = new \raptor\AddProtocolLibPage();
    return $oPI->looksValid($form, $form_state['values']);
}
function raptor_datalayer_addprotocollib_form_builder_submit($form, &$form_state) 
{
    $oPI = new \raptor\AddProtocolLibPage();
    $rowsupdated = $oPI->updateDatabase($form, $form_state['values']);
    if($rowsupdated == 1)
    {
        //Success!
        $form_state['redirect'] = array(
            'worklist',
            array(
              'query' => array(
                'dialog' => 'manageProtocolLib',
              ),
            ),
          );
    }
}

/**
 * Send a downloadable file to the browser
 * @param type $form_state
 * @return binary file
 */
function raptor_adminprotocollibdatadump_form_builder($form_state)
{
    //Make sure only authorized user can do this.
    $oContext = \raptor\Context::getInstance();
    $userinfo = $oContext->getUserInfo();
    if(!$userinfo->isSiteAdministrator())
    {
        drupal_set_message('Only a Site Administrator can access this URL.','error');
        return array();
    }
    
    //Log this.
    error_log('Dumping the protocol library information from the ' . print_r($userinfo,TRUE));

    //Dump it.
    header("Cache-Control: public");
    header("Content-Description: File Transfer");
    //header("Content-Length: 64000;");
    header("Content-Disposition: attachment; filename=raptor_adminprotocollibdatadump.raw");
    header("Content-Type: application/octet-stream; "); 
    header("Content-Transfer-Encoding: binary");
    $now = date('Y-m-d H:i:s');
    echo '### RAPTOR DATA DUMPED ' . $now;
    echo "\n### TIMEZONE " . date_default_timezone_get();
    echo "\n### PROTOCOL LIB DATA DUMP TOOL VERSION 20140713.1";
    
    $tablename = 'raptor_protocol_lib';
    $result = db_select($tablename, 'n')
            ->fields('n')
            ->orderBy('modality_abbr')
            ->orderBy('protocol_shortname')
            ->execute();
    $sDataDump = serialize($result->fetchAllAssoc('protocol_shortname'));
    echo "\n>>>tablename=" . $tablename;
    echo "\n>>>rows=" . $result->rowCount();
    echo "\n>>>data=$sDataDump";
    
    $tablename = 'raptor_protocol_template';
    $result = db_select($tablename, 'n')
            ->fields('n')
            ->orderBy('protocol_shortname')
            ->execute();
    $sDataDump = serialize($result->fetchAllAssoc('protocol_shortname'));
    echo "\n>>>tablename=" . $tablename;
    echo "\n>>>rows=" . $result->rowCount();
    echo "\n>>>data=$sDataDump";

    $tablename = 'raptor_protocol_keywords';
    $result = db_select($tablename, 'n')
            ->fields('n')
            ->orderBy('protocol_shortname')
            ->orderBy('weightgroup')
            ->execute();
    $sDataDump = serialize($result->fetchAll());
    echo "\n>>>tablename=" . $tablename;
    echo "\n>>>rows=" . $result->rowCount();
    echo "\n>>>data=$sDataDump";

    $tablename = 'raptor_protocol_code_maps';
    $result = db_select($tablename, 'n')
            ->fields('n')
            ->orderBy('protocol_shortname')
            ->execute();
    $sDataDump = serialize($result->fetchAll());
    echo "\n>>>tablename=" . $tablename;
    echo "\n>>>rows=" . $result->rowCount();
    echo "\n>>>data=$sDataDump";

    drupal_exit();  //Otherwise more stuff gets added to the file.
}

/**
 * Send a downloadable file to the browser
 * @param type $form_state
 * @return binary file
 */
function raptor_adminuserdatadump_form_builder($form_state)
{
    //Make sure only authorized user can do this.
    $oContext = \raptor\Context::getInstance();
    $userinfo = $oContext->getUserInfo();
    if(!$userinfo->isSiteAdministrator())
    {
        drupal_set_message('Only a Site Administrator can access this URL.','error');
        return array();
    }
    
    //Log this.
    error_log('Dumping the user account information from the ' . print_r($userinfo,TRUE));

    //Dump it.
    header("Cache-Control: public");
    header("Content-Description: File Transfer");
    //header("Content-Length: 64000;");
    header("Content-Disposition: attachment; filename=raptor_adminuserdatadump.raw");
    header("Content-Type: application/octet-stream; "); 
    header("Content-Transfer-Encoding: binary");
    $now = date('Y-m-d H:i:s');
    echo '### RAPTOR DATA DUMPED ' . $now;
    echo "\n### TIMEZONE " . date_default_timezone_get();
    echo "\n### USER DATA DUMP TOOL VERSION 20140623.1";
    
    $tablename = 'raptor_user_profile';
    $result = db_select($tablename, 'n')
            ->fields('n')
            ->orderBy('role_nm')
            ->orderBy('username')
            //->condition('role_nm','Site Administrator','<>')
            ->condition('uid',1,'<>')   //Do NOT export the CORE admin account.
            ->execute();
    $sUserDataDump = serialize($result->fetchAllAssoc('uid'));
    echo "\n>>>tablename=" . $tablename;
    echo "\n>>>rows=" . $result->rowCount();
    echo "\n>>>data=$sUserDataDump";
    
    $tablename = 'raptor_user_modality';
    $result = db_select($tablename, 'n')
            ->fields('n')
            ->orderBy('uid')
            ->orderBy('modality_abbr')
            ->execute();
    $sUserDataDump = serialize($result->fetchAll());
    echo "\n>>>tablename=" . $tablename;
    echo "\n>>>rows=" . $result->rowCount();
    echo "\n>>>data=$sUserDataDump";

    $tablename = 'raptor_user_modality_override';
    $result = db_select($tablename, 'n')
            ->fields('n')
            ->orderBy('uid')
            ->orderBy('modality_abbr')
            ->execute();
    $sUserDataDump = serialize($result->fetchAll());
    echo "\n>>>tablename=" . $tablename;
    echo "\n>>>rows=" . $result->rowCount();
    echo "\n>>>data=$sUserDataDump";

    $tablename = 'raptor_user_anatomy';
    $result = db_select($tablename, 'n')
            ->fields('n')
            ->orderBy('uid')
            ->execute();
    $sUserDataDump = serialize($result->fetchAll());
    echo "\n>>>tablename=" . $tablename;
    echo "\n>>>rows=" . $result->rowCount();
    echo "\n>>>data=$sUserDataDump";

    $tablename = 'raptor_user_anatomy_override';
    $result = db_select($tablename, 'n')
            ->fields('n')
            ->orderBy('uid')
            ->execute();
    $sUserDataDump = serialize($result->fetchAll());
    echo "\n>>>tablename=" . $tablename;
    echo "\n>>>rows=" . $result->rowCount();
    echo "\n>>>data=$sUserDataDump";

    $tablename = 'raptor_user_group_membership';
    $result = db_select($tablename, 'n')
            ->fields('n')
            ->orderBy('uid')
            ->execute();
    $sUserDataDump = serialize($result->fetchAll());
    echo "\n>>>tablename=" . $tablename;
    echo "\n>>>rows=" . $result->rowCount();
    echo "\n>>>data=$sUserDataDump";
    
    $tablename = 'raptor_user_service';
    $result = db_select($tablename, 'n')
            ->fields('n')
            ->orderBy('uid')
            ->execute();
    $sUserDataDump = serialize($result->fetchAll());
    echo "\n>>>tablename=" . $tablename;
    echo "\n>>>rows=" . $result->rowCount();
    echo "\n>>>data=$sUserDataDump";
    drupal_exit();  //Otherwise more stuff gets added to the file.
}

function raptor_declarehiddenworklistcols_form_builder($form_state)
{
    if(isset($_REQUEST['hidden_worklistcols'])) 
    {
        $hidden_worklistcols=$_REQUEST['hidden_worklistcols'];
    } else {
        die('Did NOT find required hidden_worklistcols param!!!!');
    }
    $sDelimitedColNames = urldecode($hidden_worklistcols);
    $aCols = explode(',',$sDelimitedColNames);
    $oContext = \raptor\Context::getInstance();
    $userinfo = $oContext->getUserInfo();
    $userinfo->setPrefWorklistColsHidden($aCols);
    if(count($aCols) > 0)
    {
        drupal_set_message('Hiding '.count($aCols).' worklist columns');
    }
    //drupal_exit();
    return array();
}


/**
 * REMOVE THIS AFTER WE CONVERT ALL THE CONFIG FILE INTO INSERT STATEMENTS
 */
    function raptor_debugtemp()
    {
        drupal_set_message('CALLING DEBUG debugtemp FUNCTION','error');
        
        $aProcName=array();
        
        $sPath = __MYFOLDER_CHOICES__."/list-protocol.cfg";
        $aLines = file($sPath, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);

        //$sLOOK='LOOK:';
        $sCategory=NULL;
        $aList=array();
        $bFoundDefault=false;
        $aGM=array();           //Array of arrays so we preserve natural option order within groups.
        foreach($aLines as $nLine => $sLine)
        {
            if($sLine[0] != '#' && trim($sLine)!='')
            {
                if($sLine[0] == '[')
                {
                    $sCategory = substr($sLine,1,strlen($sLine)-2);
                } else {
                    $aChoice=explode('|',$sLine);
                    if(count($aChoice)<2)
                    {
                        die("Improperly configured choices file: $sPath<br>CHECK LINE:$nLine<br>TEXT:$sLine<br>RAW:".print_r($aLines,TRUE));
                    }
                    for($n=count($aChoice)+1;$n<=5;$n++)
                    {
                        $aChoice[]='';  //"#MISSING#";
                    }
                    $protocol_shortname=trim($aChoice[0]);
                    if(substr($protocol_shortname,0,1) != '#')
                    {
                        $name=trim($aChoice[1]);
                        $modality_abbr=strtoupper(trim($aChoice[2]));
                        $sLineKeywords=strtoupper($aChoice[3]);
                        $aKWGroups = explode('|',$sLineKeywords);
                        //Cleanup keword groups
                        $sKWG = $aKWGroups[0];
                        $aKWG1 = array();
                        if(substr($sKWG,1,1) != '#')
                        {
                            $allkw = $aKWGroups[0];
                            $allkw = str_replace(';',',',$allkw);
                            $aKWG1 = explode(',',$allkw);
                        }
                        $aKWG2 = array();
                        if(isset($aKWGroups[1]))
                        {
                            $sKWG = $aKWGroups[1];
                            if(substr($sKWG,0,1) != '#')
                            {
                                $allkw = $aKWGroups[1];
                                $allkw = str_replace(';',',',$allkw);
                                $aKWG2 = explode(',',$allkw);
                            }
                        }
                        $aKWG3 = array();
                        if(isset($aKWGroups[2]))
                        {
                            $sKWG = $aKWGroups[2];
                            if(substr($sKWG,0,1) != '#')
                            {
                                $allkw = $aKWGroups[2];
                                $allkw = str_replace(';',',',$allkw);
                                $aKWG3 = explode(',',$allkw);
                            }
                        }
                        $inserttxt = "'$protocol_shortname','$name',1,'$modality_abbr','', 0, 0, 0, 0, 0, 0, 0, '', 1, '2014-07-11 20:32:16'";
                        drupal_set_message('INSERT raptor_protocol_lib >>> ('.$inserttxt .'),');

                        $inserttxt = "'$protocol_shortname', 1, 0, '500cc H2O over 2hr pre-scan + post-scan', NULL, 0, NULL, NULL, 0, NULL, 'ProHance', 1, NULL, NULL, 'yes', 'ipso default protocol notes facto', 'ipso default exam notes facto', '2014-07-11 20:32:16'";
                        drupal_set_message('INSERT raptor_protocol_template >>> ('.$inserttxt .'),');
                        
                        
                        foreach($aKWG1 as $kw)
                        {
                            $kw = trim($kw);
                            if(substr($kw,0,1) != '#')
                            {
                                $inserttxt = "'$protocol_shortname',1,'$kw', '2014-07-13 15:19:00'";
                                drupal_set_message('INSERT raptor_protocol_keywords >>> ('.$inserttxt .'),');
                            }
                        }
                        foreach($aKWG2 as $kw)
                        {
                            $kw = trim($kw);
                            if(substr($kw,0,1) != '#')
                            {
                                $inserttxt = "'$protocol_shortname',2,'$kw', '2014-07-13 15:19:00'";
                                drupal_set_message('INSERT raptor_protocol_keywords >>> ('.$inserttxt .'),');
                            }
                        }
                        foreach($aKWG3 as $kw)
                        {
                            $kw = trim($kw);
                            if(substr($kw,0,1) != '#')
                            {
                                $inserttxt = "'$protocol_shortname',3,'$kw', '2014-07-13 15:19:00'";
                                drupal_set_message('INSERT raptor_protocol_keywords >>> ('.$inserttxt .'),');
                            }
                        }
                    }
                }
            }
        }
    }

function raptor_resetdatafordemo_form_builder($form_state)
{
    //Make sure only authorized user can do this.
    $oContext = \raptor\Context::getInstance();
    $userinfo = $oContext->getUserInfo();
    if(!$userinfo->isSiteAdministrator())
    {
        drupal_set_message('Only a Site Administrator can access this URL.','error');
        return array();
    }

    $loaded = module_load_include('inc','raptor_datalayer','install/LoadUtils');
    if(!$loaded)
    {
        drupal_set_message('Failed to load the LoadUtils class', 'error');
    }
    $form[]['done_button'] = array('#type' => 'submit'
    , '#value' => t('Reset Everything')
    , '#attributes' => array('title' => 'Reset everything for demo purposes.')
    );
    $form[]['done_button'] = array('#type' => 'submit'
    , '#value' => t('Reset Core Ticket Data')
    , '#attributes' => array('title' => 'Reset ticket workflow statuses.')
    );
    $form[]['done_button'] = array('#type' => 'submit'
    , '#value' => t('Reset User Accounts')
    , '#attributes' => array('title' => 'Reset all user account information.')
    );
    $form[]['done_button'] = array('#type' => 'submit'
    , '#value' => t('Reset ProtocolLib Data')
    , '#attributes' => array('title' => 'Reset all user account information.')
    );
    $form[]['done_button'] = array('#type' => 'submit'
    , '#value' => t('Exit')
    , '#attributes' => array('title' => 'Done with all operations, go back to main page.')
    );

    //drupal_exit();
    return $form;
}

function raptor_resetdatafordemo_form_builder_submit($form, &$form_state)
{
    //Make sure only authorized user can do this.
    $oContext = \raptor\Context::getInstance();
    $userinfo = $oContext->getUserInfo();
    if(!$userinfo->isSiteAdministrator())
    {
        drupal_set_message('Only a Site Administrator can access this URL.','error');
        return array();
    }
    
    //TODO remove this once protocol lib is converted from config file raptor_debugtemp();

    $clickedbutton = $form_state['clicked_button'];
    $clickedvalue = $clickedbutton['#value'];
    //drupal_set_message('Clicked button = [' . $clickedvalue . ']');
    if($clickedvalue == t('Exit'))
    {
        $form_state['redirect'] = array(
            'worklist',
            array(),
          );
    } else {
        //Stay on same page!
        if(!module_load_include('inc','raptor_datalayer','install/LoadUtils'))
        {
            die('Could NOT include the LoadUtils class!');
        }
        $resetall = ($clickedvalue == t('Reset Everything'));
        if($resetall)
        {
            $resetcoredata = TRUE;
            $resetusers = TRUE;
            $resetprotocollib = TRUE;
        } else {
            $resetcoredata = ($clickedvalue == t('Reset Core Ticket Data'));
            $resetusers=($clickedvalue == t('Reset User Accounts'));
            $resetprotocollib=($clickedvalue == t('Reset ProtocolLib Data'));
        }

        if($resetusers)
        {
            \raptor\LoadUtils::loadUserBasedata(TRUE);
            drupal_set_message('User accounts have been reset as of ' . date("Y-m-d H:i:s", time()));
        }
        if($resetprotocollib)
        {
            \raptor\LoadUtils::loadProtocolLibBasedata(TRUE);
            drupal_set_message('ProptocolLib data has been reset as of ' . date("Y-m-d H:i:s", time()));
        }
        if($resetcoredata)
        {
            //Remove all the existing tracking records.
            $num = db_delete('raptor_ticket_tracking')
                    ->execute();
            $num = db_delete('raptor_ticket_workflow_history')
                    ->execute();
            $num = db_delete('raptor_ticket_collaboration')
                    ->execute();
            $num = db_delete('raptor_ticket_lock_tracking')
                    ->execute();
            $num = db_delete('raptor_schedule_track')
                    ->execute();
            $num = db_delete('raptor_schedule_track_replaced')
                    ->execute();
            $num = db_delete('raptor_ticket_protocol_settings')
                    ->execute();
            $num = db_delete('raptor_ticket_protocol_settings_replaced')
                    ->execute();

            $updated_dt = date("Y-m-d H:i:s", time());
            $num = db_insert('raptor_ticket_tracking')
                    ->fields(array(
                        'siteid' => VISTA_SITE,
                        'IEN' => 2029,
                        'workflow_state' => 'AP',
                        'updated_dt' => $updated_dt,
                    ))
                    ->execute();
            $num = db_insert('raptor_ticket_tracking')
                    ->fields(array(
                        'siteid' => VISTA_SITE,
                        'IEN' => 2929,
                        'workflow_state' => 'AP',
                        'updated_dt' => $updated_dt,
                    ))
                    ->execute();
            $num = db_insert('raptor_ticket_tracking')
                    ->fields(array(
                        'siteid' => VISTA_SITE,
                        'IEN' => 2051,
                        'workflow_state' => 'IA',
                        'suspended_dt' => $updated_dt,
                        'updated_dt' => $updated_dt,
                    ))
                    ->execute();
            $num = db_insert('raptor_ticket_tracking')
                    ->fields(array(
                        'siteid' => VISTA_SITE,
                        'IEN' => 2052,
                        'workflow_state' => 'EC',
                        'exam_completed_dt' => $updated_dt,
                        'updated_dt' => $updated_dt,
                    ))
                    ->execute();
            $num = db_insert('raptor_ticket_tracking')
                    ->fields(array(
                        'siteid' => VISTA_SITE,
                        'IEN' => 2054,
                        'workflow_state' => 'EC',
                        'exam_completed_dt' => $updated_dt,
                        'updated_dt' => $updated_dt,
                    ))
                    ->execute();
            drupal_set_message('Core ticket data has been reset as of ' . date("Y-m-d H:i:s", time()));
        }
    }
}


function raptor_kickout_accountconflict_form_builder($form_state)
{
    if(user_is_logged_in())
    {
        $redirect_title = 'Logout page link';
        $redirect_url = 'user/logout'; //.$user->name.'/my-argument';
    } else {
        $redirect_title = 'Login page link';
        $redirect_url = 'user/login'; //.$user->name.'/my-argument';
    }

    $form[]['info'] = array(
        '#markup' => '<h1>Another workstation has logged in using the same account you were using.  You have now been kicked out.</h1><p>Only one user should have the credentials for a RAPTOR account.'
                    .'Change your password and contact security if you did not log into the other workstation because your credentials may have been compromised.</p>'
                    .'<p>Links: <a href="'.$redirect_url.'">'.$redirect_title.'</a></p>');

    //drupal_exit();
    return $form;
}

function raptor_kickout_accountconflict_form_builder_submit($form, &$form_state)
{
	drupal_set_message('Time ' . date("Y-m-d H:i:s", time()));
}


function raptor_kickout_timeout_form_builder($form_state)
{
    if(user_is_logged_in())
    {
        $redirect_title = 'Logout page link';
        $redirect_url = 'user/logout'; //.$user->name.'/my-argument';
    } else {
        $redirect_title = 'Login page link';
        $redirect_url = 'user/login'; //.$user->name.'/my-argument';
    }

    $form[]['info'] = array(
        '#markup' => '<h1>Your RAPTOR session has timedout</h1>'
                    .'<p>Links: <a href="'.$redirect_url.'">'.$redirect_title.'</a></p>');

    //drupal_exit();
    return $form;
}

function raptor_kickout_timeout_form_builder_submit($form, &$form_state)
{
	drupal_set_message('Time ' . date("Y-m-d H:i:s", time()));
}



function raptor_datalayer_worklist_form_builder($form_state)
{
    //drupal_set_message('<h2>Building WORKLIST page at ' . microtime(TRUE) . '</h2>');

    $oPI = new \raptor\WorklistPage();
    $form = array();
    $disabled = false;
    $myvalues = $oPI->getFieldValues();
    $buildresult = $oPI->getForm($form, $form_state, $disabled, $myvalues);
    //drupal_set_message('<h2>Done building WORKLIST page at ' . microtime(TRUE) . '</h2>');
    
    return $buildresult;
}
function raptor_datalayer_worklist_form_builder_submit($form, &$form_state) 
{
	$form_state['redirect'] = array(
		'worklist',
		array(),
	  );
}


function raptor_datalayer_edituser_form_builder($form_state)
{
    if(!isset($_GET['uid']))
    {
        die("Missing required uid url parameter!");
    }
    $nUID = $_GET['uid'];
    if(!is_numeric($nUID))
    {
        die("Invalid uid url parameter: that value MUST be numeric!");
    }

    $oPI = new \raptor\EditUserPage($nUID);
    $form = array();
    $disabled = false;
    $myvalues = $oPI->getFieldValues();
    return $oPI->getForm($form, $form_state, $disabled, $myvalues);
}
function raptor_datalayer_edituser_form_builder_submit($form, &$form_state) 
{
    $nUID = $form_state['values']['uid'];
    $oPI = new \raptor\EditUserPage($nUID);
    $rowsupdated = $oPI->updateDatabase($form_state['values']);
    if($rowsupdated == 1)
    {
        //Success!
        $form_state['redirect'] = array(
            'worklist',
            array(
              'query' => array(
                'dialog' => 'manageUsers',
              ),
            ),
          );
    }
}


function raptor_datalayer_viewuser_form_builder($form_state)
{
    if(!isset($_GET['uid']))
    {
        die("Missing required uid url parameter!");
    }
    $nUID = $_GET['uid'];
    if(!is_numeric($nUID))
    {
        die("Invalid uid url parameter: that value MUST be numeric!");
    }

    $oPI = new \raptor\ViewUserPage($nUID);
    $form = array();
    $disabled = true;
    $myvalues = $oPI->getFieldValues($nUID);
    return $oPI->getForm($form, $form_state, $disabled, $myvalues);
}
function raptor_datalayer_deleteuser_form_builder($form_state)
{
    if(!isset($_GET['uid']))
    {
        die("Missing required uid url parameter!");
    }
    $nUID = $_GET['uid'];
    if(!is_numeric($nUID))
    {
        die("Invalid uid url parameter: that value MUST be numeric!");
    }

    $oPI = new \raptor\DeleteUserPage($nUID);
    $form = array();
    $disabled = false;
    $myvalues = $oPI->getFieldValues($nUID);
    return $oPI->getForm($form, $form_state, $disabled, $myvalues);
}
function raptor_datalayer_deleteuser_form_builder_submit($form, &$form_state) 
{
    if(!isset($_GET['uid']))
    {
        die("Missing required uid url parameter!");
    }
    $nUID = $_GET['uid'];
    if(!is_numeric($nUID))
    {
        die("Invalid uid url parameter: that value MUST be numeric!");
    }

    $oPI = new \raptor\DeleteUserPage($nUID);
    $rowsupdated = $oPI->updateDatabase($form_state['values']);
    if($rowsupdated == 1)
    {
        //Success!
        $form_state['redirect'] = array(
            'worklist',
            array(
              'query' => array(
                'dialog' => 'manageUsers',
              ),
            ),
          );
    }
}

function raptor_datalayer_viewprotocollib_form_builder($form_state)
{
    if(!isset($_GET['protocol_shortname']))
    {
        die("Missing required protocol_shortname url parameter!");
    }
    $psn = $_GET['protocol_shortname'];
    if(is_numeric($psn))
    {
        die("Invalid protocol_shortname url parameter: that value MUST NOT be numeric!");
    }

    $oPI = new \raptor\ViewProtocolLibPage($psn);
    $form = array();
    $disabled = false;
    $myvalues = $oPI->getFieldValues($psn);
    return $oPI->getForm($form, $form_state, $disabled, $myvalues);
}
function raptor_datalayer_deleteprotocollib_form_builder($form_state)
{
    if(!isset($_GET['protocol_shortname']))
    {
        die("Missing required protocol_shortname url parameter!");
    }
    $psn = $_GET['protocol_shortname'];
    if(is_numeric($psn))
    {
        die("Invalid protocol_shortname url parameter: that value MUST NOT be numeric!");
    }

    $oPI = new \raptor\DeleteProtocolLibPage($psn);
    $form = array();
    $disabled = false;
    $myvalues = $oPI->getFieldValues($psn);
    return $oPI->getForm($form, $form_state, $disabled, $myvalues);
}
function raptor_datalayer_deleteprotocollib_form_builder_submit($form, &$form_state) 
{
    if(!isset($_GET['protocol_shortname']))
    {
        die("Missing required protocol_shortname url parameter!");
    }
    $psn = $_GET['protocol_shortname'];
    if(is_numeric($psn))
    {
        die("Invalid protocol_shortname url parameter: that value MUST NOT be numeric!");
    }
    $oPI = new \raptor\DeleteProtocolLibPage($psn);
    $rowsupdated = $oPI->updateDatabase($form, $form_state['values']);
    if($rowsupdated == 1)
    {
        //Success!
        $form_state['redirect'] = array(
            'worklist',
            array(
              'query' => array(
                'dialog' => 'manageProtocolLib',
              ),
            ),
          );
    }
}
function raptor_datalayer_editprotocollib_form_builder($form, $form_state)
{
    $myvalues = isset($form_state['values']) ? $form_state['values'] : array(); //Blank if not ajax.
    if(isset($_GET['protocol_shortname']))
    { 
        $psn = $_GET['protocol_shortname'];
    } else if(isset($myvalues['protocol_shortname'])) {
        $psn = $myvalues['protocol_shortname'];
    } else {
        die("Missing required protocol_shortname url parameter! !!!! See fs=".print_r($form_state['values'],TRUE));
    }
    if(is_numeric($psn))
    {
        die("Invalid protocol_shortname url parameter: that value MUST be text!");
    }

    $oPI = new \raptor\EditProtocolLibPage($psn);
    $form = array();
    $disabled = false;
    $myvalues = $oPI->getFieldValues($psn);
    return $oPI->getForm($form, $form_state, $disabled, $myvalues);
}
function raptor_datalayer_editprotocollib_form_builder_customvalidate($form, &$form_state) 
{
    $psn = $_GET['protocol_shortname'];
    $oPI = new \raptor\EditProtocolLibPage($psn);
    return $oPI->looksValid($form, $form_state['values']);
}
function raptor_datalayer_editprotocollib_form_builder_submit($form, &$form_state) 
{
    if(!isset($_GET['protocol_shortname']))
    {
        die("Missing required protocol_shortname url parameter!");
    }
    $psn = $_GET['protocol_shortname'];
    if(is_numeric($psn))
    {
        die("Invalid protocol_shortname url parameter: that value MUST be text!");
    }

    $oPI = new \raptor\EditProtocolLibPage($psn);
    $bOkay = $oPI->updateDatabase($form, $form_state['values']);
    if($bOkay)
    {
        //Success!
        $form_state['redirect'] = array(
            'worklist',
            array(
              'query' => array(
                'dialog' => 'manageProtocolLib',
              ),
            ),
          );
    }
}

function raptor_datalayer_addci_form_builder($form_state)
{
    $oPI = new \raptor\AddContraIndicationPage();
    $form = array();
    $disabled = false;
    $myvalues = $oPI->getFieldValues();
    return $oPI->getForm($form, $form_state, $disabled, $myvalues);
}
function raptor_datalayer_addci_form_builder_validate($form, &$form_state) 
{
    $oPI = new \raptor\AddContraIndicationPage();
    return $oPI->looksValid($form, $form_state['values']);
}
function raptor_datalayer_addci_form_builder_submit($form, &$form_state) 
{
    $oPI = new \raptor\AddContraIndicationPage();
    $rowsupdated = $oPI->updateDatabase($form, $form_state['values']);
    if($rowsupdated == 1)
    {
        //Success!
        $form_state['redirect'] = array(
            'worklist',
            array(
              'query' => array(
                'dialog' => 'manageContraindications',
              ),
            ),
          );
    }
}

function raptor_datalayer_viewci_form_builder($form_state)
{
    if(!isset($_GET['rn']))
    {
        die("Missing required rn url parameter!");
    }
    $rule_nm = $_GET['rn'];
    if(is_numeric($rule_nm))
    {
        die("Invalid rn url parameter: that value MUST NOT be numeric!");
    }

    $oPI = new \raptor\ViewContraindicationPage($rule_nm);
    $form = array();
    $disabled = false;
    $myvalues = $oPI->getFieldValues($rule_nm);
    return $oPI->getForm($form, $form_state, $disabled, $myvalues);
}
function raptor_datalayer_deleteci_form_builder($form_state)
{
    if(!isset($_GET['rn']))
    {
        die("Missing required rn url parameter!");
    }
    $rule_nm = $_GET['rn'];
    if(is_numeric($rule_nm))
    {
        die("Invalid rn url parameter: that value MUST NOT be numeric!");
    }
    
    $oPI = new \raptor\DeleteContraindicationPage($rule_nm);
    $form = array();
    $disabled = false;
    $myvalues = $oPI->getFieldValues($rule_nm);
    return $oPI->getForm($form, $form_state, $disabled, $myvalues);
}
function raptor_datalayer_deleteci_form_builder_submit($form, &$form_state) 
{
    if(!isset($_GET['rn']))
    {
        die("Missing required rn url parameter!");
    }
    $rule_nm = $_GET['rn'];
    if(is_numeric($rule_nm))
    {
        die("Invalid rn url parameter: that value MUST NOT be numeric!");
    }
    $oPI = new \raptor\DeleteContraindicationPage($rule_nm);
    $rowsupdated = $oPI->updateDatabase($form, $form_state['values']);
    if($rowsupdated == 1)
    {
        //Success!
        $form_state['redirect'] = array(
            'worklist',
            array(
              'query' => array(
                'dialog' => 'manageContraindications',
              ),
            ),
          );
    }
}
function raptor_datalayer_editci_form_builder($form_state)
{
    if(!isset($_GET['rn']))
    {
        die("Missing required rn url parameter!");
    }
    $rule_nm = $_GET['rn'];
    if(is_numeric($rule_nm))
    {
        die("Invalid rn url parameter: that value MUST NOT be numeric!");
    }
    $oPI = new \raptor\EditContraindicationPage($rule_nm);
    $form = array();
    $disabled = false;
    $myvalues = $oPI->getFieldValues($rule_nm);
    return $oPI->getForm($form, $form_state, $disabled, $myvalues);
}
function raptor_datalayer_editci_form_builder_validate($form, &$form_state) 
{
    if(!isset($_GET['rn']))
    {
        die("Missing required rn url parameter!");
    }
    $rule_nm = $_GET['rn'];
    $oPI = new \raptor\EditContraindicationPage($rule_nm);
    return $oPI->looksValid($form, $form_state['values']);
}
function raptor_datalayer_editci_form_builder_submit($form, &$form_state) 
{
    if(!isset($_GET['rn']))
    {
        die("Missing required rn url parameter!");
    }
    $rule_nm = $_GET['rn'];
    if(is_numeric($rule_nm))
    {
        die("Invalid rn url parameter: that value MUST NOT be numeric!");
    }
    $oPI = new \raptor\EditContraindicationPage($rule_nm);
    $rowsupdated = $oPI->updateDatabase($form, $form_state['values']);
    if($rowsupdated == 1)
    {
        //Success!
        $form_state['redirect'] = array(
            'worklist',
            array(
              'query' => array(
                'dialog' => 'manageContraindications',
              ),
            ),
          );
    }
}


function raptor_datalayer_editworklistranking_form_builder($form_state)
{
    $oContext = \raptor\Context::getInstance();
    $nUID = $oContext->getUID();
    $oPI = new \raptor\EditWorklistRankingPage($nUID);
    $form = array();
    $disabled = false;
    $myvalues = $oPI->getFieldValues();
    return $oPI->getForm($form, $form_state, $disabled, $myvalues);
}
function raptor_datalayer_editworklistranking_form_builder_validate($form, &$form_state) 
{
    $oContext = \raptor\Context::getInstance();
    $nUID = $oContext->getUID();
    $oPI = new \raptor\EditWorklistRankingPage($nUID);
    $myvalues = $form_state['values'];
    return $oPI->looksValid($form, $myvalues);
}
function raptor_datalayer_editworklistranking_form_builder_submit($form, &$form_state) 
{
    //$nUID = $form_state['values']['uid'];
    $oContext = \raptor\Context::getInstance();
    $nUID = $oContext->getUID();
    $oPI = new \raptor\EditWorklistRankingPage($nUID);
    $rowsupdated = $oPI->updateDatabase($form, $form_state);
    if($rowsupdated == 1)
    {
        //Success!
        $form_state['redirect'] = array(
            'worklist',
          );
    }
}

function raptor_datalayer_protocolinfo_form_builder($form_state)
{
    
    //die('LOOK PATH='.drupal_get_path()."\n".'AT MYARG>>>' . print_r($myarg,TRUE));
    //drupal_set_message('<h2>Building PROTOCOLINFO page at ' . microtime(TRUE) . '</h2>');
    $oContext = \raptor\Context::getInstance();
    $getform = TRUE;
    //die('LOOK NOW We are here with $rawrtid = '.$rawrtid);
    if($getform)
    {
        /*
        $loaded = module_load_include('php','raptor_contraindications','core/ContraIndEngine');
        if(!$loaded)
        {
            $msg = 'Failed to load the Contraindication Engine';
            throw new \Exception($msg);      //This is fatal, so stop everything now.
        }
        $aPatientInfoForCIE = array();    //TODO move this code elsewhere
        $aPatientInfoForCIE['GENDER'] = 'M';
        $aPatientInfoForCIE['AGE'] = '70';
        $aPatientInfoForCIE['WEIGHT_KG'] = NULL;
        $aPatientInfoForCIE['MIN_EGFR_10DAYS'] = NULL;
        $aPatientInfoForCIE['MIN_EGFR_15DAYS'] = NULL;
        $aPatientInfoForCIE['MIN_EGFR_30DAYS'] = NULL;
        $aPatientInfoForCIE['MIN_EGFR_45DAYS'] = NULL;
        $aPatientInfoForCIE['MIN_EGFR_60DAYS'] = NULL;
        $aPatientInfoForCIE['MIN_EGFR_90DAYS'] = NULL;

        $oCIE = new \raptor\ContraIndEngine($aPatientInfoForCIE);
        */
        
        $pbmsg = $oContext->getPersonalBatchStackMessage();
        if($pbmsg !== null)
        {
            drupal_set_message('<div class="personalbatchmsg">'.$pbmsg.'</div>');
        }
        $oPI = new \raptor\ProtocolInfoPage();
        $form = array();
        $disabled = false;
        $tid = $oContext->getSelectedTrackingID();
        $myvalues = $oPI->getFieldValues($tid);
        $buildResult = $oPI->getForm($form, $form_state, $disabled, $myvalues);
        //drupal_set_message('Built values for ' . $tid . ' see...' . print_r($myvalues,TRUE));
    } else {
        //die('should run commands now!!!!!!!!');
        $buildResult = array();
        //$commands[] = ajax_command_alert('Another ajax command thing.');
        //return array('#type'=>'ajax','#commands'=>$commands);
    }
    //drupal_set_message('<h2>Done building PROTOCOLINFO page at ' . microtime(TRUE) . '</h2>');
    return $buildResult;
}

function raptor_datalayer_protocolinfo_form_builder_customvalidate($form, &$form_state) 
{
    $oPI = new \raptor\ProtocolInfoPage();
    $bOkay = $oPI->looksValid($form, $form_state);
    /*
    drupal_set_message('>>>in validate for form with result=['.$bOkay
            .']>>>submitted=['.$form_state['submitted'] 
            .']>>>!haserrors=['. !form_get_errors() 
            .']>>>!rebuild=['. !$form_state['rebuild'].']<br>errors....'.print_r(form_get_errors(),TRUE));
     */
    return $bOkay;
}

function raptor_datalayer_protocolinfo_form_builder_customsubmit($form, &$form_state) 
{
    $oPI = new \raptor\ProtocolInfoPage();
    $clickedbutton = $form_state['clicked_button'];
    $clickedvalue = $clickedbutton['#value'];
    $bOkay = $oPI->updateDatabase($clickedbutton, $form_state['values']);
    //drupal_set_message('Clicked button = [' . $clickedvalue . '] and updated=' . $rowsupdated);
    if($bOkay)
    {
        if($clickedvalue == 'Approve' 
                || substr($clickedbutton["#value"],0,11) == 'Collaborate' 
                || substr($clickedbutton["#value"],0,7) == 'Suspend' 
                || substr($clickedbutton["#value"],0,7) == 'Reserve' 
                || substr($clickedbutton["#value"],0,7) == 'Request' 
                || substr($clickedbutton["#value"],0,4) == 'Exam' 
                || substr($clickedbutton["#value"],0,2) == 'QA')
        {
            $form_state['redirect'] = array(
                'protocol',array('query' => array('pbatch'=>'CONTINUE'))
              );  
        }
    }
}


function raptor_datalayer_requestcollaborate_form_builder($form_state)
{
    $oPI = new \raptor\RequestCollaboratePage();
    $form = array();
    $disabled = false;
    $myvalues = $oPI->getFieldValues();    
    return $oPI->getForm($form, $form_state, $disabled, $myvalues);
}
function raptor_datalayer_requestcollaborate_form_builder_validate($form, &$form_state) 
{
    $oPI = new \raptor\RequestCollaboratePage();
    $rowsupdated = $oPI->updateDatabase($form, $form_state['values']);
}
function raptor_datalayer_requestcollaborate_form_builder_submit($form, &$form_state) 
{
    //Success!
    $form_state['redirect'] = array(
        'worklist',
      );
}

function raptor_datalayer_suspendticket_form_builder($form_state)
{
    $oPI = new \raptor\SuspendTicketPage();
    $form = array();
    $disabled = false;
    $myvalues = $oPI->getFieldValues();    
    return $oPI->getForm($form, $form_state, $disabled, $myvalues);
}
function raptor_datalayer_suspendticket_form_builder_validate($form, &$form_state) 
{
    $oPI = new \raptor\SuspendTicketPage();
    $rowsupdated = $oPI->updateDatabase($form, $form_state['values']);
}
function raptor_datalayer_suspendticket_form_builder_submit($form, &$form_state) 
{
    //Success!
    $form_state['redirect'] = array(
        'worklist',
      );
}

function raptor_datalayer_scheduleticket_form_builder($form_state)
{
    $oContext = \raptor\Context::getInstance();
    $oPI = new \raptor\ScheduleTicketPage();
    
    if(!isset($_REQUEST['rawrtid'])) 
    {
        die('Did not find expected rawrtid parameter!');
    }
    $rawrtid=$_REQUEST['rawrtid'];
    if($rawrtid === null || substr($rawrtid,0,1) !== '[' || substr($rawrtid,-1) !== ']')
    {
        die("The rawrtid parameter MUST start with [ and end with ] bracket!");
    }
    $clean_rawrtid = substr($rawrtid, 1, -1);
    $oContext->setSelectedTrackingID($clean_rawrtid);
    
    $form = array();
    $disabled = false;
    $myvalues = $oPI->getFieldValues();    
    return $oPI->getForm($form, $form_state, $disabled, $myvalues);
}
function raptor_datalayer_scheduleticket_form_builder_validate($form, &$form_state) 
{
    $oPI = new \raptor\ScheduleTicketPage();
    
    $clickedbutton = $form_state['clicked_button'];
    $clickedvalue = $clickedbutton['#value'];
    if(substr($clickedvalue,0,strlen(t('Save these'))) == t('Save these'))
    {
        //Write an error message but save it anyways
        drupal_set_message('The multiple schedule feature is under consideration, seeking feedback from SMEs on workflow fit.', 'error');
    }
    $rowsupdated = $oPI->updateDatabase($form, $form_state['values']);
}
function raptor_datalayer_scheduleticket_form_builder_submit($form, &$form_state) 
{
    //Success!
    $form_state['redirect'] = array(
        'worklist',
      );
}


/** 
 * Implements hook_help. 
 * 
 * Displays help and module information. 
 * 
 * @param path  
 *   Which path of the site we're using to display help 
 * @param arg  
 *   Array that holds the current path as returned from arg() function 
 */
function raptor_datalayer_help($path, $arg) 
{
  switch ($path)
  {
    case "admin/help#raptor_datalayer":
        
        global $raptor_contraindications_path;
        if(isset($raptor_contraindications_path))
        {
            $sContraindicationsInfo = "Utilizes the contraindication engine installed at ".$raptor_contraindications_path;
        } else {
            $sContraindicationsInfo = "WARNING: No contraindication engine found!  Be sure to install and enable a compatible engine!";
        }
      return '<p>'.  t("Returns relevant data for the RAPTOR application. " . $sContraindicationsInfo) .'</p>';
      break;
  }
}

/**
 * Implementation of hook_form_alter().
 *
 * Autofocus on the username field.
 * Some proper page titles would be nice for a change.. User account is a bit boring..
 */
function raptor_datalayer_form_alter(&$form, &$form_state, $form_id) {
  // Autofocus on the username field.
  // And add some pretty CSS :).
  // And a few other things too...
  if ($form_id == 'user_login' || $form_id == 'user_register_form' || $form_id == 'user_pass') {
    $form['name']['#attributes']['autofocus'] = 'autofocus';

    // We don't really need descriptions to tell us what we already know...
    //unset($form['name']['#description']);
    //unset($form['pass']['#description']);

    // Add in some CSS.
    //$form['#attached']['css'][] = drupal_get_path('module', 'raptor_datalayer') .'/css/raptor_datalayer.css';
  }

  switch ($form_id) {
    case 'user_login':
        drupal_set_title(t('RAPTOR Login'));
        break;

    case 'user_register_form':
        drupal_set_message('Contact your RAPTOR Site Administrator to create an account.', 'warning');
        drupal_goto('user/login');
        break;

    case 'user_pass':
        drupal_set_message('RAPTOR uses Vista authentication for users.  Contact your RAPTOR Site Administrator if you need more information.', 'warning');
        drupal_goto('user/login');
        break;
  }
}

/**
 * Implementation of hook_init().
 */
function raptor_datalayer_init() 
{
  global $user;

  //error_log('In raptor_datalayer_init as ['.arg(0).']...' . print_r($user,true));
  
  $oContext = \raptor\Context::getInstance();
  if (!$user->uid) 
  {
    // We need to collect where they were going in the first place because they may get pissed if 
    // they don't get there after logging in :).
    $destination = '';
    if ($_GET['q']) 
    {
      $destination = array('destination' => $_GET['q']);
      //error_log('In raptor_datalayer_init setting destination as ' . print_r($destination,true));
    }

    // If this site is set to private we want to redirect all anonymous users to the login form.
    if (variable_get('raptor_datalayer_private')) 
    {
      // Because of Drush we only want to block anything not from CLI.
      if (arg(0) !== 'user' && php_sapi_name() !== 'cli') 
      {
        //error_log('Normal1 about to go to user/login ' . print_r($user,true));
        drupal_goto('user/login', array('query' => $destination));
        //error_log('Done with normal1 goto user/login in raptor_datalayer_init');
      } else {
        //Not an error condition.
        //error_log('Did send to user/login ' . print_r($user,true));
      }
    }
  
    // Make sure that anon users cannot go to just /user but directly to the login form.
    if ((arg(0) == 'user') && !arg(1) && php_sapi_name() !== 'cli') 
    //if (arg(1) == 'login' || (arg(0) == 'user' && !arg(1) && php_sapi_name() !== 'cli')) 
    {
        //error_log('Normal about to go to user/login ' . print_r($user,true));
        drupal_goto('user/login');
        //error_log('Done with normal2 goto user/login in raptor_datalayer_init');
    } else {
        //error_log('Did NOT2 goto user/login from raptor_datalayer_init!!! arg0=' . arg(0) . ' arg1=' . arg(1) . ' php_sapi_name()=' . php_sapi_name());
    }
  }
  //error_log('Done with raptor_datalayer_init');
}

/**
 * Call the VIX to get image metadata.
 * @param type $oContext
 * @param type $patientDFN
 * @param type $patientICN
 * @param type $reportID
 * @param type $caseNumber
 * @return array of image metadata
 */
function raptor_datalayer_getAvailImageMetadata($oContext, $patientDFN, $patientICN, $reportID, $caseNumber)
{
    require_once('core/VixDao.php');
    $oVixDao = $oContext->getVixDao();
    $aImageInfo = $oVixDao->getImageInfoForReport($patientDFN, $patientICN, $reportID, $caseNumber);
    return $aImageInfo;
    //return 'result from vixtest call @' . time() . "-> [$patientDFN], [$patientICN], [$reportID], [$caseNumber]";
}