KIDS Distribution saved on Sep 28, 2015@08:20:31
RAPTOR KIDS
**KIDS**:VEFB 1.2^

**INSTALL NAME**
VEFB 1.2
"BLD",8673,0)
VEFB 1.2^^0^3150928^n
"BLD",8673,1,0)
^9.61A^1^1^3150928^^
"BLD",8673,1,1,0)
INSTALL RAPTOR NOTE TITLES
"BLD",8673,4,0)
^9.64PA^^
"BLD",8673,6.3)
3
"BLD",8673,"INID")
^y
"BLD",8673,"INIT")
VEFBRAP0
"BLD",8673,"KRN",0)
^9.67PA^779.2^20
"BLD",8673,"KRN",.4,0)
.4
"BLD",8673,"KRN",.401,0)
.401
"BLD",8673,"KRN",.402,0)
.402
"BLD",8673,"KRN",.403,0)
.403
"BLD",8673,"KRN",.5,0)
.5
"BLD",8673,"KRN",.84,0)
.84
"BLD",8673,"KRN",3.6,0)
3.6
"BLD",8673,"KRN",3.8,0)
3.8
"BLD",8673,"KRN",9.2,0)
9.2
"BLD",8673,"KRN",9.8,0)
9.8
"BLD",8673,"KRN",9.8,"NM",0)
^9.68A^2^2
"BLD",8673,"KRN",9.8,"NM",1,0)
VEFBRAP0^^0^B2265220
"BLD",8673,"KRN",9.8,"NM",2,0)
VEFBRPC^^0^B3110
"BLD",8673,"KRN",9.8,"NM","B","VEFBRAP0",1)

"BLD",8673,"KRN",9.8,"NM","B","VEFBRPC",2)

"BLD",8673,"KRN",19,0)
19
"BLD",8673,"KRN",19,"NM",0)
^9.68A^^
"BLD",8673,"KRN",19.1,0)
19.1
"BLD",8673,"KRN",101,0)
101
"BLD",8673,"KRN",409.61,0)
409.61
"BLD",8673,"KRN",771,0)
771
"BLD",8673,"KRN",779.2,0)
779.2
"BLD",8673,"KRN",870,0)
870
"BLD",8673,"KRN",8989.51,0)
8989.51
"BLD",8673,"KRN",8989.52,0)
8989.52
"BLD",8673,"KRN",8994,0)
8994
"BLD",8673,"KRN","B",.4,.4)

"BLD",8673,"KRN","B",.401,.401)

"BLD",8673,"KRN","B",.402,.402)

"BLD",8673,"KRN","B",.403,.403)

"BLD",8673,"KRN","B",.5,.5)

"BLD",8673,"KRN","B",.84,.84)

"BLD",8673,"KRN","B",3.6,3.6)

"BLD",8673,"KRN","B",3.8,3.8)

"BLD",8673,"KRN","B",9.2,9.2)

"BLD",8673,"KRN","B",9.8,9.8)

"BLD",8673,"KRN","B",19,19)

"BLD",8673,"KRN","B",19.1,19.1)

"BLD",8673,"KRN","B",101,101)

"BLD",8673,"KRN","B",409.61,409.61)

"BLD",8673,"KRN","B",771,771)

"BLD",8673,"KRN","B",779.2,779.2)

"BLD",8673,"KRN","B",870,870)

"BLD",8673,"KRN","B",8989.51,8989.51)

"BLD",8673,"KRN","B",8989.52,8989.52)

"BLD",8673,"KRN","B",8994,8994)

"BLD",8673,"QUES",0)
^9.62^^
"BLD",8673,"REQB",0)
^9.611^^
"INIT")
VEFBRAP0
"MBREQ")
0
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
2
"RTN","VEFBRAP0")
0^1^B2265220
"RTN","VEFBRAP0",1,0)
VEFBRAP0 ;RAPTOR ; 10 JUNE 2015  8:53 AM
"RTN","VEFBRAP0",2,0)
 ;;1.1;Radiology;**1**;JUNE 10, 2015;Build 3
"RTN","VEFBRAP0",3,0)
 S TOPCLASS=$$GETCLASS("PROGRESS NOTES")
"RTN","VEFBRAP0",4,0)
 I +TOPCLASS<=0 W " <UNABLE TO FIND PROGRESS NOTES CLASS. EXITING...> " Q
"RTN","VEFBRAP0",5,0)
 S NEWDCIEN=$$CRTCLASS(TOPCLASS,"RAPTOR NOTES","RAPTOR NOTES")
"RTN","VEFBRAP0",6,0)
 I +NEWDCIEN<=0 W " <UNABLE TO FIND/CREATE RAPTOR NOTES CLASS. EXITING...> " Q
"RTN","VEFBRAP0",7,0)
 S SEQIEN=$$DCTOCL(TOPCLASS,NEWDCIEN,"Raptor Notes")
"RTN","VEFBRAP0",8,0)
 I +SEQIEN<=0 W " <UNABLE TO ADD RAPTOR NOTES DOCUMENT CLASS TO PROGRESS NOTES CLASS> " Q
"RTN","VEFBRAP0",9,0)
 S IENONE=$$NWNTTTL^VEFBRAP0("RAPTOR NOTE","RADIOLOGY NOTE")
"RTN","VEFBRAP0",10,0)
 I +IENONE<=0 W " <UNABLE TO CREATE RAPTOR NOTE TITLE> " Q
"RTN","VEFBRAP0",11,0)
 S IENTWO=$$NWNTTTL^VEFBRAP0("RAPTOR SAFETY CHECKLIST","RADIOLOGY NOTE")
"RTN","VEFBRAP0",12,0)
 I +IENTWO<=0 W " <UNABLE TO CREATE RAPTOR SAFETY CHECKLIST TITLE> " Q
"RTN","VEFBRAP0",13,0)
 S SUBIENONE=$$ADDTOCLS(NEWDCIEN,IENONE,"Raptor Note")
"RTN","VEFBRAP0",14,0)
 S SUBIENTWO=$$ADDTOCLS(NEWDCIEN,IENTWO,"Raptor Safety Checklist")
"RTN","VEFBRAP0",15,0)
 Q
"RTN","VEFBRAP0",16,0)
 ; Create a new local note title entry in 8925.1
"RTN","VEFBRAP0",17,0)
NWNTTTL(NOTETITL,STDTITL)
"RTN","VEFBRAP0",18,0)
 N ERR,FDA,IENS,USRCLASS,STATUS,STDNTTTL,VEFB
"RTN","VEFBRAP0",19,0)
 I '$D(NOTETITL) S VEFB("ERR")="MUST SUPPLY NOTE TITLE" Q VEFB("ERR")
"RTN","VEFBRAP0",20,0)
 I NOTETITL="" S VEFB("ERR")="MUST SUPPLY NOTE TITLE" Q VEFB("ERR")
"RTN","VEFBRAP0",21,0)
 I +$O(^TIU(8925.1,"B",NOTETITL,""))>0 Q $O(^TIU(8925.1,"B",NOTETITL,"")) ; NOTE TITLE ALREADY EXISTS
"RTN","VEFBRAP0",22,0)
 S USRCLASS=$O(^USR(8930,"B","CLINICAL COORDINATOR",""))
"RTN","VEFBRAP0",23,0)
 I +USRCLASS=0 S VEFB("ERR")="UNABLE TO FIND CLINICAL COORDINATOR USER CLASS" Q VEFB("ERR")
"RTN","VEFBRAP0",24,0)
 S STATUS=$O(^TIU(8925.6,"B","ACTIVE",""))
"RTN","VEFBRAP0",25,0)
 I +STATUS=0 S VEFB("ERR")="UNABLE TO FIND ACTIVE STATUS IEN" Q VEFB("ERR")
"RTN","VEFBRAP0",26,0)
 S STDNTTTL=$O(^TIU(8926.1,"B",STDTITL,""))
"RTN","VEFBRAP0",27,0)
 I +STDNTTTL=0 S VEFB("ERR")="UNABLE TO MAP STANDARD NOTE TITLE" Q VEFB("ERR")
"RTN","VEFBRAP0",28,0)
 S IENS="+1,"
"RTN","VEFBRAP0",29,0)
 S FDA(8925.1,IENS,.01)=NOTETITL 		; NAME
"RTN","VEFBRAP0",30,0)
 S FDA(8925.1,IENS,.03)=NOTETITL 		; PRINT NAME
"RTN","VEFBRAP0",31,0)
 S FDA(8925.1,IENS,.04)="DOC" 			; TYPE
"RTN","VEFBRAP0",32,0)
 S FDA(8925.1,IENS,.06)=USRCLASS 		; USER CLASS -> #8930
"RTN","VEFBRAP0",33,0)
 S FDA(8925.1,IENS,.07)=STATUS 			; STATUS -> #8925.6
"RTN","VEFBRAP0",34,0)
 S FDA(8925.1,IENS,3.03)=0				; SUPPRESS VISIT SELECTION
"RTN","VEFBRAP0",35,0)
 S FDA(8925.1,IENS,1501)=STDNTTTL		; VHA ENTERPRISE STANDARD TITLE -> #8926.1 ("RADIOLOGY NOTE" IEN)
"RTN","VEFBRAP0",36,0)
 S FDA(8925.1,IENS,1502)=$$NOW^XLFDT	; MAP ATTEMPTED
"RTN","VEFBRAP0",37,0)
 S FDA(8925.1,IENS,1503)=DUZ			; MAP ATTEMPTED BY -> #200
"RTN","VEFBRAP0",38,0)
 D UPDATE^DIE("","FDA","IENS","ERR")
"RTN","VEFBRAP0",39,0)
 Q +IENS(1)	; TODO: replace with new IEN
"RTN","VEFBRAP0",40,0)
ADDTOCLS(CLASSIEN,NEWNTIEN,MENUTEXT) ; ADD A NOTE TITLE W/ MENU TEXT TO A DOCUMENT CLASS
"RTN","VEFBRAP0",41,0)
 N IENS,ZERONODE,FDA,VEFB
"RTN","VEFBRAP0",42,0)
 S ZERONODE=$G(^TIU(8925.1,CLASSIEN,0))
"RTN","VEFBRAP0",43,0)
 I '$D(ZERONODE) S VEFB("ERR")="TIU CLASS IEN DOES NOT EXIST" Q VEFB("ERR")
"RTN","VEFBRAP0",44,0)
 I $P(ZERONODE,U,4)'="DC" S VEFB("ERR")="THAT IEN IS NOT A CLASS TYPE" Q VEFB("ERR")
"RTN","VEFBRAP0",45,0)
 I $D(^TIU(8925.1,CLASSIEN,10,"B",NEWNTIEN)) Q $O(^TIU(8925.1,CLASSIEN,10,"B",NEWNTIEN,"")) ; NOTE TITLE ALREADY IN CLASS
"RTN","VEFBRAP0",46,0)
 S ZERONODE=$G(^TIU(8925.1,NEWNTIEN,0))
"RTN","VEFBRAP0",47,0)
 I '$D(ZERONODE) S VEFB("ERR")="TIU NOTE IEN DOES NOT EXIST" Q VEFB("ERR")
"RTN","VEFBRAP0",48,0)
 I $P(ZERONODE,U,4)'="DOC" S VEFB("ERR")="THAT TIU TITLE IEN IS NOT A NOTE TITLE TYPE" Q VEFB("ERR")
"RTN","VEFBRAP0",49,0)
 S IENS="+1,"_CLASSIEN_","
"RTN","VEFBRAP0",50,0)
 S FDA(8925.14,IENS,.01)=NEWNTIEN 		; ITEM -> 8925.1
"RTN","VEFBRAP0",51,0)
 S FDA(8925.14,IENS,4)=MENUTEXT 		; MENU TEXT
"RTN","VEFBRAP0",52,0)
 D UPDATE^DIE("","FDA","IENS","ERR")
"RTN","VEFBRAP0",53,0)
 Q +IENS(1)	; TODO: replace with new IEN
"RTN","VEFBRAP0",54,0)
DCTOCL(PARENT,DCIEN,MENUTEXT) ; ADD A DOCUMENT CLASS TO A CLASS
"RTN","VEFBRAP0",55,0)
 N IENS,ZERONODE,FDA,SEQ,VEFB
"RTN","VEFBRAP0",56,0)
 S ZERONODE=$G(^TIU(8925.1,PARENT,0))
"RTN","VEFBRAP0",57,0)
 I '$D(ZERONODE) S VEFB("ERR")="TIU CLASS IEN DOES NOT EXIST" Q VEFB("ERR")
"RTN","VEFBRAP0",58,0)
 I $D(^TIU(8925.1,PARENT,10,"B",DCIEN)) Q $O(^TIU(8925.1,PARENT,10,"B",DCIEN,"")) ; DC ALREADY IN CLASS
"RTN","VEFBRAP0",59,0)
 I $P(ZERONODE,U,4)'="CL" Q "THAT TIU IEN IS NOT A CLASS TYPE"
"RTN","VEFBRAP0",60,0)
 S ZERONODE=$G(^TIU(8925.1,DCIEN,0))
"RTN","VEFBRAP0",61,0)
 I '$D(ZERONODE) S VEFB("ERR")="TIU DOCUMENT CLASS DOES NOT EXIST" Q VEFB("ERR")
"RTN","VEFBRAP0",62,0)
 I $P(ZERONODE,U,4)'="DC" S VEFB("ERR")="THAT IEN IS NOT A DOCUMENT CLASS TYPE" Q VEFB("ERR")
"RTN","VEFBRAP0",63,0)
 S SEQ=$O(^TIU(8925.1,PARENT,10,"AC","A"),-1)
"RTN","VEFBRAP0",64,0)
 S:(+SEQ=SEQ) SEQ=SEQ+1 ; increment sequence if AC cross reference exists - ok to leave as blank string otherwise
"RTN","VEFBRAP0",65,0)
 S IENS="+1,"_PARENT_","
"RTN","VEFBRAP0",66,0)
 S FDA(8925.14,IENS,.01)=DCIEN			; ITEM -> 8925.1
"RTN","VEFBRAP0",67,0)
 S FDA(8925.14,IENS,2)=SEQ				; SEQUENCE
"RTN","VEFBRAP0",68,0)
 S FDA(8925.14,IENS,3)=SEQ 				; MNEMONIC
"RTN","VEFBRAP0",69,0)
 S FDA(8925.14,IENS,4)=MENUTEXT 		; MENU TEXT
"RTN","VEFBRAP0",70,0)
 D UPDATE^DIE("","FDA","IENS","ERR")
"RTN","VEFBRAP0",71,0)
 Q +$G(IENS(1))	; TODO: replace with new IEN
"RTN","VEFBRAP0",72,0)
CRTCLASS(PARENT,CLSNM,ITMTXT)
"RTN","VEFBRAP0",73,0)
 N ERR,FDA,IENS,USRCLASS,STATUS,VEFB
"RTN","VEFBRAP0",74,0)
 I +$O(^TIU(8925.1,"B",CLSNM,""))>0 Q $O(^TIU(8925.1,"B",CLSNM,"")) ; CLASS ALREADY EXISTS - RETURN IEN
"RTN","VEFBRAP0",75,0)
 S USRCLASS=$O(^USR(8930,"B","CLINICAL COORDINATOR",""))
"RTN","VEFBRAP0",76,0)
 I +USRCLASS=0 S VEFB("ERR")="UNABLE TO FIND CLINICAL COORDINATOR USER CLASS" Q VEFB("ERR")
"RTN","VEFBRAP0",77,0)
 S STATUS=$O(^TIU(8925.6,"B","ACTIVE",""))
"RTN","VEFBRAP0",78,0)
 I +STATUS=0 S VEFB("ERR")="UNABLE TO FIND ACTIVE STATUS IEN" Q VEFB("ERR")
"RTN","VEFBRAP0",79,0)
 S IENS="+1,"
"RTN","VEFBRAP0",80,0)
 S FDA(8925.1,IENS,.01)=CLSNM	 		; NAME
"RTN","VEFBRAP0",81,0)
 S FDA(8925.1,IENS,.03)=CLSNM	 		; PRINT NAME
"RTN","VEFBRAP0",82,0)
 S FDA(8925.1,IENS,.04)="DC" 			; TYPE
"RTN","VEFBRAP0",83,0)
 S FDA(8925.1,IENS,.06)=USRCLASS 		; USER CLASS -> #8930
"RTN","VEFBRAP0",84,0)
 S FDA(8925.1,IENS,.07)=STATUS 			; STATUS -> #8925.6
"RTN","VEFBRAP0",85,0)
 D UPDATE^DIE("","FDA","IENS","ERR")
"RTN","VEFBRAP0",86,0)
 Q +$G(IENS(1))	; TODO: replace with new IEN
"RTN","VEFBRAP0",87,0)
GETCLASS(CLSNM)
"RTN","VEFBRAP0",88,0)
 N VEFB,IEN,ZERONODE
"RTN","VEFBRAP0",89,0)
 S IEN=$O(^TIU(8925.1,"B",CLSNM,""))
"RTN","VEFBRAP0",90,0)
 I +IEN=0 S VEFB("ERR")="DOCUMENT CLASS NAME NOT FOUND" Q VEFB("ERR")
"RTN","VEFBRAP0",91,0)
 S ZERONODE=$G(^TIU(8925.1,IEN,0))
"RTN","VEFBRAP0",92,0)
 I $P(ZERONODE,U,4)'="DC",$P(ZERONODE,U,4)'="CL" S VEFB("ERR")="THAT NAME IS NOT A CLASS TYPE" Q VEFB("ERR")
"RTN","VEFBRAP0",93,0)
 Q IEN
"RTN","VEFBRPC")
0^2^B3110
"RTN","VEFBRPC",1,0)
VEFBRPC ;RAPTOR ; 28 SEPTEMBER 2015  8:53 AM
"RTN","VEFBRPC",2,0)
 ;;1.1;Radiology;**1**;SEPTEMBER 28, 2015;Build 3
"RTN","VEFBRPC",3,0)
 Q
"RTN","VEFBRPC",4,0)
 ;
"RTN","VEFBRPC",5,0)
HELLOWORLD()
"RTN","VEFBRPC",6,0)
 Q "HELLO VEFB!"
"RTN","VEFBRPC",7,0)
GETJOB()
"RTN","VEFBRPC",8,0)
 Q $J
"RTN","VEFBRPC",9,0)
RPCEXECUTE(TMP,DT) ;
"RTN","VEFBRPC",10,0)
 ;
"RTN","VEFBRPC",11,0)
 ; Execute an RPC based on paramaters provided in TMP reference global
"RTN","VEFBRPC",12,0)
 ;
"RTN","VEFBRPC",13,0)
 ; Input parameter
"RTN","VEFBRPC",14,0)
 ; ================
"RTN","VEFBRPC",15,0)
 ;
"RTN","VEFBRPC",16,0)
 ; TMP is a reference to a global with nodes. e.g.,  ^TMP($J)
"RTN","VEFBRPC",17,0)
 ;
"RTN","VEFBRPC",18,0)
 ;   ,"name")      NAME (#8994, .01)
"RTN","VEFBRPC",19,0)
 ;   ,"version")   VERSION (#8994, .09)
"RTN","VEFBRPC",20,0)
 ;   ,"use") = L|R
"RTN","VEFBRPC",21,0)
 ;   ,"input",n,"type")   PARAMETER TYPE (#8994.02, #02)
"RTN","VEFBRPC",22,0)
 ;   ,"input",n,"value")  input parameter value
"RTN","VEFBRPC",23,0)
 ;      e.g.
"RTN","VEFBRPC",24,0)
 ;      ,"input",n,"type")="LITERAL"
"RTN","VEFBRPC",25,0)
 ;      ,"input",n,"value")="abc"
"RTN","VEFBRPC",26,0)
 ;
"RTN","VEFBRPC",27,0)
 ;      ,"input",n,"type")="REFERENCE"
"RTN","VEFBRPC",28,0)
 ;      ,"input",n,"value")="^ABC"
"RTN","VEFBRPC",29,0)
 ;
"RTN","VEFBRPC",30,0)
 ;      ,"input",n,"type")="LIST"
"RTN","VEFBRPC",31,0)
 ;      ,"input",n,"value",m1)="list1"
"RTN","VEFBRPC",32,0)
 ;      ,"input",n,"value",m2,k1)="list21"
"RTN","VEFBRPC",33,0)
 ;      ,"input",n,"value",m2,k2)="list22"
"RTN","VEFBRPC",34,0)
 ;         
"RTN","VEFBRPC",35,0)
 ;          where m1, m2, k1, k2 are numbers or strings
"RTN","VEFBRPC",36,0)
 ;     
"RTN","VEFBRPC",37,0)
 ; Output value
"RTN","VEFBRPC",38,0)
 ; ==============
"RTN","VEFBRPC",39,0)
 ; The RPC output is in  @TMP@("result")
"RTN","VEFBRPC",40,0)
 ;  e.g., ,"result","type")="SINGLE VALUE"
"RTN","VEFBRPC",41,0)
 ;                  "value")="Hello World!"
"RTN","VEFBRPC",42,0)
 ;                
"RTN","VEFBRPC",43,0)
 ; Return {"success": result, "message" : message }
"RTN","VEFBRPC",44,0)
 ;    result 1 - success
"RTN","VEFBRPC",45,0)
 ;           0 - error
"RTN","VEFBRPC",46,0)
 ;
"RTN","VEFBRPC",47,0)
 ;k (TMP,DT)
"RTN","VEFBRPC",48,0)
 N rpc,pRpc,tArgs,tCnt,tI,tOut,tResult,X
"RTN","VEFBRPC",49,0)
 N XWBAPVER,DUZ,DT
"RTN","VEFBRPC",50,0)
 ;
"RTN","VEFBRPC",51,0)
 S U=$G(U,"^")  ; set default to "^"
"RTN","VEFBRPC",52,0)
 ;
"RTN","VEFBRPC",53,0)
 S pRpc("name")=$G(@TMP@("name"))
"RTN","VEFBRPC",54,0)
 S:pRpc("name")["ORWDX SEND" ^TMP($J,"input",5,"value")=""
"RTN","VEFBRPC",55,0)
 Q:pRpc("name")="" $$error(-1,"RPC name is missing")
"RTN","VEFBRPC",56,0)
 ;
"RTN","VEFBRPC",57,0)
 S rpc("ien")=$O(^XWB(8994,"B",pRpc("name"),""))
"RTN","VEFBRPC",58,0)
 Q:'rpc("ien") $$error(-2,"Undefined RPC ["_pRpc("name")_"]")
"RTN","VEFBRPC",59,0)
 ;
"RTN","VEFBRPC",60,0)
 S XWBAPVER=$G(@TMP@("version"))
"RTN","VEFBRPC",61,0)
 S pRpc("use")=$G(@TMP@("use"))
"RTN","VEFBRPC",62,0)
 S pRpc("context")=$G(@TMP@("context"))
"RTN","VEFBRPC",63,0)
 S pRpc("duz")=$G(@TMP@("duz"))
"RTN","VEFBRPC",64,0)
 S pRpc("division")=$G(@TMP@("division"))
"RTN","VEFBRPC",65,0)
 ; Set DUZ
"RTN","VEFBRPC",66,0)
 S DUZ=pRpc("duz")
"RTN","VEFBRPC",67,0)
 S:'$D(DUZ(2)) DUZ(2)=pRpc("division")
"RTN","VEFBRPC",68,0)
 S:DUZ DUZ(0)=$P(^VA(200,DUZ,0),U,4)
"RTN","VEFBRPC",69,0)
 S DT=$G(@TMP@("dt"))
"RTN","VEFBRPC",70,0)
 ;
"RTN","VEFBRPC",71,0)
 S X=$G(^XWB(8994,rpc("ien"),0)) ;e.g., XWB EGCHO STRING^ECHO1^XWBZ1^1^R
"RTN","VEFBRPC",72,0)
 S rpc("routineTag")=$P(X,"^",2)
"RTN","VEFBRPC",73,0)
 S rpc("routineName")=$P(X,"^",3)
"RTN","VEFBRPC",74,0)
 Q:rpc("routineName") $$error(-4,"Undefined routine name for RPC ["_pRpc("name")_"]")
"RTN","VEFBRPC",75,0)
 ;
"RTN","VEFBRPC",76,0)
 ; 1=SINGLE VALUE; 2=ARRAY; 3=WORD PROCESSING; 4=GLOBAL ARRAY; 5=GLOBAL INSTANCE
"RTN","VEFBRPC",77,0)
 S rpc("resultType")=$P(X,"^",4)
"RTN","VEFBRPC",78,0)
 S rpc("resultWrapOn")=$P(X,"^",8)
"RTN","VEFBRPC",79,0)
 ;
"RTN","VEFBRPC",80,0)
 ; is the RPC available
"RTN","VEFBRPC",81,0)
 D CKRPC^XWBLIB(.tOut,pRpc("name"),pRpc("use"),XWBAPVER)
"RTN","VEFBRPC",82,0)
 Q:'tOut $$error(-3,"RPC ["_pRpc("name")_"] cannot be run at this time.")
"RTN","VEFBRPC",83,0)
 ;
"RTN","VEFBRPC",84,0)
 S X=$$CHKPRMIT(pRpc("name"),pRpc("duz"),pRpc("context"))
"RTN","VEFBRPC",85,0)
 Q:X'="" $$error(-4,"RPC ["_pRpc("name")_"] is not allowed to be run: "_X)
"RTN","VEFBRPC",86,0)
 ;
"RTN","VEFBRPC",87,0)
 S X=$$buildArguments(.tArgs,rpc("ien"),TMP)  ; build RPC arguments list - tArgs
"RTN","VEFBRPC",88,0)
 Q:X<0 $$error($P(X,U),$P(X,U,2)) ; error building arguments list
"RTN","VEFBRPC",89,0)
 ;
"RTN","VEFBRPC",90,0)
 ; now, prepare the arguments for the final call
"RTN","VEFBRPC",91,0)
 ; it is outside of the $$buildArgumets so we can newed the individual parameters
"RTN","VEFBRPC",92,0)
 S (tI,tCnt)=""
"RTN","VEFBRPC",93,0)
 F  S tI=$O(tArgs(tI)) Q:tI=""  F  S tCnt=$O(tArgs(tI,tCnt)) Q:tCnt=""  N @("tA"_tI) X tArgs(tI,tCnt)  ; set/merge actions
"RTN","VEFBRPC",94,0)
 ;
"RTN","VEFBRPC",95,0)
 S X="D "_rpc("routineTag")_"^"_rpc("routineName")_"(.tResult"_$S(tArgs="":"",1:","_tArgs)_")"
"RTN","VEFBRPC",96,0)
 S DIC(0)="" ; JAM 2014/9/5 - some obscure problem with LAYGO^XUA4A7
"RTN","VEFBRPC",97,0)
 X X  ; execute the routine
"RTN","VEFBRPC",98,0)
 M @TMP@("result","value")=tResult
"RTN","VEFBRPC",99,0)
 S @TMP@("result","type")=$$EXTERNAL^DILFD(8994,.04,,rpc("resultType"))
"RTN","VEFBRPC",100,0)
 S trash=$$success()
"RTN","VEFBRPC",101,0)
 Q "OK"
"RTN","VEFBRPC",102,0)
 ;
"RTN","VEFBRPC",103,0)
 ;
"RTN","VEFBRPC",104,0)
isInputRequired(pIEN,pSeqIEN) ; is input RPC parameter is required
"RTN","VEFBRPC",105,0)
 ; pIEN - RPC IEN in file #8994
"RTN","VEFBRPC",106,0)
 ; pSeqIEN - Input parameter IEN in multiple file #8994.02
"RTN","VEFBRPC",107,0)
 ;
"RTN","VEFBRPC",108,0)
 Q $P(^XWB(8994,pIEN,2,pSeqIEN,0),U,4)=1
"RTN","VEFBRPC",109,0)
 ;
"RTN","VEFBRPC",110,0)
buildArguments(out,pIEN,TMP) ;Build RPC argument list
"RTN","VEFBRPC",111,0)
 ;
"RTN","VEFBRPC",112,0)
 ; Return values
"RTN","VEFBRPC",113,0)
 ; =============
"RTN","VEFBRPC",114,0)
 ; Success 1
"RTN","VEFBRPC",115,0)
 ; Error   -n^error message
"RTN","VEFBRPC",116,0)
 ;
"RTN","VEFBRPC",117,0)
 ; out array with arguments
"RTN","VEFBRPC",118,0)
 N tCnt,tError,tIEN,tI,tII,tRequired,tParam,tIndexSeq,X
"RTN","VEFBRPC",119,0)
 ;
"RTN","VEFBRPC",120,0)
 S tI=0
"RTN","VEFBRPC",121,0)
 S tII=""
"RTN","VEFBRPC",122,0)
 S tCnt=0
"RTN","VEFBRPC",123,0)
 ;
"RTN","VEFBRPC",124,0)
 K out
"RTN","VEFBRPC",125,0)
 S out=""
"RTN","VEFBRPC",126,0)
 S tError=0
"RTN","VEFBRPC",127,0)
 S tIndexSeq=$D(^XWB(8994,pIEN,2,"PARAMSEQ"))  ; is the cross-reference defined
"RTN","VEFBRPC",128,0)
 S tParam=$S(tIndexSeq:"^XWB(8994,pIEN,2,""PARAMSEQ"")",1:"^XWB(8994,pIEN,2)")
"RTN","VEFBRPC",129,0)
 ;
"RTN","VEFBRPC",130,0)
 S count=0
"RTN","VEFBRPC",131,0)
 F  S tII=$O(@TMP@("input",tII)) Q:('tII)!(tError)  D
"RTN","VEFBRPC",132,0)
 . S count=count+1
"RTN","VEFBRPC",133,0)
 . S tIEN=tII  ; get the IEN of the input parameter
"RTN","VEFBRPC",134,0)
 . I '$D(@TMP@("input",tII,"value")) S out=out_"," Q
"RTN","VEFBRPC",135,0)
 . I $D(@TMP@("input",tII,"value"))=1 D  Q
"RTN","VEFBRPC",136,0)
 . . S out=out_"tA"_tII_","   ; add the argument
"RTN","VEFBRPC",137,0)
 . . I $$UP^XLFSTR($G(@TMP@("input",tII,"type")))="REFERENCE" D
"RTN","VEFBRPC",138,0)
 . . . S tCnt=tCnt+1,out(tII,tCnt)="S tA"_tII_"=@@TMP@(""input"","_tII_",""value"")"  ; set it
"RTN","VEFBRPC",139,0)
 . . . Q
"RTN","VEFBRPC",140,0)
 . . E  S tCnt=tCnt+1,out(tII,tCnt)="S tA"_tII_"=@TMP@(""input"","_tII_",""value"")"  ; set it as action for later
"RTN","VEFBRPC",141,0)
 . . Q
"RTN","VEFBRPC",142,0)
 . ; list/array
"RTN","VEFBRPC",143,0)
 . S out=out_".tA"_tII_","
"RTN","VEFBRPC",144,0)
 . S tCnt=tCnt+1,out(tII,tCnt)="M tA"_tII_"=@TMP@(""input"","_tII_",""value"")"  ; merge it
"RTN","VEFBRPC",145,0)
 . Q
"RTN","VEFBRPC",146,0)
 ;
"RTN","VEFBRPC",147,0)
 Q:tError tError
"RTN","VEFBRPC",148,0)
 S out=$E(out,1,$L(out)-1)
"RTN","VEFBRPC",149,0)
 Q 1
"RTN","VEFBRPC",150,0)
 ;
"RTN","VEFBRPC",151,0)
formatResult(code,message) ; return JSON formatted result
"RTN","VEFBRPC",152,0)
 S ^TMP($J,"RPCEXECUTE","result")=code_U_message
"RTN","VEFBRPC",153,0)
 Q "OK"
"RTN","VEFBRPC",154,0)
 ;Q "{""success"": "_code_", ""message"": """_$S($TR(message," ","")="":"",1:message)_"""}"
"RTN","VEFBRPC",155,0)
 ;
"RTN","VEFBRPC",156,0)
error(code,message) ;
"RTN","VEFBRPC",157,0)
 Q $$formatResult(0,code_" "_message)
"RTN","VEFBRPC",158,0)
 ;
"RTN","VEFBRPC",159,0)
success(code,message) ;
"RTN","VEFBRPC",160,0)
 Q $$formatResult(1,$G(code)_" "_$G(message))
"RTN","VEFBRPC",161,0)
 ;
"RTN","VEFBRPC",162,0)
 ; Is RPC pertmited to run in a context?
"RTN","VEFBRPC",163,0)
CHKPRMIT(pRPCName,pUser,pContext) ;checks to see if remote procedure is permited to run
"RTN","VEFBRPC",164,0)
 ;Input:  pRPCName - Remote procedure to check
"RTN","VEFBRPC",165,0)
 ;        pUser    - User
"RTN","VEFBRPC",166,0)
 ;        pContext - RPC Context
"RTN","VEFBRPC",167,0)
 Q:$$KCHK^XUSRB("XUPROGMODE",pUser) ""  ; User has programmer key
"RTN","VEFBRPC",168,0)
 N result,X
"RTN","VEFBRPC",169,0)
 N XQMES
"RTN","VEFBRPC",170,0)
 S U=$G(U,"^")
"RTN","VEFBRPC",171,0)
 S result="" ;Return XWBSEC="" if OK to run RPC
"RTN","VEFBRPC",172,0)
 ;
"RTN","VEFBRPC",173,0)
 ;In the beginning, when no DUZ is defined and no context exist,
"RTN","VEFBRPC",174,0)
 ;setup default signon context
"RTN","VEFBRPC",175,0)
 S:'$G(pUser) pUser=0,pContext="XUS SIGNON"   ;set up default context
"RTN","VEFBRPC",176,0)
 ;
"RTN","VEFBRPC",177,0)
 ;These RPC's are allowed in any context, so we can just quit
"RTN","VEFBRPC",178,0)
 S X="^XWB IM HERE^XWB CREATE CONTEXT^XWB RPC LIST^XWB IS RPC AVAILABLE^XUS GET USER INFO^XUS GET TOKEN^XUS SET VISITOR^"
"RTN","VEFBRPC",179,0)
 S X=X_"XUS KAAJEE GET USER INFO^XUS KAAJEE LOGOUT^"  ; VistALink RPC's that are always allowed.
"RTN","VEFBRPC",180,0)
 I X[(U_pRPCName_U) Q result
"RTN","VEFBRPC",181,0)
 ;
"RTN","VEFBRPC",182,0)
 ;
"RTN","VEFBRPC",183,0)
 ;If in Signon context, only allow XUS and XWB rpc's
"RTN","VEFBRPC",184,0)
 I $G(pContext)="XUS SIGNON","^XUS^XWB^"'[(U_$E(pRPCName,1,3)_U) Q "Application context has not been created!"
"RTN","VEFBRPC",185,0)
 ;XQCS allows all users access to the XUS SIGNON context.
"RTN","VEFBRPC",186,0)
 ;Also to any context in the XUCOMMAND menu.
"RTN","VEFBRPC",187,0)
 ;
"RTN","VEFBRPC",188,0)
 I $G(pContext)="" Q "Application context has not been created!"
"RTN","VEFBRPC",189,0)
 ;
"RTN","VEFBRPC",190,0)
 S X=$$CHK^XQCS(pUser,pContext,pRPCName)         ;do the check
"RTN","VEFBRPC",191,0)
 S:'X result=X
"RTN","VEFBRPC",192,0)
 Q result
"RTN","VEFBRPC",193,0)
 ;
"RTN","VEFBRPC",194,0)
arrayToJSON(name)
"RTN","VEFBRPC",195,0)
 n subscripts
"RTN","VEFBRPC",196,0)
 i '$d(@name) QUIT "[]"
"RTN","VEFBRPC",197,0)
 QUIT $$walkArray("",name)
"RTN","VEFBRPC",198,0)
 ;
"RTN","VEFBRPC",199,0)
walkArray(json,name,subscripts)
"RTN","VEFBRPC",200,0)
 ;
"RTN","VEFBRPC",201,0)
 n allNumeric,arrComma,brace,comma,count,cr,dd,i,no,numsub,dblquot,quot
"RTN","VEFBRPC",202,0)
 n ref,sub,subNo,subscripts1,type,valquot,value,xref,zobj
"RTN","VEFBRPC",203,0)
 ;
"RTN","VEFBRPC",204,0)
 s cr=$c(13,10),comma=","
"RTN","VEFBRPC",205,0)
 s (dblquot,valquot)=""""
"RTN","VEFBRPC",206,0)
 s dd=$d(@name)
"RTN","VEFBRPC",207,0)
 i dd=1!(dd=11) d  i dd=1 QUIT json
"RTN","VEFBRPC",208,0)
 . s value=@name
"RTN","VEFBRPC",209,0)
 . i value'[">" q
"RTN","VEFBRPC",210,0)
 . s json=$$walkArray(json,value,.subscripts)
"RTN","VEFBRPC",211,0)
 s ref=name_"("
"RTN","VEFBRPC",212,0)
 s no=$o(subscripts(""),-1)
"RTN","VEFBRPC",213,0)
 i no>0 f i=1:1:no d
"RTN","VEFBRPC",214,0)
 . s quot=""""
"RTN","VEFBRPC",215,0)
 . i subscripts(i)?."-"1N.N s quot=""
"RTN","VEFBRPC",216,0)
 . s ref=ref_quot_subscripts(i)_quot_","
"RTN","VEFBRPC",217,0)
 s ref=ref_"sub)"
"RTN","VEFBRPC",218,0)
 s sub="",numsub=0,subNo=0,count=0
"RTN","VEFBRPC",219,0)
 s allNumeric=1
"RTN","VEFBRPC",220,0)
 f  s sub=$o(@ref) q:sub=""  d  q:'allNumeric
"RTN","VEFBRPC",221,0)
 . i sub'?1N.N s allNumeric=0
"RTN","VEFBRPC",222,0)
 . s count=count+1
"RTN","VEFBRPC",223,0)
 . i sub'=count s allNumeric=0
"RTN","VEFBRPC",224,0)
 ;i allNumeric,count=1 s allNumeric=0
"RTN","VEFBRPC",225,0)
 i allNumeric d
"RTN","VEFBRPC",226,0)
 . s json=json_"["
"RTN","VEFBRPC",227,0)
 e  d
"RTN","VEFBRPC",228,0)
 . s json=json_"{"
"RTN","VEFBRPC",229,0)
 s sub=""
"RTN","VEFBRPC",230,0)
 f  s sub=$o(@ref) q:sub=""  d
"RTN","VEFBRPC",231,0)
 . s subscripts(no+1)=sub
"RTN","VEFBRPC",232,0)
 . s subNo=subNo+1
"RTN","VEFBRPC",233,0)
 . s dd=$d(@ref)
"RTN","VEFBRPC",234,0)
 . i dd=1 d
"RTN","VEFBRPC",235,0)
 . . s value=@ref
"RTN","VEFBRPC",236,0)
 . . i 'allNumeric d
"RTN","VEFBRPC",237,0)
 . . . s json=json_""""_sub_""":"
"RTN","VEFBRPC",238,0)
 . . s type="literal"
"RTN","VEFBRPC",239,0)
 . . i $$numeric(value) s type="numeric"
"RTN","VEFBRPC",240,0)
 . . ;i value?1N.N s type="numeric"
"RTN","VEFBRPC",241,0)
 . . ;i value?1"-"1N.N s type="numeric"
"RTN","VEFBRPC",242,0)
 . . ;i value?1N.N1"."1N.N s type="numeric"
"RTN","VEFBRPC",243,0)
 . . ;i value?1"-"1N.N1"."1N.N s type="numeric"
"RTN","VEFBRPC",244,0)
 . . i value="true"!(value="false") s type="boolean"
"RTN","VEFBRPC",245,0)
 . . i $e(value,1)="{",$e(value,$l(value))="}" s type="variable"
"RTN","VEFBRPC",246,0)
 . . i $e(value,1,4)="<?= ",$e(value,$l(value)-2,$l(value))=" ?>" d
"RTN","VEFBRPC",247,0)
 . . . s type="variable"
"RTN","VEFBRPC",248,0)
 . . . s value=$e(value,5,$l(value)-3)
"RTN","VEFBRPC",249,0)
 . . i type="literal" s value=valquot_value_valquot
"RTN","VEFBRPC",250,0)
 . . d
"RTN","VEFBRPC",251,0)
 . . . s json=json_value_","
"RTN","VEFBRPC",252,0)
 . k subscripts1
"RTN","VEFBRPC",253,0)
 . m subscripts1=subscripts
"RTN","VEFBRPC",254,0)
 . i dd>9 d
"RTN","VEFBRPC",255,0)
 . . i sub?1N.N,allNumeric d
"RTN","VEFBRPC",256,0)
 . . . i subNo=1 d
"RTN","VEFBRPC",257,0)
 . . . . s numsub=1
"RTN","VEFBRPC",258,0)
 . . . . s json=$e(json,1,$l(json)-1)
"RTN","VEFBRPC",259,0)
 . . . . s json=json_"["
"RTN","VEFBRPC",260,0)
 . . e  d
"RTN","VEFBRPC",261,0)
 . . . s json=json_""""_sub_""":"
"RTN","VEFBRPC",262,0)
 . . s json=$$walkArray(json,name,.subscripts1)
"RTN","VEFBRPC",263,0)
 . . d
"RTN","VEFBRPC",264,0)
 . . . s json=json_","
"RTN","VEFBRPC",265,0)
 ;
"RTN","VEFBRPC",266,0)
 s json=$e(json,1,$l(json)-1)
"RTN","VEFBRPC",267,0)
 i allNumeric d
"RTN","VEFBRPC",268,0)
 . s json=json_"]"
"RTN","VEFBRPC",269,0)
 e  d
"RTN","VEFBRPC",270,0)
 . s json=json_"}"
"RTN","VEFBRPC",271,0)
 QUIT json ; exit!
"RTN","VEFBRPC",272,0)
 ;
"RTN","VEFBRPC",273,0)
numeric(value)
"RTN","VEFBRPC",274,0)
 i $e(value,1,9)="function(" QUIT 1
"RTN","VEFBRPC",275,0)
 i value?1"0."1N.N QUIT 1
"RTN","VEFBRPC",276,0)
 i $e(value,1)=0,$l(value)>1 QUIT 0
"RTN","VEFBRPC",277,0)
 i $e(value,1,2)="-0",$l(value)>2,$e(value,1,3)'="-0." QUIT 0
"RTN","VEFBRPC",278,0)
 i value?1N.N QUIT 1
"RTN","VEFBRPC",279,0)
 i value?1"-"1N.N QUIT 1
"RTN","VEFBRPC",280,0)
 i value?1N.N1"."1N.N QUIT 1
"RTN","VEFBRPC",281,0)
 i value?1"-"1N.N1"."1N.N QUIT 1
"RTN","VEFBRPC",282,0)
 i value?1"."1N.N QUIT 1
"RTN","VEFBRPC",283,0)
 i value?1"-."1N.N QUIT 1
"RTN","VEFBRPC",284,0)
 QUIT 0
"RTN","VEFBRPC",285,0)
 ;
"RTN","VEFBRPC",286,0)
login(accessCode,verifyCode)
"RTN","VEFBRPC",287,0)
 ;
"RTN","VEFBRPC",288,0)
 ;d trace("login: ac="_accessCode_"; vc="_verifyCode)
"RTN","VEFBRPC",289,0)
 k (accessCode,verifyCode)
"RTN","VEFBRPC",290,0)
 n %,accver,DILOCKTM,displayPersonName,DISYS,%DT,DT,DTIME,DUZ,%H
"RTN","VEFBRPC",291,0)
 n checkRes,%I,I,IO,IOF,IOM,ION,IOS,IOSL,IOST,IOT,J,ok,personDuz,personName
"RTN","VEFBRPC",292,0)
 n POP,results,supervisor,termReason,U,user,V4WVCC,V4WCVMSG
"RTN","VEFBRPC",293,0)
 n X,XOPT,XPARSYS,XQVOL,XQXFLG,XUCI,XUDEV,XUENV,XUEOFF,XUEON
"RTN","VEFBRPC",294,0)
 n XUF,XUFAC,XUIOP,XUVOL,XWBSTATE,XWBTIME,Y
"RTN","VEFBRPC",295,0)
 ;
"RTN","VEFBRPC",296,0)
 s accessCode=$g(accessCode) i accessCode="" q "Missing Access Code"
"RTN","VEFBRPC",297,0)
 s verifyCode=$g(verifyCode) i verifyCode="" q "Missing Verify Code"
"RTN","VEFBRPC",298,0)
 ;
"RTN","VEFBRPC",299,0)
 k results
"RTN","VEFBRPC",300,0)
 s U="^" d NOW^%DTC s DT=X
"RTN","VEFBRPC",301,0)
 s (IO,IO(0),IOF,IOM,ION,IOS,IOSL,IOST,IOT)="",POP=0
"RTN","VEFBRPC",302,0)
 s accver=accessCode_";"_verifyCode
"RTN","VEFBRPC",303,0)
 s accver=$$ENCRYP^XUSRB1(accver)
"RTN","VEFBRPC",304,0)
 d SETUP^XUSRB()
"RTN","VEFBRPC",305,0)
 d VALIDAV^XUSRB(.user,accver)
"RTN","VEFBRPC",306,0)
 s personDuz=user(0)
"RTN","VEFBRPC",307,0)
 ;
"RTN","VEFBRPC",308,0)
 ;KBAZ/ZAG - add logic to check if verify code needs to be changed.
"RTN","VEFBRPC",309,0)
 ;0 = VC does not need to be changed
"RTN","VEFBRPC",310,0)
 ;1 = VC needs to be changed
"RTN","VEFBRPC",311,0)
 s V4WVCC=$g(user(2))
"RTN","VEFBRPC",312,0)
 s V4WCVMSG=$g(user(3)) ;sign in message
"RTN","VEFBRPC",313,0)
 ;
"RTN","VEFBRPC",314,0)
 s termReason=""
"RTN","VEFBRPC",315,0)
 i 'personDuz,$G(DUZ) s termReason=": "_$$GET1^DIQ(200,DUZ_",",9.4) ;Termination reason
"RTN","VEFBRPC",316,0)
 i 'personDuz QUIT user(3)_termReason
"RTN","VEFBRPC",317,0)
 ;
"RTN","VEFBRPC",318,0)
 s personName=$p(^VA(200,personDuz,0),"^")
"RTN","VEFBRPC",319,0)
 s displayPersonName=$p(personName,",",2)_" "_$p(personName,",")
"RTN","VEFBRPC",320,0)
 s results("DT")=DT
"RTN","VEFBRPC",321,0)
 s results("DUZ")=personDuz
"RTN","VEFBRPC",322,0)
 s results("username")=personName
"RTN","VEFBRPC",323,0)
 s results("displayName")=displayPersonName
"RTN","VEFBRPC",324,0)
 s results("greeting")=$g(user(7))
"RTN","VEFBRPC",325,0)
 k ^CacheTempEWD($j)
"RTN","VEFBRPC",326,0)
 m ^CacheTempEWD($j)=results
"RTN","VEFBRPC",327,0)
 ;k ^rob("login") m ^rob("login")=results
"RTN","VEFBRPC",328,0)
 QUIT ""
"VER")
8.0^22.0
**END**
**END**
