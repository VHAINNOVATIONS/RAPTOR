var vista = require('VistALib');

// REST & Web Service error response formatter function
// Updated 20150820a

var operations = {
  initiate: {
    GET: function(ewd) {
      return vista.initiate('raptor', ewd);
    }
  },
  login: {
    GET: function(ewd, session) {
      return vista.login(ewd, session);
    }
  },

  getWorklistDetailsMap: {
    GET: function(ewd, session) {
	  var ok = ewd.util.restoreSymbolTable(ewd, session);	//Flush symbol table and replace with ours
	  var params = {
		max: ewd.query.max,
		from: ewd.query.from // joel 8-11-15 -> added for pagination
      };
	  // joel - 8/29/15 adding to enable filtering per PHP code 
      params.filterDiscontinued = false;
	  if (ewd.query.hasOwnProperty("filterDiscontinued") && ewd.query["filterDiscontinued"] != "") {
		if (ewd.query["filterDiscontinued"].toUpperCase() == "TRUE") {
			params.filterDiscontinued = true;
		}
	  }
	  
	  var results = vista.getWorklist(params, session, ewd);
	  ok = ewd.util.saveSymbolTable(ewd, session);	//Grab our symbol table for use next time
      return results;
    }
  },
  
  getDashboardDetailsMap: {
	  GET: function(ewd, session) {
		  var params = {
			file: '75.1', // joel changed from 100 -> 75.1
			iens: [ewd.query.ien]
		  };
		  var radiologyOrder = vista.ddrGetsEntry(params, ewd);
		  
		//  if (!radiologyOrder.hasOwnProperty("7")) {
		//	  return { "radiologyOrder" : radiologyOrder, "order" : {} };
		//  }
		  
		  var correspondingOrderFileIen = radiologyOrder["7"]["I"];
		  params = {
			file: '100',
			iens: [correspondingOrderFileIen]
		  };
		  var orderFileRec = vista.ddrGetsEntry(params, ewd);
		  return { "radiologyOrder" : radiologyOrder, "order" : orderFileRec };
	  }
  },
    
	gvv: {
		GET: function(ewd, session) {
			return vista.getVariableValue(ewd.query.arg, session, ewd);
		}
	},
	// not finished yet! 8/25
	cancelRadiologyOrder: {
            GET: function(ewd, session) {
                var params = {
					patientId: ewd.query.patientId,
					orderIen: ewd.query.orderIen,
					duz: ewd.query.duz,
					locationIen: ewd.query.locationIen,
					reasonIen: ewd.query.reasonIen,
					esig: ewd.query.esig
				};
				return vista.discontinueRadiologyOrder(params, session, ewd);
            }
    },
    createNewRadiologyOrder: {
            GET: function(ewd, session) {
                    return {todo:123};
            }
    },
    createUnsignedRadiologyOrder: {
            GET: function(ewd, session) {
                    return {todo:123};
            }
    },
    getAllergiesDetailMap: {
            GET: function(ewd, session) {
                var params = {
					patientId: ewd.query.patientId
				};
				return vista.getAllergies(params, session, ewd);
            }
    },
	// per call to RPC, returns 44 results beginning alphabetically at 'target'
    getHospitalLocationsMap: {
            GET: function(ewd, session) {
                var params = {
					target: ewd.query.target,
					direction: ewd.query.direction
				};
				return vista.getHospitalLocations(params, session, ewd);
            }
    },
    getChemHemLabs: {
            GET: function(ewd, session) {
                var params = {
					patientId: ewd.query.patientId,
					fromDate: ewd.query.fromDate,
					toDate: ewd.query.toDate
				};
				return vista.getChemHemReports(params, session, ewd);
            }
    },
	// looks like a wrapper around getChemHemReports data - don't think this is a call for the web service
    getDiagnosticLabsDetailMap: {
            GET: function(ewd, session) {
                    return {todo:123};
            }
    },
	// looks like a wrapper around getChemHemReports data - don't think this is a call for the web service
    getEGFRDetailMap: {
            GET: function(ewd, session) {
                    return {todo:123};
            }
    },
	// is this a call for the logged in user ID? if so, returned from login
    getEHRUserID: {
            GET: function(ewd, session) {
                    return {todo:123};
            }
    },
	
	// this is a utility function - doesn't belong on service API
    getEncounterStringFromVisit: {
            GET: function(ewd, session) {
                    return {todo:123};
            }
    },
    getImagingTypesMap: {
            GET: function(ewd, session) {
                return vista.getImagingOrderTypes({}, session, ewd);
            }
    },
	// does this belong on web service?
    getImplementationInstance: {
            GET: function(ewd, session) {
                    return {todo:123};
            }
    },
	// does this belong on web service?
    getIntegrationInfo: {
            GET: function(ewd, session) {
                    return {todo:123};
            }
    },
	
    getMedicationsDetailMap: {
            GET: function(ewd, session) {
                return vista.getAllMeds({patientId: ewd.query.patientId}, session, ewd);
            }
    },
    getNotesDetailMap: {
            GET: function(ewd, session) {
                var params = {
					patientId: ewd.query.patientId,
					fromDate: "0",
					toDate: "0"
				};
				return vista.getNotesWithText(params, session, ewd);
            }
    },
    getOrderableItems: {
            GET: function(ewd, session) {
                return vista.getOrderableItems({ dialogId: ewd.query.dialogId }, session, ewd);
            }
    },
	// don't see this in the scoreboard, any PHP functions or MDWS EmrSvc facade...
    getOrderDetails: {
            GET: function(ewd, session) {
                    return {todo:123};
            }
    },
	// per ProtocolSupportingData.php, this appears to be a utility function that grabs selected fields from the current worklist item
    getOrderOverviewMap: {
            GET: function(ewd, session) {
                    return {todo:123};
            }
    },
	// needs tested! couldn't find any patients with data in dev
    getPathologyReportsDetailMap: {
            GET: function(ewd, session) {
				var params = {
					patientId: ewd.query.patientId,
					fromDate: ewd.query.fromDate,
					toDate: ewd.query.toDate,
					nRpts: ewd.query.nRpts
				};
				return vista.getSurgicalPathologyReports(params, session, ewd);
            }
    },
	
	// per ProtocolSupportingData.php, this appears to be a utility function that grabs data from session info
    getPatientDashboardMap: {
            GET: function(ewd, session) {
                    return {todo:123};
            }
    },
    getPatientIDFromTrackingID: {
            GET: function(ewd, session) {
				var params = { ien: ewd.query.ien };
				return vista.getPatientIDFromTrackingID(params, session, ewd);
            }
    },
	
	getPatientMap: {
			GET: function(ewd, session) {
				return vista.getPatient({ patientId: ewd.query.patientId }, session, ewd);
			}
	},
	
	// per ProtocolSupportingData.php, this appears to be a utility function that grabs data from worklist
    getPendingOrdersMap: {
            GET: function(ewd, session) {
                    return {todo:123};
            }
    },
    getProblemsListDetailMap: {
            GET: function(ewd, session) {
                    //return {todo:123};
                 var params = {
                    patientId: ewd.query.patientId,
					type: ewd.query.type || ""
                 };
                 return vista.getProblemList(params, session, ewd);
            }
    },
    getProcedureLabsDetailMap: {
            GET: function(ewd, session) {
                    return {todo:123};
            }
    },
    getProviders: {
            GET: function(ewd, session) {
                return vista.cprsUserLookup({ target: ewd.query.target }, session, ewd);
            }
    },
    getRadiologyCancellationReasons: {
            GET: function(ewd, session) {
                return vista.getRadiologyOrderCancellationReasons({}, session, ewd);
            }
    },
    getRadiologyOrderChecks: {
            GET: function(ewd, session) {
                    return {todo:123};
            }
    },
    getRadiologyOrderDialog: {
            GET: function(ewd, session) {
                var params = {
					patientId: ewd.query.patientId,
					dialogId: ewd.query.dialogId
				};
				return vista.getRadiologyOrderDialog(params, session, ewd);
            }
    },
    getRadiologyReportsDetailMap: {
            GET: function(ewd, session) {
				var params = {
					patientId: ewd.query.patientId,
					fromDate: ewd.query.fromDate,
					toDate: ewd.query.toDate,
					nRpts: ewd.query.nRpts
				};
				return vista.getRadiologyReports(params, session, ewd);
            }
    },
    getRawVitalSignsMap: {
            GET: function(ewd, session) {
                 var params = {
                    patientId: ewd.query.patientId
                 };
                 return vista.getVitalSigns(params, session, ewd);
            }
    },
    getSurgeryReportsDetailMap: {
            GET: function(ewd, session) {
                return vista.getSurgeryReportsWithText({ patientId: ewd.query.patientId }, session, ewd);
            }
    },
    getUserSecurityKeys: {
            GET: function(ewd, session) {
                return vista.getUserSecurityKeys({ uid: ewd.query.uid }, session, ewd);
            }
    },
    getVisits: {
            GET: function(ewd, session) {
				var params = {
					patientId: ewd.query.patientId,
					fromDate: ewd.query.fromDate,
					toDate: ewd.query.toDate
				};
				return vista.getVisits(params, session, ewd);
            }
    },
    getVistaAccountKeyProblems: {
            GET: function(ewd, session) {
                    return {todo:123};
            }
    },
    getVitalsDetailMap: {
            GET: function(ewd, session) {
                    return {todo:123};
            }
    },
    getVitalsDetailOnlyLatestMap: {
            GET: function(ewd, session) {
                    return {todo:123};
            }
    },
    getVitalsSummaryMap: {
            GET: function(ewd, session) {
                    return {todo:123};
            }
    },
	// call getUserSecurityKeys and check against results. should cache keys client side if checking multiple keys
    isProvider: {
            GET: function(ewd, session) {
                    return {todo:123};
            }
    },
    signNote: {
            GET: function(ewd, session) {
                var params = {
					noteIen: ewd.query.noteIen,
					eSig: ewd.query.eSig
				};
				return vista.signNote(params, session, ewd);
            }
    },
	// call getUserSecurity keys and check against results. should cache keys client side if checking multiple keys
    userHasKeyOREMAS: {
            GET: function(ewd, session) {
                    return {todo:123};
            }
    },
    validateEsig: {
            GET: function(ewd, session) {
                return vista.isValidESig({ eSig: ewd.query.eSig }, session, ewd);
            }
    },
	// call getNoteTitles and verify from results. should keep note titles client side if checking multiple note titles against IENs
    verifyNoteTitleMapping: {
            GET: function(ewd, session) {
                    return {todo:123};
            }
    },
    writeRaptorGeneralNote: {
            GET: function(ewd, session) {
                    return {todo:123};
            }
    },
    writeRaptorSafetyChecklist: {
            GET: function(ewd, session) {
                    return {todo:123};
            }
    },
	// there are several places that need this function - they were all just wrapping this in the PHP/MDWS implementation
	getNoteTitles: {
		GET: function(ewd, session) {
			return vista.getNoteTitles({ target: ewd.query.target }, session, ewd);
		}
	},

  devtest: {
	  GET: function(ewd, session) {
		  var nvp=ewd.query.a;
		  var vmore=ewd.query.more;
		  return {a:nvp,more:vmore};
	  }
  }
  
};

module.exports = {

  parse: function(ewd) {
    var resource = ewd.query.rest_path.split('/')[1];
    var session;
    if (resource === 'devtest') {
	  //No authentication
      var method = ewd.query.rest_method;
      return operations[resource][method](ewd, session);
	} 
    if (resource !== 'initiate') {
      var status = vista.authenticate(ewd);
      if (status.error) {
        return status;
      }
      if (resource !== 'login') {
        var loggedInStatus = vista.loginStatus(status.session);
        if (loggedInStatus.error) {
          return loggedInStatus;
        }
      }
      session = status.session;
    }
    var method = ewd.query.rest_method;
    if (operations[resource] && operations[resource][method]) {
      return operations[resource][method](ewd, session);
    }
    else {
      return vista.errorResponse('Invalid Request', 401);
    }
  }

};
