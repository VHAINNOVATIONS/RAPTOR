module.exports = {
	getOrderableItems: function(params, session, ewd) {
		params.rpcName = "ORWDRA32 RAORDITM";
		params.rpcArgs = [
			{type: "LITERAL", value: ""},
			{type: "LITERAL", value: "1"},
			{type: "LITERAL", value: params.dialogId},
		];
		var response = vistaLib.runRpc(params, session, ewd);
				
		return response;
	},
	
	discontinueRadiologyOrder: function(params, session, ewd) {
		return this.getOrder(params, session, ewd);
	
		if (!vistaLib.isValidESig(params, session, ewd)) {
			return { ok: false, error: "Invalid electronic signature code" };
		}
		
		params.key = "PROVIDER"; // hardcoded key name ok for this check
		if (!userLib.userHasKey(params, session, ewd)) {
			return { ok: false, error: "Inusfficient permissions to cancel order. User is not a provider" };
		}
	},
	
	getOrder: function(params, session, ewd) {
		params.rpcName = "ORWORR GETBYIFN";
		params.rpcArgs = [{type: "LITERAL", value: params.orderIen}];
		var response = vistaLib.runRpc(params, session, ewd);
		return this.toOrder(response, session, ewd);
	},
	
	toOrder: function(response, session, ewd) {
		var result = {};
		if (!response.hasOwnProperty("value") || !response.value.hasOwnProperty("1")) {
			return result;
		}
		
		var line1Pieces = response.value["1"].split("^");

		result.id = line1Pieces[0].substr(1);
		result.timestamp = line1Pieces[2];
		result.startDate = line1Pieces[3];
		result.stopDate = line1Pieces[4];
		result.statusCode = line1Pieces[5];
		var orderStatusDict = this.getOrderStatuses(session, ewd);
		result.status = orderStatusDict.hasOwnProperty(result.statusCode) ? orderStatusDict[result.statusCode].name : "";
		// TODO - fetch result.status for result.statusCode
		result.sigStatus = line1Pieces[6];
		result.verifyingNurse = line1Pieces[7];
		result.verifyingClerk = line1Pieces[8];
		result.provider = { uid: line1Pieces[9], name: line1Pieces[10] }; // changed MDWS PersonName to use name string straight from Vista
		result.flag = (line1Pieces[12] == "1");
		result.chartReviewer = line1Pieces[14];
		
		var locationPieces = line1Pieces[18].split(":");
		result.location = { id: locationPieces[1], name: locationPieces[0] };
		
		result.text = "";
		for (var i = 2; response.value.hasOwnProperty(i.toString()); i++) {
			result.text += (response.value[i.toString()].substr(1) + "\r\n");
		}
		
		return result;
	},
	
	getOrderStatuses: function(session, ewd) {
		var ddrResponse = vistaLib.ddrLister3({ FILE: "100.01" }, session, ewd);
		var result = {};
		for (var i = 0; i < ddrResponse.data.length; i++) {
			var pieces = ddrResponse.data[i].split("^");
			result[pieces[0]] = { ien: pieces[0], name: pieces[1] };		
		}
		return result;
	}
	
};

var vistaLib = require('VistALib');
var userLib = require('vistaUserLib');