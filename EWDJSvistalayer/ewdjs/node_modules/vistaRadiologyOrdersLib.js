module.exports = {
	getOrderableItems: function(params, session, ewd) {
		params.rpcName = "ORWDRA32 RAORDITM";
		params.rpcArgs = [
			{type: "LITERAL", value: ""},
			{type: "LITERAL", value: "1"},
			{type: "LITERAL", value: params.dialogId},
		];
		var response = vistaLib.runRpc(params, session, ewd);
				
		return response;
	},
	
	discontinueRadiologyOrder: function(params, session, ewd) {
		return this.getOrder(params, session, ewd);
	
		if (!vistaLib.isValidESig(params, session, ewd)) {
			return { ok: false, error: "Invalid electronic signature code" };
		}
		
		params.key = "PROVIDER"; // hardcoded key name ok for this check
		if (!userLib.userHasKey(params, session, ewd)) {
			return { ok: false, error: "Inusfficient permissions to cancel order. User is not a provider" };
		}
	},
	
	getOrder: function(params, session, ewd) {
		params.rpcName = "ORWORR GETBYIFN";
		params.rpcArgs = [{type: "LITERAL", value: params.orderIen}];
		var response = vistaLib.runRpc(params, session, ewd);
		var orderStatusDict = this.getOrderStatuses(session, ewd);
		return this.toOrder(response, orderStatusDict);
	},
	
	toOrder: function(response, orderStatusDict) {
		var result = {};
		if (!response.hasOwnProperty("value") || !response.value.hasOwnProperty("1")) {
			return result;
		}
		
		var line1Pieces = response.value["1"].split("^");

		result.id = line1Pieces[0].substr(1);
		result.timestamp = line1Pieces[2];
		result.startDate = line1Pieces[3];
		result.stopDate = line1Pieces[4];
		result.statusCode = line1Pieces[5];
		result.status = orderStatusDict.hasOwnProperty(result.statusCode) ? orderStatusDict[result.statusCode].name : "";
		// TODO - fetch result.status for result.statusCode
		result.sigStatus = line1Pieces[6];
		result.verifyingNurse = line1Pieces[7];
		result.verifyingClerk = line1Pieces[8];
		result.provider = { uid: line1Pieces[9], name: line1Pieces[10] }; // changed MDWS PersonName to use name string straight from Vista
		result.flag = (line1Pieces[12] == "1");
		result.chartReviewer = line1Pieces[14];
		
		var locationPieces = line1Pieces[18].split(":");
		result.location = { id: locationPieces[1], name: locationPieces[0] };
		
		result.text = "";
		for (var i = 2; response.value.hasOwnProperty(i.toString()); i++) {
			result.text += (response.value[i.toString()].substr(1) + "\r\n");
		}
		
		return result;
	},
	
	getOrderStatuses: function(session, ewd) {
		var ddrResponse = vistaLib.ddrLister3({ FILE: "100.01" }, session, ewd);
		var result = {};
		for (var i = 0; i < ddrResponse.data.length; i++) {
			var pieces = ddrResponse.data[i].split("^");
			result[pieces[0]] = { ien: pieces[0], name: pieces[1] };		
		}
		return result;
	},
	
	getContractAndSharingAgreements: function(session, ewd) {
		var ddrParams = {
			FILE: "34",
			FIELDS: ".01;2;3"
		};
		var ddrResult = vistaLib.ddrLister3(ddrParams, session, ewd);
		return this.toContractAndSharingAgreements(ddrResult);
	},
	
	toContractAndSharingAgreements: function(ddrResult) {
		var result = { "C": [], "S": [], "R": [] };

		for (var i = 0; i < ddrResult.data.length; i++) {
			var pieces = ddrResult.data[i].split("^");
			if (pieces[3] != "") {
				continue; // INACTIVE date (field #3) is set - skip record
			}
			
			var type = pieces[2];
			if (type != "C" && type != "S" && type != "R") {
				continue;
			}
			
			result[type].push({ key: pieces[0], value: pieces[1] });
			//return result[type];
		}
		
		return result;
	},
	
	getRadiologyOrderDialog: function(params, session, ewd) {
		var agreements = this.getContractAndSharingAgreements(session, ewd);
		params.rpcName = "ORWDRA32 DEF";
		params.rpcArgs = [];
		params.rpcArgs.push({type: "LITERAL", value: params.patientId});
		params.rpcArgs.push({type: "LITERAL", value: ""});
		params.rpcArgs.push({type: "LITERAL", value: params.dialogId});
		var response = vistaLib.runRpc(params, session, ewd);
		
		return this.toRadiologyOrderDialog(response, agreements);
	},
	
	/*
"dialogData": {
    "type": "ARRAY",
    "value": {
      "1": "~ShortList",
      "2": "~Common Procedures",
    "i2772^CT ABDOMEN W&W/O CONT^^y",
    "i2771^CT ABDOMEN W/CONT^^n",
    "i2770^CT ABDOMEN W/O CONT^^n",
    "i2689^CT CERVICAL SPINE W/CONT^^",
    "i2688^CT CERVICAL SPINE W/O CONT^^n",
      "3": "~Modifiers",
      "4": "~Urgencies",
      "5": "i2^ASAP",
      "6": "i9^ROUTINE",
      "7": "i1^STAT",
      "8": "d9^ROUTINE",
      "9": "~Transport",
      "10": "iA^AMBULATORY",
      "11": "iP^PORTABLE",
      "12": "iS^STRETCHER",
      "13": "iW^WHEELCHAIR",
      "14": "~Category",
      "15": "iI^INPATIENT",
      "16": "iO^OUTPATIENT",
      "17": "iE^EMPLOYEE",
      "18": "iC^CONTRACT",
      "19": "iS^SHARING",
      "20": "iR^RESEARCH",
      "21": "~Submit to",
      "22": "~Ask Submit",
      "23": "d1^YES",
      "24": "~Last 7 Days"
    }	*/
	toRadiologyOrderDialog: function(response, agreements) {
		//return { dialogData: response, agreementData: agreements };
		//return {ok:true};
		// first make object easier to use - copy to object by section name
		var chunksByName = {};
		var currentSectionName = "";
		for (var i =1; response.value.hasOwnProperty(i.toString()); i++) {
			var currentLine = response.value[i.toString()];
			
			if (currentLine == "") {
				continue;
			}
			
			if (currentLine.substr(0, 1) == "~") {
				currentSectionName = (currentLine.substr(1)).replace(/ /g, "_"); // global replacement of all spaces with underscore
				chunksByName[currentSectionName] = [];
				continue;
			}
			
			chunksByName[currentSectionName].push(currentLine);
		}
		
		//return chunksByName;
		
		var dialog = { commonProcedures: [], last7DaysExams: [], modifiers: {}, urgencies: {}, transports: {}, categories: {}, submitTo: {}};
		
		for (var i = 0; i < chunksByName["Common_Procedures"].length; i++) {
			var pieces = chunksByName["Common_Procedures"][i].split("^");
			dialog.commonProcedures.push({ id: pieces[0].substr(1), name: pieces[1], requiresApproval: pieces[3] });
		}
		
		for (var i = 0; i < chunksByName["Last_7_Days"].length; i++) {
			throw new NotImplementedException("NOT YET IMPLEMENTED BUT VERY IMPORTANT... NOT ABLE TO FIND ANY PATIENTS WITH RECENT IMAGING EXAMS IN DEV");
		}
		
		dialog.contractOptions = agreements["C"];
		dialog.sharingOptions = agreements["S"];
		dialog.researchOptions = agreements["R"];
		
		return dialog;
	}
	
};

function NotImplementedException(message) {
	this.message = "message";
	this.name = "NotImplementedException";
};

var vistaLib = require('VistALib');
var userLib = require('vistaUserLib');