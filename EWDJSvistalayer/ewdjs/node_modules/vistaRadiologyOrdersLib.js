module.exports = {
	getOrderableItems: function(params, session, ewd) {
		params.rpcName = "ORWDRA32 RAORDITM";
		params.rpcArgs = [
			{type: "LITERAL", value: ""},
			{type: "LITERAL", value: "1"},
			{type: "LITERAL", value: params.dialogId},
		];
		var response = vistaLib.runRpc(params, session, ewd);
				
		return response;
	},
	
	checkDcAndSignParams: function(params) {
		if (!params.hasOwnProperty("orderIen") || params.orderIen == "") {
			return { ok: false, error: "No order ID" };
		}
		if (!params.hasOwnProperty("providerDuz") || params.providerDuz == "") {
			return { ok: false, error: "No user ID" };
		}
		if (!params.hasOwnProperty("locationIen") || params.locationIen == "") {
			return { ok: false, error: "No location ID" };
		}
		if (!params.hasOwnProperty("reasonIen") || params.reasonIen == "") {
			return { ok: false, error: "No reason ID" };
		}
		if (!params.hasOwnProperty("eSig") || params.eSig == "") {
			return { ok: false, error: "No electronic signature code" };
		}
		
		return { ok: true };
	},

	checkDcParams: function(params) {
		if (!params.hasOwnProperty("orderIen") || params.orderIen == "") {
			return { ok: false, error: "No order ID" };
		}
		if (!params.hasOwnProperty("providerDuz") || params.providerDuz == "") {
			return { ok: false, error: "No user ID" };
		}
		if (!params.hasOwnProperty("locationIen") || params.locationIen == "") {
			return { ok: false, error: "No location ID" };
		}
		if (!params.hasOwnProperty("reasonIen") || params.reasonIen == "") {
			return { ok: false, error: "No reason ID" };
		}
		
		return { ok: true };
	},


	discontinueRadiologyOrder: function(params, session, ewd) {
		var okCheck = this.checkDcParams(params);
		if (okCheck.hasOwnProperty("error") && okCheck.error) {
			return { ok: false, error: okCheck.error };
		}
				
		params.key = "PROVIDER"; // hardcoded key name ok for this check
		var providerHasProvider = userLib.userHasKey(params, session, ewd);
		if (!providerHasProvider) { // params.providerDuz of the user who is cancelling the order (not necessarily the current user)
			return { ok: false, error: "The account with the DUZ specified does not hold the PROVIDER key" };
		}
		
		var theOrder = this.getOrder(params, session, ewd);
		
		if (!result.hasOwnProperty("id")) {
			return { ok: false, error: "No such order" };
		}
		
		if (theOrder.status == "DISCONTINUED") {
			return { ok: false, error: "Order is already discontinued" };
		}
				
		var msg = this.validateOrderActionNature(params, session, ewd);
		if (msg != "") {
			return { ok: false, error: msg };
		}
		
		msg = this.getComplexOrderMsg(params, session, ewd);
		if (msg != "") {
			return { ok: false, error: msg };
		}

		if (!this.lockOrdersForPatient(params, session, ewd)) {
			return { ok: false, error: "Unable to lock orders for patient" };
		}
		
		msg = this.lockOrder(params, session, ewd);
		if (msg != "OK") {
			this.unlockOrdersForPatient(params, session, ewd);
			return { ok: false, error: msg };
		}
		
		var canceledOrder = this.cancelOrder(params, session, ewd);
		params.orderId = canceledOrder.id;
		
		this.unlockOrder(params, session, ewd);
		this.unlockOrdersForPatient(params, session, ewd);
		
		return canceledOrder;
	},
	
	discontinueAndSignRadiologyOrder: function(params, session, ewd) {
		var okCheck = this.checkDcAndSignParams(params);
		if (okCheck.hasOwnProperty("error") && okCheck.error) {
			return { ok: false, error: okCheck.error };
		}
		
		if (!vistaLib.isValidESig(params, session, ewd)) {
			return { ok: false, error: "Invalid signature code" };
		}
		
		params.key = "PROVIDER"; // hardcoded key name ok for this check
		var providerHasProvider = userLib.userHasKey(params, session, ewd);
		if (!providerHasProvider) { // params.providerDuz of the user who is cancelling the order (not necessarily the current user)
			return { ok: false, error: "The account with the DUZ specified does not hold the PROVIDER key" };
		}
		
		var theOrder = this.getOrder(params, session, ewd);
		
		if (!result.hasOwnProperty("id")) {
			return { ok: false, error: "No such order" };
		}
		
		if (theOrder.status == "DISCONTINUED") {
			return { ok: false, error: "Order is already discontinued" };
		}
		
		// if user ID equals provider DUZ, use key check above otherwise fetch user key for check
		var userHasProvider = (params.userId == params.providerDuz) ? providerHasProvider : userLib.userHasKey(params, session, ewd); // params.userId
		params.key = "OREMAS";
		var userHasOremas = userLib.userHasKey(params, session, ewd);
		var usingWrittenOnChart = false;
		var okToDcAndSign = false;
		var okToCancelOrderFromAnotherProvider = false; // MDWS pulls this override from config - setting false by default
		
		var originalOrderProvider = theOrder.provider.uid;
		
		if (params.userId == originalOrderProvider) {
			okToDcAndSign = true;
		}
		
		if (!okToDcAndSign) {
			if (userHasProvider && !(params.userId == originalOrderProvider)) {
				okToDcAndSign = true;
			} else {
				return { ok: false, error: "Providers may not sign discontinue order request for another provider's order. Use discontinue order without signature"};
			}
		}
		
		if (!okToDcAndSign) {
			if (!userHasOremas && !userHasProvider) {
				return { ok: false, error: "User does not have appropriate keys for cancel and sign" };
			}
		}
		
		if (!okToDcAndSign) {
			if (userHasOremas && !userHasProvider) {
				okToDcAndSign = usingWrittenOnChart = true;
			}
		}
		
		var msg = this.validateOrderActionNature(params, session, ewd);
		if (msg != "") {
			return { ok: false, error: msg };
		}
		
		msg = this.getComplexOrderMsg(params, session, ewd);
		if (msg != "") {
			return { ok: false, error: msg };
		}

		if (!this.lockOrdersForPatient(params, session, ewd)) {
			return { ok: false, error: "Unable to lock orders for patient" };
		}
		
		msg = this.lockOrder(params, session, ewd);
		if (msg != "OK") {
			this.unlockOrdersForPatient(params, session, ewd);
			return { ok: false, error: msg };
		}
		
		var canceledOrder = this.cancelOrder(params, session, ewd);
		params.orderId = canceledOrder.id;
		this.signOrder(params, session, ewd);
		
		this.unlockOrder(params, session, ewd);
		this.unlockOrdersForPatient(params, session, ewd);
		
		return canceledOrder;
	},
	
	validateOrderActionNature: function(params, session, ewd) {
		params.rpcName = "ORWDXA VALID";
		params.rpcArgs = [];
		params.rpcArgs = [{ type: "LITERAL", value: params.orderIen }];
		params.rpcArgs = [{ type: "LITERAL", value: params.orderAction }]; // ES or RS
		params.rpcArgs = [{ type: "LITERAL", value: params.orderProviderDuz }];
		params.rpcArgs = [{ type: "LITERAL", value: params.orderNature }]; // E or W
		
		var response = vistaLib.runRpc(params, session, ewd);
		if (response.value && response.value != "") {
			return response.value;
		}
		return "OK";
	},
	
	getComplexOrderMsg: function(params, session, ewd) {
		params.rpcName = "ORWDXA OFCPLX";
		params.rpcArgs = [];
		params.rpcArgs = [{ type: "LITERAL", value: params.orderIen }];
		var response = vistaLib.runRpc(params, session, ewd);
		return response;	
	},

	// TEST!!
	lockOrder: function(params, session, ewd) {
		params.rpcName = "ORWDX LOCK ORDER";
		params.rpcArgs = [{ type: "LITERAL", value: params.orderIen }];
		var result = vistaLib.runRpc(params, session, ewd);
		return result.value == "1"; // TBD - do something with result - this helper should probably just return a bool
	},
	
	// TEST!!
	lockOrdersForPatient: function(params, session, ewd) {
		params.rpcName = "ORWDX LOCK";
		params.rpcArgs = [{ type: "LITERAL", value: params.patientId }];
		var result = vistaLib.runRpc(params, session, ewd);
		return result.value == "1"; // TBD - do something with result - this helper should probably just return a bool
	},
	
	// TEST!!
	unlockOrder: function(params, session, ewd) {
		params.rpcName = "ORWDX UNLOCK ORDER";
		params.rpcArgs = [{ type: "LITERAL", value: params.orderIen }];
		var result = vistaLib.runRpc(params, session, ewd);
		return result.value == "1"; // TBD - do something with result - this helper should probably just return a bool
	},
	
	// TEST!
	unlockOrdersForPatient: function(params, session, ewd) {
		params.rpcName = "ORWDX UNLOCK";
		params.rpcArgs = [{ type: "LITERAL", value: params.patientId }];
		var result = vistaLib.runRpc(params, session, ewd);
		return result.value == "1"; // TBD - do something with result - this helper should probably just return a bool
	},
	
	signOrder: function(params, session, ewd) {
		params.rpcName = "ORWDX SEND";
		params.rpcArgs = [];
		params.rpcArgs.push({ type: "LITERAL", value: params.patientId });
		params.rpcArgs.push({ type: "LITERAL", value: params.providerDuz });
		params.rpcArgs.push({ type: "LITERAL", value: params.locationIen });
		params.rpcArgs.push({ type: "LITERAL", value: vistaLib.encryptRpcParameter(params.eSig) });
		
		var signOnChart = params.signedOnChart; // TODO - determine this programmatically and pass it in!!!!!!!!!!
		var signOnChartFlag = (signOnChart ? "0" : "1");
		var natureOfOrder = (signOnChart ? "W" : "E");
		var arg = { "1": (params.orderIen + "^" + signOnChartFlag + "^1^" + natureOfOrder) }; // e.g. 21354;1^0^1^E
		params.rpcArgs.push({ type: "LIST", value: arg });
		
		var result = vistaLib.runRpc(params, session, ewd);
		return result;
	},

	cancelOrder: function(params, session, ewd) {
		params.rpcName = "ORWDXA DC";
		params.rpcArgs = [];
		params.rpcArgs.push({ type: "LITERAL", value: params.orderId });
		params.rpcArgs.push({ type: "LITERAL", value: params.providerDuz });
		params.rpcArgs.push({ type: "LITERAL", value: params.clinicIen });
		params.rpcArgs.push({ type: "LITERAL", value: params.reasonIen });
		params.rpcArgs.push({ type: "LITERAL", value: "0" });
		params.rpcArgs.push({ type: "LITERAL", value: "0" });
		
		return vistaLib.runRpc(params, session, ewd);
	},
	
	toCancelOrder: function(response) {
		if (!response.hasOwnProperty("value") || !response.value.hasOwnProperty("1") || !response.value["1"].indexOf("~")) {
			throw Error("Unable to cancel order: " + JSON.stringify(response));
		}
		
		var result = {};
		
		var line1Pieces = response.value["1"].split("^");
		result.id = line1Pieces[0].substr(1); // get ride of tilde
		// NOTE: we're not doing anything else with the rest of this parsed cancelled order... ignoring for now!!
		
		return result;
	},
	
	getOrder: function(params, session, ewd) {
		params.rpcName = "ORWORR GETBYIFN";
		params.rpcArgs = [{type: "LITERAL", value: params.orderIen}];
		var response = vistaLib.runRpc(params, session, ewd);
		var orderStatusDict = this.getOrderStatuses(session, ewd);
		return this.toOrder(response, orderStatusDict);
	},
	
	toOrder: function(response, orderStatusDict) {
		var result = {};
		if (!response.hasOwnProperty("value") || !response.value.hasOwnProperty("1")) {
			return result;
		}
		
		var line1Pieces = response.value["1"].split("^");

		result.id = line1Pieces[0].substr(1);
		result.timestamp = line1Pieces[2];
		result.startDate = line1Pieces[3];
		result.stopDate = line1Pieces[4];
		result.statusCode = line1Pieces[5];
		result.status = orderStatusDict.hasOwnProperty(result.statusCode) ? orderStatusDict[result.statusCode].name : "";
		// TODO - fetch result.status for result.statusCode
		result.sigStatus = line1Pieces[6];
		result.verifyingNurse = line1Pieces[7];
		result.verifyingClerk = line1Pieces[8];
		result.provider = { uid: line1Pieces[9], name: line1Pieces[10] }; // changed MDWS PersonName to use name string straight from Vista
		result.flag = (line1Pieces[12] == "1");
		result.chartReviewer = line1Pieces[14];
		
		var locationPieces = line1Pieces[18].split(":");
		result.location = { id: locationPieces[1], name: locationPieces[0] };
		
		result.text = "";
		for (var i = 2; response.value.hasOwnProperty(i.toString()); i++) {
			result.text += (response.value[i.toString()].substr(1) + "\r\n");
		}
		
		return result;
	},
	
	getOrderStatuses: function(session, ewd) {
		var ddrResponse = vistaLib.ddrLister3({ FILE: "100.01" }, session, ewd);
		var result = {};
		for (var i = 0; i < ddrResponse.data.length; i++) {
			var pieces = ddrResponse.data[i].split("^");
			result[pieces[0]] = { ien: pieces[0], name: pieces[1] };		
		}
		return result;
	},
	
	getContractAndSharingAgreements: function(session, ewd) {
		var ddrParams = {
			FILE: "34",
			FIELDS: ".01;2;3"
		};
		var ddrResult = vistaLib.ddrLister3(ddrParams, session, ewd);
		return this.toContractAndSharingAgreements(ddrResult);
	},
	
	toContractAndSharingAgreements: function(ddrResult) {
		var result = { "C": [], "S": [], "R": [] };

		for (var i = 0; i < ddrResult.data.length; i++) {
			var pieces = ddrResult.data[i].split("^");
			if (pieces[3] != "") {
				continue; // INACTIVE date (field #3) is set - skip record
			}
			
			var type = pieces[2];
			if (type != "C" && type != "S" && type != "R") {
				continue;
			}
			
			result[type].push({ key: pieces[0], value: pieces[1] });
			//return result[type];
		}
		
		return result;
	},
	
	getRadiologyOrderDialog: function(params, session, ewd) {
		var agreements = this.getContractAndSharingAgreements(session, ewd);
		params.rpcName = "ORWDRA32 DEF";
		params.rpcArgs = [];
		params.rpcArgs.push({type: "LITERAL", value: params.patientId});
		params.rpcArgs.push({type: "LITERAL", value: ""});
		params.rpcArgs.push({type: "LITERAL", value: params.dialogId});
		var response = vistaLib.runRpc(params, session, ewd);
		
		return this.toRadiologyOrderDialog(response, agreements);
	},
	
	toRadiologyOrderDialog: function(response, agreements) {
		// first make object easier to use - copy to object by section name
		var chunksByName = {};
		var currentSectionName = "";
		for (var i =1; response.value.hasOwnProperty(i.toString()); i++) {
			var currentLine = response.value[i.toString()];
			
			if (currentLine == "") {
				continue;
			}
			
			if (currentLine.substr(0, 1) == "~") {
				currentSectionName = (currentLine.substr(1)).replace(/ /g, "_"); // global replacement of all spaces with underscore
				chunksByName[currentSectionName] = [];
				continue;
			}
			
			chunksByName[currentSectionName].push(currentLine);
		}
				
		var dialog = { commonProcedures: [], last7DaysExams: [], modifiers: {}, urgencies: {}, transports: {}, categories: {}, submitTo: {}};
		
		for (var i = 0; i < chunksByName["Common_Procedures"].length; i++) {
			var pieces = chunksByName["Common_Procedures"][i].split("^");
			dialog.commonProcedures.push({ id: pieces[0].substr(1), name: pieces[1], requiresApproval: pieces[3] });
		}
		
		for (var i = 0; i < chunksByName["Last_7_Days"].length; i++) {
			throw new NotImplementedException("Last 7 Days Exams Parsing: NOT YET IMPLEMENTED BUT VERY IMPORTANT... NOT ABLE TO FIND ANY PATIENTS WITH RECENT IMAGING EXAMS IN DEV");
		}
		
		for (var i = 0; i < chunksByName["Modifiers"].length; i++) {
			var pieces = chunksByName["Modifiers"][i].split("^");
			dialog.modifiers[pieces[0].substr(1)] = pieces[1]; // dictionary - property name is key, property value is val
		}
		
		for (var i = 0; i < chunksByName["Urgencies"].length; i++) {
			var pieces = chunksByName["Urgencies"][i].split("^");
			dialog.urgencies[pieces[0].substr(1)] = pieces[1]; // dictionary - property name is key, property value is val
		}
		
		for (var i = 0; i < chunksByName["Transport"].length; i++) {
			var pieces = chunksByName["Transport"][i].split("^");
			dialog.transports[pieces[0].substr(1)] = pieces[1]; // dictionary - property name is key, property value is val
		}
		
		for (var i = 0; i < chunksByName["Category"].length; i++) {
			var pieces = chunksByName["Category"][i].split("^");
			dialog.categories[pieces[0].substr(1)] = pieces[1]; // dictionary - property name is key, property value is val
		}
		
		for (var i = 0; i < chunksByName["Submit_to"].length; i++) {
			var pieces = chunksByName["Submit_to"][i].split("^");
			dialog.submitTo[pieces[0].substr(1)] = pieces[1]; // dictionary - property name is key, property value is val
		}
		
		dialog.contractOptions = agreements["C"];
		dialog.sharingOptions = agreements["S"];
		dialog.researchOptions = agreements["R"];
		
		return dialog;
	},
	
	getRadiologyOrderChecksForAcceptOrderRequest: function(params, session, ewd) {
		params.rpcName = "ORWDXC ACCEPT";
		params.rpcArgs = [];
		
		params.rpcArgs.push({type: "LITERAL", value: params.patientId});
		params.rpcArgs.push({type: "LITERAL", value: "RA"});
		params.rpcArgs.push({type: "LITERAL", value: params.orderStartDateTime}); // params.orderStartDateTime
		params.rpcArgs.push({type: "LITERAL", value: params.locationId});
		params.rpcArgs.push({type: "LIST", value: { "1":params.orderableItem } });
		
		var response = vistaLib.runRpc(params, session, ewd);
		
		return this.toOrderChecks(response);
	},

	toOrderChecks: function(response) {
		if (!response.hasOwnProperty("value")) {
			throw Error("Unexpected order check response: " + JSON.stringify(response));
		}
		
		var result = [];
		for (var i = 1; response.value.hasOwnProperty(i.toString()); i++) {
			var pieces = response.value[i.toString()].split("^");
			if (pieces && pieces.length > 3) {
				var name = pieces[3];
				if (pieces.length > 4) {
					for (var j = 4; j < pieces.length; j++) {
						name += ("^" + pieces[j]);
					}
				}
				var id = pieces[1];
				var level = pieces[2];
				
				result.push({ id: id, level: level, name: name });
			}
		}
		
		return result;
	},
	
	getRadiologyOrderDialogDefinition: function(params, session, ewd) {
		params.rpcName = "ORWDX DLGDEF";
		params.rpcArgs = [{ type: "LITERAL", value: "RA OERR EXAM" }];
		
		var response = vistaLib.runRpc(params, session, ewd);
		return this.toRadiologyOrderDialogDefinition(response);
	},
	
	toRadiologyOrderDialogDefinition: function(response) {
		var result = {};
		
		for (var i = 1; response.value.hasOwnProperty(i.toString()); i++) {
			var pieces = response.value[i.toString()].split("^");
			result[pieces[0]] = pieces[1]; // "key" is name, "value" is id
		}
		return result;
	},
	
	saveNewRadiologyOrder: function(params, session, ewd) {
		params.rpcName = "ORWDX SAVE";
		params.rpcArgs = [];
		params.rpcArgs.push({type: "LITERAL", value: params.patientId});
		params.rpcArgs.push({type: "LITERAL", value: params.providerDuz});
		params.rpcArgs.push({type: "LITERAL", value: params.locationId});
		params.rpcArgs.push({type: "LITERAL", value: "RA OERR EXAM"});
		params.rpcArgs.push({type: "LITERAL", value: params.dialogId});
		params.rpcArgs.push({type: "LITERAL", value: "1"});
		params.rpcArgs.push({type: "LITERAL", value: ""});
		
		var dialogDef = params.orderDialogDefinition; // fetch this before and pass in as params property
		
		var list = { };
		list[(dialogDef.ORDERABLE + ",1")] = params.orderableItemIen;
		list[(dialogDef.START + ",1")] = params.startDateTime; // Sep 10,2015@13:30
		list[(dialogDef.URGENCY + ",1")] = params.urgencyCode; 
		list[(dialogDef.MODE + ",1")] = params.modeCode; 
		list[(dialogDef.CLASS + ",1")] = params.classCode; 
		list[(dialogDef.IMLOC + ",1")] = params.submitTo; 
		list[(dialogDef.PREGNANT + ",1")] = params.pregant ? "1" : "0"; 
		list[(dialogDef.YN + ",1")] = params.isolation ? "1" : "0"; 
		list[(dialogDef.PREOP + ",1")] = params.preOpDateTime; 
		list[(dialogDef.REASON + ",1")] = params.reasonForStudy; 
		
		if (params.clinicHx && params.clinicHx != "") {
			var lines = params.clinicHx.split("|");
			list[(dialogDef.COMMENT + ",1")] = "ORDIALOG(\"WP\"," + dialogDef.COMMENT + ",1)"; 
		}
		params.rpcArgs.push({ type: "LIST", value: list });
		
		return params;
	}
	
};

function NotImplementedException(message) {
	this.message = "message";
	this.name = "NotImplementedException";
};

var vistaLib = require('VistALib');
var userLib = require('vistaUserLib');