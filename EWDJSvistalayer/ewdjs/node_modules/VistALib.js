/*

VistALib: Generic EWD.js Utility Functions for VistA REST Access

*/

// Crypto functions

var crypto = require('crypto');

var encryptCredentials = function(accessCode, verifyCode, key) {
  var text = 'accessCode:' + accessCode + ';verifyCode:' + verifyCode;
  return text;
  /*  REAL CODE
  var cipher = crypto.createCipher('aes-256-cbc',key);
  //var iv = new Buffer(crypto.randomBytes(16));
  //var iv = new Buffer('raptorraptor2015','utf-8');	//16 chars todo randomize
  //var cipher = crypto.createCipheriv('aes-256-cbc',key,iv);
  var crypted = cipher.update(text,'utf8','hex');
  crypted += cipher.final('hex');
  return crypted;
  */
};

var decryptCredentials = function(encryptedString, key) {

  var dec;
  try {
    dec = encryptedString; //decipher.update(encryptedString,'hex','utf8')
    var str = dec.split('accessCode:')[1];
    var pieces = str.split(';verifyCode:');
    return {
      accessCode: pieces[0],
      verifyCode: pieces[1]
    };
  }
  catch(err) {
    return errorResponse('Invalid FAKE credentials', 400);
  }
	
  /*	REAL CODE
  var decipher = crypto.createDecipher('aes-256-cbc', key);
  //var iv = new Buffer('raptorraptor2015','utf-8');	//16 chars todo randomize
  //var decipher = crypto.createDecipheriv('aes-256-cbc',key,iv);
  var dec;
  try {
    dec = decipher.update(encryptedString,'hex','utf8')
    dec += decipher.final('utf8');
    var str = dec.split('accessCode=')[1];
    var pieces = str.split('&verifyCode=');
    return {
      accessCode: pieces[0],
      verifyCode: pieces[1]
    };
  }
  catch(err) {
    return errorResponse('Invalid credentials', 400);
  }
  */
};

// ==========================


var errorResponse = function(error, statusCode) {
  return {
    "error": {
      "text": error,
      "statusCode": statusCode
    }
  }; 
};

var getGlobalNodeFromRef = function(globalRef, ewd) {
  // returns a GlobalNode instance from the TMP pointer returned by VistA RPCs
  var gloRef = globalRef.substr(1);
  var pieces = gloRef.split('(');
  var globalName = pieces[0];
  var subs = gloRef.substr(globalName.length);
  subs = '[' + subs.substr(1);
  subs = subs.slice(0,-1) + ']';
  var subscripts = JSON.parse(subs);
  return new ewd.mumps.GlobalNode(globalName, subscripts);
};

var getJSONFromVPR = function(tmpNode, ewd) {

  var isSubNode = function(signature, currentArray) {
    var match = true;
    for (var i = 0; i < signature.length; i++) {
      if (signature[i].toString() !== currentArray[i].toString()) {
        match = false;
        break;
      }
    }
    return match;
  };

  var node = {
    global: tmpNode._globalName,
    subscripts: tmpNode._subscripts
  };

  var string = '';
  var ok = true;
  do {
    node = ewd.db.next_node(node);
    if (node.defined !== 0) {
      if (isSubNode(subscripts, node.subscripts)) {
        string = string + node.data;
      }
      else {
        ok = false;
      }
    }
    else {
      ok = false;
    }
  } while (ok);
  
  tmpNode._delete();
  
  var results = JSON.parse(string);
  return results;
};

var VistALogin = function(accessCode, verifyCode, ewd) {
  var ok = ewd.mumps.function('login^ZZCPCR00', accessCode, verifyCode);
  if (ok === '') {
    var temp = new ewd.mumps.GlobalNode('CacheTempEWD', [process.pid]);
    var results = temp._getDocument(0, false);
    temp._delete();
    if (results.username) {
      return {
        error: false,
        data: results
      };
    }
    else {
      return {
        error: 'Login failure due to cache.node bug - try again', 
        pid: process.pid
      };
    }
  }
  else{
    return {error: ok};
  }
};

module.exports = {

  errorResponse: errorResponse,

  // calling this global function from another file doesn't seem to work... trying this as a fix...
  getGlobalNodeFromRef: function(globalRef, ewd) {
	return getGlobalNodeFromRef(globalRef, ewd);
  },
  
  killSymbolTable: function(params, session, ewd) {
	if (params.password != "password") {
		return { error: "wrong password!" };
	}
	
	return { result: ewd.mumps.function("KST^RPCWRP", params.password) };
  },
  
  authenticate: function(ewd) {
    var statusCode = 401;
    token = ewd.query['rest_auth'];
    if (!token) {
      // no token supplied
      return errorResponse('Failed authentication (1)', statusCode);
    }
    else if (token === '') {
      // token supplied was empty string
      return errorResponse('Failed authentication (2)', statusCode);
    }
    else {
      var session = ewd.util.getSession(token);
      if (session === '') {
        // token wasn't recognised or session timed out
        return errorResponse('Failed authentication (3)', statusCode);
      }
      else {
        ewd.util.updateSessionExpiry({
          sessid: session.$('ewd_sessid')._value
        });
        return {
          ok: true,
          session: session
        }
      }
    }
  },

  loginStatus: function(session) {
    var statusCode=401;
    if (session.$('VistA').$('DUZ')._value === '') return errorResponse('Failed authentication (4)', statusCode);
    if (session.$('cipherKey')._value !== '') return errorResponse('Failed authentication (5)', statusCode);
    return {ok: true};
  },

  initiate: function(appName, ewd) {
    var session = ewd.util.createNewSession(appName, 1200);
	//return session;
    var token = session.$('ewd_token')._value;
    var key = ewd.util.createToken();
    session.$('cipherKey')._value = key;
    return {
      Authorization: token,
      key: key
    };
  },

  login: function(ewd, session) {
    var sessid = session.$('ewd_sessid')._value;
    var errorStatusCode = 400;
    var key = session.$('cipherKey')._value;
    if (key === '') {
      ewd.util.deleteSession(sessid);
      return errorResponse('No key available', errorStatusCode);
    }
    var credentials = decryptCredentials(ewd.query.credentials, key);
    //console.log('credentials: ' + JSON.stringify(credentials));
    if (credentials.error) {
      ewd.util.deleteSession(sessid);
      return errorResponse(credentials.error, errorStatusCode);
    }
    if (!credentials.accessCode || credentials.accessCode === '') {
      ewd.util.deleteSession(sessid);
      return errorResponse('Missing Access Code', errorStatusCode);
    }
    if (!credentials.verifyCode || credentials.verifyCode === '') {
      ewd.util.deleteSession(sessid);
      return errorResponse('Missing Verify Code', errorStatusCode);
    }
    // ****************************
    var results = VistALogin(credentials.accessCode, credentials.verifyCode, ewd);
    // ****************************
    console.log('results: ' + JSON.stringify(results));
    if (results.error) {
      ewd.util.deleteSession(sessid);
      return errorResponse(results.error, errorStatusCode);
    }
    else {
      // logged in
      session.$('cipherKey')._delete();
      session.$('VistA')._setDocument(results.data);
      var ok = ewd.util.saveSymbolTable(ewd, session);
      return results.data;
    }
  },

  ddrLister: function(params, ewd) {
    var paramsObj = {
      FLAGS: 'PB',
      PART: '',
      XREF: '#'
    };
    for (var name in params) {
      paramsObj[name.toUpperCase()] = params[name];
    }
    var fields = '';
    var sc = '';
	var value;
	var fieldNames = ['IEN'];
	for (name in params.fields) {
		value = params.fields[name];
		fieldNames.push(name);
		fields = fields + sc + value;
		sc = ';'
	}
    paramsObj.FIELDS = fields;
    var temp = new ewd.mumps.GlobalNode('CacheTempEWD', [process.pid]);
    temp._delete();
    temp._setDocument(paramsObj, true);
    var gloRef = ewd.mumps.function('ddrLister^ZZCPCR00');
    var tmpNode = getGlobalNodeFromRef(gloRef, ewd);
    var results = {
      data: []
    };
    var error = false;
    var row;
	var rowObj;
	var i;
    tmpNode._forEachSubNode(function(data, node) {
      if (data === '[BEGIN_diERRORS]') {
        results.data = [];
        error = true;
      }
      else if (data !== '[BEGIN_diDATA]' && data !== '[END_diDATA]' && data !== '[END_diERRORS]') {
        row = data.split('^');
		rowObj = {};
		for (i = 0; i < row.length; i++) {
			fieldName = fieldNames[i] || i.toString();
			rowObj[fieldName] = row[i];
		}
        results.data.push(rowObj);
      }
    });
    if (error) return {
      error: JSON.stringify(results.data)
    };
    return results;
  },
  
  // DDR LISTER per joel's requirements
  ddrLister2: function(params, ewd) {
    var paramsObj = {
      FLAGS: 'IP',
      PART: '',
      XREF: '#'
    };
    for (var name in params) {
      paramsObj[name.toUpperCase()] = params[name];
    }
    paramsObj.FIELDS = params.FIELDS;

    var temp = new ewd.mumps.GlobalNode('CacheTempEWD', [process.pid]);
    temp._delete();
    temp._setDocument(paramsObj, true);
    var gloRef = ewd.mumps.function('ddrLister^ZZCPCR00');
    var tmpNode = getGlobalNodeFromRef(gloRef, ewd);
    var results = {
      data: []
    };
    var error = false;
    var row;
	var rowObj;
	var i;
    tmpNode._forEachSubNode(function(data, node) {
      if (data === '[BEGIN_diERRORS]') {
        results.data = [];
        error = true;
      }
      else if (data !== '[BEGIN_diDATA]' && data !== '[END_diDATA]' && data !== '[END_diERRORS]') {
        results.data.push(data);
      }
    });
    if (error) return {
      error: JSON.stringify(results.data)
    };
    return results;
  },
  
	ddrLister3: function(params, session, ewd) {
		params.rpcName = "DDR LISTER";
		params.rpcArgs = [];
		
		var ddrListerArgs = {
			FILE: params.FILE,
			FIELDS: params.FIELDS || ".01",
			FLAGS: params.FLAGS || "IP",
			MAX: params.MAX || "1000",
			XREF: params.XREF || "#"
		};
		
		if (params.hasOwnProperty("IENS")) {
			ddrListerArgs.IENS = params.IENS;
		}
		if (params.hasOwnProperty("FROM")) {
			ddrListerArgs.FROM = params.FROM;
		}
		if (params.hasOwnProperty("ID")) {
			ddrListerArgs.ID = params.ID;
		}
		if (params.hasOwnProperty("SCREEN")) {
			ddrListerArgs.SCREEN = params.SCREEN;
		}
		if (params.hasOwnProperty("PART")) {
			ddrListerArgs.PART = params.PART;
		}
		
		params.rpcArgs.push({ type: "LIST", value: ddrListerArgs });
		
		var result = this.runRpc(params, session, ewd);
		var response = { data: [] };
		var inData = false;
		for (var i = 1; result.value.hasOwnProperty(i.toString()); i++) {
			if (!inData && result.value[i.toString()] === "[BEGIN_diERRORS]") { // only need to check for error header in the first few records
				response.error = true;
				response.errorResponse = JSON.stringify(result.data);
				return response;
			}
			
			// just keep checking for start of data!
			if (!inData && (result.value[i.toString()] == "[BEGIN_diDATA]" || result.value[i.toString()].toUpperCase() == "[DATA]")) {
				inData = true;
				continue;
			}
			
			if (!inData) {
				continue;
			}
			
			response.data.push(result.value[i.toString()]);
		}
		
		return response;
	},
  
	ddrGetsEntry: function(params, ewd) {
		var file = params.file || '';
		var ienArray = params.iens || [];
		var field = params.field || '*';
		var flags = params.flags || 'IEN';
		var iens = '';
		var comma = ',';
		for (var i = 0; i < ienArray.length; i++) {
			iens = iens + ienArray[i] + comma;
		}
		
		//return { "file": file, "iens": iens, "field": field, "flags": flags };
		var status = ewd.mumps.function('ddrGetsEntry^ZZCPCR00', file, iens, field, flags);
		var temp = new ewd.mumps.GlobalNode('CacheTempEWD', [process.pid]);
		var results = temp._getDocument(0, false);
		temp._delete();
		
		//return { result: results, iens: iens };
		if (results.hasOwnProperty(iens)) {
			return results[iens];
		}
		else {
			return {};
		}
	},

	discontinueRadiologyOrder: function(params, session, ewd) {
		return radiologyOrdersLib.discontinueRadiologyOrder(params, session, ewd);
	},
	
	getRadiologyOrderCancellationReasons: function(params, session, ewd) {
		params.rpcName = "ORWDX2 DCREASON";
		params.rpcArgs = [];
		return this.runRpc(params, session, ewd);
	},
	
	getSurgicalPathologyReports: function(params, session, ewd) {
		params.reportsTabName = "OR_SP:SURGICAL PATHOLOGY~SP;ORDV02A;0;";
		if (params.nRpts == "" || params.nRpts == 0) {
			params.nRpts = 1000;
		}
		return this.runReportsTabRpc(params, session, ewd);
	},
	
	getOrderableItems: function(params, session, ewd) {
		return radiologyOrdersLib.getOrderableItems(params, session, ewd);
	},
	
	getNotesWithText: function(params, session, ewd) {
		params.reportsTabName = "OR_PN:PROGRESS NOTES~TIUPRG;ORDV04;15;";
		return this.runReportsTabRpc(params, session, ewd);
	},
	
	getImagingOrderTypes: function(params, session, ewd) {
		params.rpcName = "ORWDRA32 IMTYPSEL";
		params.rpcArgs = [];
		
		return this.runRpc(params, session, ewd);
	},
	
	getHospitalLocations: function(params, session, ewd) {
		params.rpcName = "ORWU1 NEWLOC";
		params.rpcArgs = [];
		// clean args 
		var target = "";
		var direction = "1";
		if (params.target != undefined && params.target != "") {
			target = params.target.toUpperCase();
		}
		if (params.direction != undefined && params.direction != "") {
			direction = params.direction;
		}

		params.rpcArgs.push({type: "LITERAL", value: target});
		params.rpcArgs.push({type: "LITERAL", value: direction});
		
		return this.runRpc(params, session, ewd);
	},
	
	getAllMeds: function(params, session, ewd) {
		return medsLib.getAllMeds(params, session, ewd);
	},
	
	getAllergies: function(params, session, ewd) {
		return allergiesLib.getAllergies(params, session, ewd);
	},
	
	getChemHemReports: function(params, session, ewd) {
		return chemHemLib.getChemHemReports(params, session, ewd);
	},
	
	getPatient: function(params, session, ewd) {
		params.rpcName = "ORWPT SELECT";
		params.rpcArgs = [{type: "LITERAL", value: params.patientId}];
		
		return this.runRpc(params, session, ewd);
	},
	
	// FYI: RAPTOR is already receiving the patient ID with the worklist. This extra call to VistA is unnecessary
	getPatientIDFromTrackingID: function(params, session, ewd) {
		return { result: this.mEval("$P(^RAO(75.1," + params.ien + ",0),U,1)", session, ewd) };
	},
	
	// call to vista works
	getProblemList: function(params, session, ewd) {
		params.rpcName = "ORQQPL PROBLEM LIST";
		params.rpcArgs = [];
        
		params.rpcArgs.push({type: "LITERAL", value: params.patientId});
        params.rpcArgs.push({type: "LITERAL", value: "B"});
		
        return this.runRpc(params, session, ewd);
	},
	
	// call to vista works
	getVisits: function(params, session, ewd) {
        params.rpcName = "ORWCV VST";
		params.rpcArgs = [];
		
		var patientId = params.patientId;
		var fromDate = params.fromDate; 
		var toDate = params.toDate;
        
		params.rpcArgs.push({type: "LITERAL", value: patientId});
        params.rpcArgs.push({type: "LITERAL", value: fromDate});
        params.rpcArgs.push({type: "LITERAL", value: toDate});
        params.rpcArgs.push({type: "LITERAL", value: '1'});
		
        return this.runRpc(params, session, ewd);
	},
	
	// call to vista works
	getVitalSigns: function(params, session, ewd) {
		params.reportsTabName = "OR_VS:VITAL SIGNS~VS;ORDV04;47;";
		return this.runReportsTabRpc(params, session, ewd);
	},
	
	// call to vista works
	getRadiologyReports: function(params, session, ewd) {
		params.reportsTabName = "OR_R18:IMAGING~RIM;ORDV08;0;";
		return this.runReportsTabRpc(params, session, ewd);
	},

	signNote: function(params, session, ewd) {
		var encyptedSig = this.encryptRpcParameter(params.eSig, session, ewd);
		
		params.rpcName = "TIU SIGN RECORD";
		params.rpcArgs = [];
		
		params.rpcArgs.push({ type: "LITERAL", value: params.noteIen });
		params.rpcArgs.push({ type: "LITERAL", value: encyptedSig });
		
		return this.runRpc(params, session, ewd);
	},
	
	isValidESig: function(params, session, ewd) {
		params.rpcName = "ORWU VALIDSIG";
		params.rpcArgs = [ { type: "LITERAL", value: this.encryptRpcParameter(params.eSig, session, ewd) } ];
		
		return this.runRpc(params, session, ewd);
	},
		
	// helpers for running RPCs below
	runRpc: function(params, session, ewd) {
		// TODO - how to handle issues? throw exception? return JSON obj with error message?
        var gloRef = new ewd.mumps.GlobalNode('TMP', [process.pid]);
            // **** essential addition by Rob! - must clear down the temporary global first:
        gloRef._delete();
        var vista = session.$('VistA');
        var data = {
            name : params.rpcName,
            duz: vista.$('DUZ')._value,
            dt: vista.$('DT')._value,
            division: "",
            context: "OR CPRS GUI CHART",
            input: params.rpcArgs
        };
        gloRef._setDocument(data, true, 1);
        
        var status = ewd.mumps.function("RPCEXECUTE^RPCWRP", '^TMP(' + process.pid + ')') ;
        var resultsNode = gloRef.$('result');
        var results = resultsNode._getDocument();
		gloRef._delete();
		return results;
	},
	
	runReportsTabRpc: function(params, session, ewd) {
		// params => { reportsTabName:"OR_VS:VITAL SIGNS~VS;ORDV04;47;", patientId: PID }
		// params => { reportsTabName:"OR_VS:VITAL SIGNS~VS;ORDV04;47;", patientId: PID, fromDate: "20150704", toDate:"20150731", nRpts: 25 }
        
		var fromDate = "0";
		var toDate = "0";
		var nRpts = "0";
		
		// setup date and nrpts so they have everything for RPC builder below
		if (params.hasOwnProperty("fromDate")) {
			fromDate = params.fromDate;
		}
		if (params.hasOwnProperty("toDate")) {
			toDate = params.toDate;
		}
		if (params.hasOwnProperty("nRpts")) {
			nRpts = params.nRpts;
		}

		var gloRef = new ewd.mumps.GlobalNode('TMP', [process.pid]);
          // **** essential addition by Rob! - must clear down the temporary global first:
        gloRef._delete();
        var vista = session.$('VistA');
        var data = {
            name : "ORWRP REPORT TEXT",
            duz: vista.$('DUZ')._value,
            dt: vista.$('DT')._value,
            division: "500",
            context: "OR CPRS GUI CHART",
            input: [
              {type: "LITERAL", value: params.patientId},
              {type: "LITERAL", value: (params.reportsTabName + nRpts)},
              {type: "LITERAL", value: ""},
              {type: "LITERAL", value: (fromDate == "0" ? "50000" : "")}, // if specifying fromDate then set to empty string, otherwise 50000
              {type: "LITERAL", value: ""},
              {type: "LITERAL", value: fromDate},
              {type: "LITERAL", value: toDate},
            ]
        };
        gloRef._setDocument(data, true, 1);
        
        var status = ewd.mumps.function("RPCEXECUTE^RPCWRP", '^TMP(' + process.pid + ')') ;
        var resultsNode = gloRef.$('result');
        var results = resultsNode._getDocument();
		
		gloRef._delete();
        
		// the reports tab RPC returns a reference to where it stored the data - need to get it!! (and delete it)
		var resultRef = results.value;
		var resultGlo = getGlobalNodeFromRef(resultRef, ewd);
		results = resultGlo._getDocument();
		resultGlo._delete();
		
		return results;
	},
	
	mEval : function(arg, session, ewd) {
		return ewd.mumps.function("EVAL^RPCWRP", arg);
	},
		

	encryptRpcParameter: function(arg, session, ewd) {
		return { result: ewd.mumps.function("ENCRYP^XUSRB1", arg) };
	}
};

var chemHemLib = require('vistaChemHemLib');
var allergiesLib = require('vistaAllergiesLib');
var medsLib = require('vistaMedsLib');
var radiologyOrdersLib = require('vistaRadiologyOrdersLib');
