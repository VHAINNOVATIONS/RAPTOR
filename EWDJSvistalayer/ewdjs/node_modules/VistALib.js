/*

VistALib: Generic EWD.js Utility Functions for VistA REST Access

*/

// Crypto functions

var crypto = require('crypto');

var encryptCredentials = function(accessCode, verifyCode, key) {
  var text = 'accessCode=' + accessCode + '&verifyCode=' + verifyCode;
  var cipher = crypto.createCipher('aes-256-cbc',key)
  var crypted = cipher.update(text,'utf8','hex')
  crypted += cipher.final('hex');
  return crypted;
};

var decryptCredentials = function(encryptedString, key) {
  var decipher = crypto.createDecipher('aes-256-cbc', key);
  var dec;
  try {
    dec = decipher.update(encryptedString,'hex','utf8')
    dec += decipher.final('utf8');
    var str = dec.split('accessCode=')[1];
    var pieces = str.split('&verifyCode=');
    return {
      accessCode: pieces[0],
      verifyCode: pieces[1]
    };
  }
  catch(err) {
    return errorResponse('Invalid credentials', 400);
  }
};

// ==========================


var errorResponse = function(error, statusCode) {
  return {
    "error": {
      "text": error,
      "statusCode": statusCode
    }
  }; 
};

var getGlobalNodeFromRef = function(globalRef, ewd) {
  // returns a GlobalNode instance from the TMP pointer returned by VistA RPCs
  var gloRef = globalRef.substr(1);
  var pieces = gloRef.split('(');
  var globalName = pieces[0];
  var subs = gloRef.substr(globalName.length);
  subs = '[' + subs.substr(1);
  subs = subs.slice(0,-1) + ']';
  var subscripts = JSON.parse(subs);
  return new ewd.mumps.GlobalNode(globalName, subscripts);
};

var getJSONFromVPR = function(tmpNode, ewd) {

  var isSubNode = function(signature, currentArray) {
    var match = true;
    for (var i = 0; i < signature.length; i++) {
      if (signature[i].toString() !== currentArray[i].toString()) {
        match = false;
        break;
      }
    }
    return match;
  };

  var node = {
    global: tmpNode._globalName,
    subscripts: tmpNode._subscripts
  };

  var string = '';
  var ok = true;
  do {
    node = ewd.db.next_node(node);
    if (node.defined !== 0) {
      if (isSubNode(subscripts, node.subscripts)) {
        string = string + node.data;
      }
      else {
        ok = false;
      }
    }
    else {
      ok = false;
    }
  } while (ok);
  
  tmpNode._delete();
  
  var results = JSON.parse(string);
  return results;
};

var VistALogin = function(accessCode, verifyCode, ewd) {
  var ok = ewd.mumps.function('login^ZZCPCR00', accessCode, verifyCode);
  if (ok === '') {
    var temp = new ewd.mumps.GlobalNode('CacheTempEWD', [process.pid]);
    var results = temp._getDocument(0, false);
    temp._delete();
    return {
      error: false,
      data: results
    };
  }
  else{
    return {error: ok};
  }
};

module.exports = {

  errorResponse: errorResponse,

  authenticate: function(ewd) {
    var statusCode = 401;
    token = ewd.query['rest_auth'];
    if (!token) {
      // no token supplied
      return errorResponse('Failed authentication (1)', statusCode);
    }
    else if (token === '') {
      // token supplied was empty string
      return errorResponse('Failed authentication (2)', statusCode);
    }
    else {
      var session = ewd.util.getSession(token);
      if (session === '') {
        // token wasn't recognised or session timed out
        return errorResponse('Failed authentication (3)', statusCode);
      }
      else {
        ewd.util.updateSessionExpiry({
          sessid: session.$('ewd_sessid')._value
        });
        return {
          ok: true,
          session: session
        }
      }
    }
  },

  loginStatus: function(session) {
    var statusCode=401;
    if (session.$('VistA').$('user').$('DUZ')._value === '') return errorResponse('Failed authentication (4)', statusCode);
    if (session.$('cipherKey')._value !== '') return errorResponse('Failed authentication (5)', statusCode);
    return {ok: true};
  },

  initiate: function(appName, ewd) {
    var session = ewd.util.createNewSession(appName, 1200);
    var token = session.$('ewd_token')._value;
    var key = ewd.util.createToken();
    session.$('cipherKey')._value = key;
    return {
      Authorization: token,
      key: key
    };
  },

  login: function(ewd, session) {
    var sessid = session.$('ewd_sessid')._value;
    var errorStatusCode = 400;
    var key = session.$('cipherKey')._value;
    if (key === '') {
      ewd.util.deleteSession(sessid);
      return errorResponse('No key available', errorStatusCode);
    }
    var credentials = decryptCredentials(ewd.query.credentials, key);
    //console.log('credentials: ' + JSON.stringify(credentials));
    if (credentials.error) {
      ewd.util.deleteSession(sessid);
      return errorResponse(credentials.error, errorStatusCode);
    }
    if (!credentials.accessCode || credentials.accessCode === '') {
      ewd.util.deleteSession(sessid);
      return errorResponse('Missing Access Code', errorStatusCode);
    }
    if (!credentials.verifyCode || credentials.verifyCode === '') {
      ewd.util.deleteSession(sessid);
      return errorResponse('Missing Verify Code', errorStatusCode);
    }
    // ****************************
    var results = VistALogin(credentials.accessCode, credentials.verifyCode, ewd);
    // ****************************

    if (results.error) {
      ewd.util.deleteSession(sessid);
      return errorResponse(results.error, errorStatusCode);
    }
    else {
      // logged in
      session.$('cipherKey')._delete();
      session.$('VistA').$('user')._setDocument(results.data);
      return results.data;
    }
  },

  ddrLister: function(params, ewd) {
    var paramsObj = {
      FLAGS: 'PB',
      PART: '',
      XREF: '#'
    };
    for (var name in params) {
      paramsObj[name.toUpperCase()] = params[name];
    }
    var fields = '';
    var sc = '';
	var value;
	var fieldNames = ['IEN'];
	for (name in params.fields) {
		value = params.fields[name];
		fieldNames.push(name);
		fields = fields + sc + value;
		sc = ';'
	}
    paramsObj.FIELDS = fields;
    var temp = new ewd.mumps.GlobalNode('CacheTempEWD', [process.pid]);
    temp._delete();
    temp._setDocument(paramsObj, true);
    var gloRef = ewd.mumps.function('ddrLister^ZZCPCR00');
    var tmpNode = getGlobalNodeFromRef(gloRef, ewd);
    var results = {
      data: []
    };
    var error = false;
    var row;
	var rowObj;
	var i;
    tmpNode._forEachSubNode(function(data, node) {
      if (data === '[BEGIN_diERRORS]') {
        results.data = [];
        error = true;
      }
      else if (data !== '[BEGIN_diDATA]' && data !== '[END_diDATA]' && data !== '[END_diERRORS]') {
        row = data.split('^');
		rowObj = {};
		for (i = 0; i < row.length; i++) {
			fieldName = fieldNames[i] || i.toString();
			rowObj[fieldName] = row[i];
		}
        results.data.push(rowObj);
      }
    });
    if (error) return {
      error: JSON.stringify(results.data)
    };
    return results;
  },
  
	ddrGetsEntry: function(params, ewd) {
		var file = params.file || '';
		var ienArray = params.iens || [];
		var field = params.field || '*';
		var flags = params.flags || 'IEN';
		var iens = '';
		var comma = ',';
		for (var i = 0; i < ienArray.length; i++) {
			iens = iens + ienArray[i] + comma;
		}
		var status = ewd.mumps.function('ddrGetsEntry^ZZCPCR00', file, iens, field, flags);
		var temp = new ewd.mumps.GlobalNode('CacheTempEWD', [process.pid]);
		var results = temp._getDocument(0, false);
		temp._delete();
		return results;
	}
};