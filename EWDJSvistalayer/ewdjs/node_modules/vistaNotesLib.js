module.exports = {
	signNote: function(params, session, ewd) {
		var encyptedSig = vistaLib.encryptRpcParameter(params.eSig, session, ewd);
		
		params.rpcName = "TIU SIGN RECORD";
		params.rpcArgs = [];
		
		params.rpcArgs.push({ type: "LITERAL", value: params.noteIen });
		params.rpcArgs.push({ type: "LITERAL", value: encyptedSig });
		
		return vistaLib.runRpc(params, session, ewd);
	},
	
	getNoteTitles: function(params, session, ewd) {
		params.rpcName = "TIU LONG LIST OF TITLES";
		params.rpcArgs = [];
		params.rpcArgs.push({ type: "LITERAL", value: "3" }); // not sure what this three means... from MDWS broker code
		params.rpcArgs.push({ type: "LITERAL", value: vistaStringUtils.adjustForNameSearch(params.target) });
		return this.toNoteTitles(vistaLib.runRpc(params, session, ewd));
	},
	
	toNoteTitles: function(response) {
		var result = {};
		
		for (var i = 1; response.value.hasOwnProperty(i.toString()); i++) {
			var pieces = response.value[i.toString()].split("^");
			if (result.hasOwnProperty(pieces[0])) { // may be multiple note titles for an ID - add them to pre-existing array
				result[pieces[0]].push(pieces[1]);
			}
			else {
				result[pieces[0]] = [pieces[1]];
			}
		}
		
		return result;
	},
	
	getSurgeryReportsWithText: function(params, session, ewd) {
		params.rpcName = "ORWSR RPTLIST";
		params.rpcArgs = [{ type: "LITERAL", value: params.patientId }];
		var response = vistaLib.runRpc(params, session, ewd);
		
		// TODO - consider auto-detecting this type of thing in runRpc...
		// returns a global array reference - need to get it after calling RPC
		var resultRef = response.value;
		if (!resultRef || resultRef == "") {
			return null;
		}
		var resultGlo = vistaLib.getGlobalNodeFromRef(resultRef, ewd);
		results = resultGlo._getDocument();
		resultGlo._delete();
		// done getting data by ref

		return this.toSurgeryReports(results, params, session, ewd);
	},
	
	toSurgeryReports: function(reports, params, session, ewd) {

	//		{
	//		  "1": "CAMP MASTER;500^10007^3061208.073^LEFT INGUINAL HERNIA REPAIR WITH MESH^PROVIDER,ONE^+^LAB WORK-Yes^STATUS-(COMPLETED)^SPEC-GENERAL(OR WHEN NOT DEFINED BELOW)^DICT-^TRANS-",
	//		  "2": "CAMP MASTER;500^10003^3020311.0915^RIH^ZZTDNURSE,ONE^^LAB WORK-Yes^STATUS-(COMPLETED)^SPEC-GENERAL(OR WHEN NOT DEFINED BELOW)^DICT-^TRANS-"
	//		}

		var result = [];
		for (var i = 1; reports.hasOwnProperty(i.toString()); i++) {
			var current = {};
			var pieces = reports[i.toString()].split("^");
			
			current.id = pieces[1]; // assign ID
			params.ien = pieces[1]; // set IEN for call to fetch report text
			current.text = this.getSurgeryReportText(params, session, ewd); // immediately assign text
			// continue parsing pieces
			current.timestamp = pieces[2];
			current.title = pieces[3];
			current.author = { name: pieces[4] };
			
			var facilityPieces = pieces[0].split(";");
			current.facility = { id: facilityPieces[1], name: facilityPieces[0] };
			
			result.push(current);
		}
		
		return result;
	},
	
	getSurgeryReportText: function(params, session, ewd) {
		params.rpcName = "ORWRP REPORT TEXT";
		params.rpcArgs = [];
		params.rpcArgs.push({ type: "LITERAL", value: params.patientId });
		params.rpcArgs.push({ type: "LITERAL", value: "28:SURGERY (LOCAL ONLY)~" });
		params.rpcArgs.push({ type: "LITERAL", value: "" });
		params.rpcArgs.push({ type: "LITERAL", value: "" });
		params.rpcArgs.push({ type: "LITERAL", value: params.ien });
		params.rpcArgs.push({ type: "LITERAL", value: "0" });
		params.rpcArgs.push({ type: "LITERAL", value: "0" });
		
		var rpcRef = vistaLib.runRpc(params, session, ewd);
		// TODO - consider auto-detecting this type of thing in runRpc...
		// returns a global array reference - need to get it after calling RPC
		var resultRef = rpcRef.value;
		if (!resultRef || resultRef == "") {
			return null;
		}
		var resultGlo = vistaLib.getGlobalNodeFromRef(resultRef, ewd);
		results = resultGlo._getDocument();
		resultGlo._delete();
		// done getting data by ref
		
		var reportText = "";
		for (var i = 1; results.hasOwnProperty(i.toString()); i++) {
			reportText += (results[i.toString()][0] + "\r\n");
		}
		return reportText;
	}
};

var vistaLib = require('VistALib');
var vistaStringUtils = require('vistaStringUtils');