
module.exports = {
	getAllMeds: function(params, session, ewd) {
		params.rpcName = "ORWPS ACTIVE";
		params.rpcArgs = [{type: "LITERAL", value: params.patientId}];
		var response = vistaLib.runRpc(params, session, ewd);
		
		//var outpatientMedsRptsTabResponse = this.getOutpatientMedsFromReportsTab(params, session, ewd);
		//return outpatientMedsRptsTabResponse;
		
		//var unitDoseMedsRptsTabResponse = this.getUnitDoseMedsFromReportsTab(params, session, ewd);
		
		//var otherMeds = this.getOtherMedsFromReportsTab(params, session, ewd);
		//return otherMeds;
		
		return this.toAllMeds(response);
	},
	
	toAllMeds: function(response, params, session, ewd) {
		return response;
		
		var result = [];
		if (!response || !response.hasOwnProperty("result")) {
			return result;
		}
		
		var opSupplements = null;
		var udSupplements = null;
		
		// ORWPS ACTIVE response example:
		//{
		//	"type":"ARRAY",
		//	"value":
		//	{
		//		"1":"~NV^1N;O^FEXOFENADINE HCL 6MG/ML ORAL SUSP^^^^^^33838^ACTIVE",
		//		"2":" FEXOFENADINE HCL 6MG/ML ORAL SUSP",
		//		"3":"\\ 1 TEASPOONFUL (5ML) MOUTH EVERY DAY",
		//		"4":"~NV^2N;O^VITAMIN B COMP W/C & FOLIC (DEXFOL) TAB^^^^^^33839^ACTIVE",
		//		"5":" VITAMIN B COMP W/C & FOLIC (DEXFOL) TAB",
		//		"6":"\\ 1 TAB MOUTH EVERY DAY",
		//		"7":"~NV^3N;O^SIMVASTATIN 20MG TAB^^^^^^33842^ACTIVE",
		//		"8":" SIMVASTATIN 20MG TAB",
		//		"9":"\\ 20MG MOUTH TWICE A DAY"
		//	}
		//}		
		for (var i = 1; response.result.hasOwnProperty(i.toString()); i++) { 
			// make sure current line begins with tilde and next two lines exist as all three make up med
			if (!response.result[i.toString()].startsWith("~")
				|| !response.hasOwnProperty((i+1).toString())
				|| !response.hasOwnProperty((i+2).toString())) {
				return { type: "faulTO", message: "Unexpected med result... unable to parse: " + response };
			}
			
			var rawLine1 = response.result[i.toString()];
			var rawLine2 = response.result[(i+1).toString()];
			var rawLine3 = response.result[(i+2).toString()];
			i = i+3; // move up to start of next med!
			
			var current = {};
			var rawLine1Pieces = rawLine1.split("^");
			current.medicationType = this.getTypeFromCode(rawLine1Pieces[0].split("~")[1]);
			
			if (current.medicationType.isOutpatient) {
				if (opSupplements == null) {
					opSupplements = this.getOutpatientMedsFromReportsTab(params, session, ewd);
				}
				current = this.toOutpatientMed([rawLine1, rawLine2, rawLine3], opSupplements);
			}
			else if (current.medicationType.isIV) {
				current = this.toIVMed([rawLine1, rawLine2, rawLine3]);
			}
			else if (current.medicationType.isUnitDose) {
				if (udSupplements == null) {
					udSupplements = this.getUnitDoseMedsFromReportsTab(params, session, ewd);
				}
				current = this.toUnitDoseMed([rawLine1, rawLine2, rawLine3], udSupplements);
			}
			else if (current.medicationType.isInForOut) { 
				current = this.toInpatientForOutpatientMed([rawLine1, rawLine2, rawLine3]);
			}
		}
		
		return result;
	},
	
	getTypeFromCode: function(code) {
		if (code == "OP") {
			return { code: code, isOutpatient: true };
		} else if (code == "IV") {
			return { code: code, isIV: true };
		} else if (code == "NV") {
			return { code: code, isNonVA: true };
		} else if (code == "UD") {
			return { code: code, isUnitDose: true };
		} else if (code == "CP") {
			return { code: code, isInForOut: true };
		} else {
			return { code: code, type: "unknown" };
		}
	},
	
	toOutpatientMed: function(rawMedObj, reportsTabObj) {
		var result = {};
		
		var line1Pieces = rawMedObj[0].split("^");
		
		result.type = line1Pieces[0].split("~")[1];
		result.id = line1Pieces[1];
		result.name = line1Pieces[2];
		result.refills = line1Pieces[5];
		result.orderId = line1Pieces[8];
		result.status - lines1Pieces[9];
		
		// TODO - finish!!
		return result;
	},
	
	toIVMed: function(rawMedObj) {
	},

	toUnitDoseMed: function(rawMedObj, reportsTabObj) {
	},
		
	toInpatientForOutpatientMed: function(rawMedObj, reportsTabObj) {
	},
		
	getOtherMedsFromReportsTab: function(params, session, ewd) {
		params.reportsTabName = "OR_RXN:HERBAL/OTC/NON-VA MEDS~NVA;ORDV06A;0;";
		//return vistaLib.runReportsTabRpc(params, session, ewd);
		return this.toOtherMeds(vistaLib.runReportsTabRpc(params, session, ewd));
	},
	
	// returns simple array because other meds have no ID
	toOtherMeds: function(response) {
		var result = [];
		
		for (var prop in response.result) {
			if (response.result.hasOwnProperty(prop)) {
				var raw = response.result[prop]["WP"];
				var current = { type: "NV", isOutpatient: true, isNonVa: true };
				
				var facilityStr = raw["1"].split("^")[1].split(";"); // e.g. MedObj["1"] : "1^CAMP MASTER;500"
				current.facility = { id: facilityStr[1], name: facilityStr[0] };
				
				current.name = raw.hasOwnProperty("2") ? raw["2"].split("^")[1] : "";
				current.status = raw.hasOwnProperty("3") ? raw["3"].split("^")[1] : "";
				current.startDate = raw.hasOwnProperty("4") ? raw["4"].split("^")[1] : "";
				current.dateDocumented = raw.hasOwnProperty("5") ? raw["5"].split("^")[1] : "";
				current.documentor = { name: (raw.hasOwnProperty("6") ? raw["6"].split("^")[1] : "") };
				current.stopDate = raw.hasOwnProperty("7") ? raw["7"].split("^")[1] : "";
				current.sig = raw.hasOwnProperty("8") ? raw["8"].split("^")[1] : "";

				if (raw.hasOwnProperty("10") && raw["10"].hasOwnProperty("1")) {
					current.comment = "";
					var currentLine = 1;
					while (raw["10"].hasOwnProperty(currentLine.toString())) {
						current.comment += (raw["10"][currentLine.toString()]).split("^")[1] + "\r\n";
						currentLine++;
					}
					current.comment = current.comment.trim();
				}
				
				result.push(current);
			}
		}
		return result;
	},
	
	getOutpatientMedsFromReportsTab: function(params, session, ewd) {
		params.reportsTabName = "OR_RXOP:ALL OUTPATIENT~RXOP;ORDV06;28;";
		return this.toOutpatientMedsFromReportsTab(vistaLib.runReportsTabRpc(params, session, ewd));
	},
	
	toOutpatientMedsFromReportsTab: function(response) {
		var result = {}; // make a dictionary
		//return response;
		
		// next two lines are how one iterates over object properties in js
		for (var prop in response.result) {
			if (response.result.hasOwnProperty(prop)) {
				var raw = response.result[prop]["WP"];
				var current = { type: "OP", isOutpatient: true }; // initialize these defaults

				var facilityStr = raw["1"].split("^")[1].split(";"); // e.g. MedObj["1"] : "1^CAMP MASTER;500"
				current.facility = { id: facilityStr[1], name: facilityStr[0] };
				
				current.name = raw.hasOwnProperty("2") ? raw["2"].split("^")[1] : ""; // e.g. MedObj["3"] : "3^MORPHINE ORAL 10MG/5ML CC "
				current.drug = { id: raw["3"].split("^")[1], name: current.name }; // e.g. MedObj["2"] : "2^123"
				current.rxNumber = raw.hasOwnProperty("4") ? raw["4"].split("^")[1] : ""; // e.g. etc...
				current.status = raw.hasOwnProperty("5") ? raw["5"].split("^")[1] : "";
				current.quantity = raw.hasOwnProperty("6") ? raw["6"].split("^")[1] : "";
				current.expirationDate = raw.hasOwnProperty("7") ? raw["7"].split("^")[1] : "";
				current.issueDate = raw.hasOwnProperty("8") ? raw["8"].split("^")[1] : "";
				current.lastFillDate = raw.hasOwnProperty("9") ? raw["9"].split("^")[1] : "";
				current.refills = raw.hasOwnProperty("10") ? raw["10"].split("^")[1] : "";
				current.provider = raw.hasOwnProperty("11") ? { name: raw["11"].split("^")[1] } : {};
				current.cost = raw.hasOwnProperty("12") ? raw["12"].split("^")[1] : "";
				current.id = raw.hasOwnProperty("15") ? raw["15"].split("^")[1] : "";
				current.stopDate = raw.hasOwnProperty("16") ? raw["16"].split("^")[1] : "";
				
				// get sig lines from 14 - line numbers should be object properties
				if (raw.hasOwnProperty("14") && raw["14"].hasOwnProperty("1")) {
					current.sig = "";
					var currentLine = 1;
					while (raw["14"].hasOwnProperty(currentLine.toString())) {
						current.sig += (raw["14"][currentLine.toString()]).split("^")[1] + "\r\n";
						currentLine++;
					}
					current.sig = current.sig.trim();
				}
				
				result[current.id] = current;
			}
		}		
		
		return result;
	},
	
	getUnitDoseMedsFromReportsTab: function(params, session, ewd) {
		params.reportsTabName = "OR_RXUD:UNIT DOSE~RXUD;ORDV06;29;";
		return this.toUnitDoseMedsFromReportsTab(vistaLib.runReportsTabRpc(params, session, ewd));
	},
	
	toUnitDoseMedsFromReportsTab: function(response) {
		var result = {}; // make a dictionary
		//return response;
		
		// next two lines are how one iterates over object properties in js
		for (var prop in response.result) {
			if (response.result.hasOwnProperty(prop)) {
				var raw = response.result[prop]["WP"];
				var current = { type: "UD", isUnitDose: true, isInpatient: true, sig: "" }; // initialize these defaults

				var facilityStr = raw["1"].split("^")[1].split(";"); // e.g. MedObj["1"] : "1^CAMP MASTER;500"
				current.facility = { id: facilityStr[1], name: facilityStr[0] };
				
				current.id = raw.hasOwnProperty("2") ? raw["2"].split("^")[1] : ""; // e.g. MedObj["2"] : "2^123"
				current.name = raw.hasOwnProperty("3") ? raw["3"].split("^")[1] : ""; // e.g. MedObj["3"] : "3^MORPHINE ORAL 10MG/5ML CC "
				current.dose = raw.hasOwnProperty("4") ? raw["4"].split("^")[1] : ""; // e.g. etc...
				current.status = raw.hasOwnProperty("5") ? raw["5"].split("^")[1] : "";
				current.startDate = raw.hasOwnProperty("6") ? raw["6"].split("^")[1] : "";
				current.stopDate = raw.hasOwnProperty("7") ? raw["7"].split("^")[1] : "";
				current.route = raw.hasOwnProperty("8") ? raw["8"].split("^")[1] : "";
				current.schedule = raw.hasOwnProperty("9") ? raw["9"].split("^")[1] : "";
				
				current.drug = { id: current.id, name: current.name };
				
				result[current.id] = current;
			}
		}		
		
		return result;
	}
};

var vistaLib = require('VistALib');