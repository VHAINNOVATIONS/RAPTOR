//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.269.
// 
#pragma warning disable 1591

namespace gov.va.medora.mdo.cds {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ClinicalDataServiceSynchronousInterfaceHttpBinding", Namespace="http://client.cds.med.va.gov")]
    public partial class ClinicalDataServiceSynchronousInterface : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback deleteClinicalDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback createClinicalDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback readClinicalData1OperationCompleted;
        
        private System.Threading.SendOrPostCallback appendClinicalDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback readClinicalDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback isAliveOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateClinicalDataOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public ClinicalDataServiceSynchronousInterface() {
            this.Url = global::gov.va.medora.mdo.Properties.Settings.Default.mdo_cds_ClinicalDataServiceSynchronousInterface;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event deleteClinicalDataCompletedEventHandler deleteClinicalDataCompleted;
        
        /// <remarks/>
        public event createClinicalDataCompletedEventHandler createClinicalDataCompleted;
        
        /// <remarks/>
        public event readClinicalData1CompletedEventHandler readClinicalData1Completed;
        
        /// <remarks/>
        public event appendClinicalDataCompletedEventHandler appendClinicalDataCompleted;
        
        /// <remarks/>
        public event readClinicalDataCompletedEventHandler readClinicalDataCompleted;
        
        /// <remarks/>
        public event isAliveCompletedEventHandler isAliveCompleted;
        
        /// <remarks/>
        public event updateClinicalDataCompletedEventHandler updateClinicalDataCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://client.cds.med.va.gov", ResponseNamespace="http://client.cds.med.va.gov", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("out")]
        public string deleteClinicalData(string in0, string in1, string in2) {
            object[] results = this.Invoke("deleteClinicalData", new object[] {
                        in0,
                        in1,
                        in2});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void deleteClinicalDataAsync(string in0, string in1, string in2) {
            this.deleteClinicalDataAsync(in0, in1, in2, null);
        }
        
        /// <remarks/>
        public void deleteClinicalDataAsync(string in0, string in1, string in2, object userState) {
            if ((this.deleteClinicalDataOperationCompleted == null)) {
                this.deleteClinicalDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeleteClinicalDataOperationCompleted);
            }
            this.InvokeAsync("deleteClinicalData", new object[] {
                        in0,
                        in1,
                        in2}, this.deleteClinicalDataOperationCompleted, userState);
        }
        
        private void OndeleteClinicalDataOperationCompleted(object arg) {
            if ((this.deleteClinicalDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.deleteClinicalDataCompleted(this, new deleteClinicalDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://client.cds.med.va.gov", ResponseNamespace="http://client.cds.med.va.gov", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("out")]
        public string createClinicalData(string in0, string in1, string in2) {
            object[] results = this.Invoke("createClinicalData", new object[] {
                        in0,
                        in1,
                        in2});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void createClinicalDataAsync(string in0, string in1, string in2) {
            this.createClinicalDataAsync(in0, in1, in2, null);
        }
        
        /// <remarks/>
        public void createClinicalDataAsync(string in0, string in1, string in2, object userState) {
            if ((this.createClinicalDataOperationCompleted == null)) {
                this.createClinicalDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OncreateClinicalDataOperationCompleted);
            }
            this.InvokeAsync("createClinicalData", new object[] {
                        in0,
                        in1,
                        in2}, this.createClinicalDataOperationCompleted, userState);
        }
        
        private void OncreateClinicalDataOperationCompleted(object arg) {
            if ((this.createClinicalDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.createClinicalDataCompleted(this, new createClinicalDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://client.cds.med.va.gov", ResponseNamespace="http://client.cds.med.va.gov", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("out")]
        public string readClinicalData1(string in0, string in1, string in2, string in3) {
            object[] results = this.Invoke("readClinicalData1", new object[] {
                        in0,
                        in1,
                        in2,
                        in3});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void readClinicalData1Async(string in0, string in1, string in2, string in3) {
            this.readClinicalData1Async(in0, in1, in2, in3, null);
        }
        
        /// <remarks/>
        public void readClinicalData1Async(string in0, string in1, string in2, string in3, object userState) {
            if ((this.readClinicalData1OperationCompleted == null)) {
                this.readClinicalData1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnreadClinicalData1OperationCompleted);
            }
            this.InvokeAsync("readClinicalData1", new object[] {
                        in0,
                        in1,
                        in2,
                        in3}, this.readClinicalData1OperationCompleted, userState);
        }
        
        private void OnreadClinicalData1OperationCompleted(object arg) {
            if ((this.readClinicalData1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.readClinicalData1Completed(this, new readClinicalData1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://client.cds.med.va.gov", ResponseNamespace="http://client.cds.med.va.gov", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("out")]
        public string appendClinicalData(string in0, string in1, string in2) {
            object[] results = this.Invoke("appendClinicalData", new object[] {
                        in0,
                        in1,
                        in2});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void appendClinicalDataAsync(string in0, string in1, string in2) {
            this.appendClinicalDataAsync(in0, in1, in2, null);
        }
        
        /// <remarks/>
        public void appendClinicalDataAsync(string in0, string in1, string in2, object userState) {
            if ((this.appendClinicalDataOperationCompleted == null)) {
                this.appendClinicalDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnappendClinicalDataOperationCompleted);
            }
            this.InvokeAsync("appendClinicalData", new object[] {
                        in0,
                        in1,
                        in2}, this.appendClinicalDataOperationCompleted, userState);
        }
        
        private void OnappendClinicalDataOperationCompleted(object arg) {
            if ((this.appendClinicalDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.appendClinicalDataCompleted(this, new appendClinicalDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://client.cds.med.va.gov", ResponseNamespace="http://client.cds.med.va.gov", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("out")]
        public string readClinicalData(string in0, string in1, string in2) {
            object[] results = this.Invoke("readClinicalData", new object[] {
                        in0,
                        in1,
                        in2});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void readClinicalDataAsync(string in0, string in1, string in2) {
            this.readClinicalDataAsync(in0, in1, in2, null);
        }
        
        /// <remarks/>
        public void readClinicalDataAsync(string in0, string in1, string in2, object userState) {
            if ((this.readClinicalDataOperationCompleted == null)) {
                this.readClinicalDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnreadClinicalDataOperationCompleted);
            }
            this.InvokeAsync("readClinicalData", new object[] {
                        in0,
                        in1,
                        in2}, this.readClinicalDataOperationCompleted, userState);
        }
        
        private void OnreadClinicalDataOperationCompleted(object arg) {
            if ((this.readClinicalDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.readClinicalDataCompleted(this, new readClinicalDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://client.cds.med.va.gov", ResponseNamespace="http://client.cds.med.va.gov", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("out")]
        public bool isAlive() {
            object[] results = this.Invoke("isAlive", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void isAliveAsync() {
            this.isAliveAsync(null);
        }
        
        /// <remarks/>
        public void isAliveAsync(object userState) {
            if ((this.isAliveOperationCompleted == null)) {
                this.isAliveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnisAliveOperationCompleted);
            }
            this.InvokeAsync("isAlive", new object[0], this.isAliveOperationCompleted, userState);
        }
        
        private void OnisAliveOperationCompleted(object arg) {
            if ((this.isAliveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.isAliveCompleted(this, new isAliveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://client.cds.med.va.gov", ResponseNamespace="http://client.cds.med.va.gov", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("out")]
        public string updateClinicalData(string in0, string in1, string in2) {
            object[] results = this.Invoke("updateClinicalData", new object[] {
                        in0,
                        in1,
                        in2});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void updateClinicalDataAsync(string in0, string in1, string in2) {
            this.updateClinicalDataAsync(in0, in1, in2, null);
        }
        
        /// <remarks/>
        public void updateClinicalDataAsync(string in0, string in1, string in2, object userState) {
            if ((this.updateClinicalDataOperationCompleted == null)) {
                this.updateClinicalDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateClinicalDataOperationCompleted);
            }
            this.InvokeAsync("updateClinicalData", new object[] {
                        in0,
                        in1,
                        in2}, this.updateClinicalDataOperationCompleted, userState);
        }
        
        private void OnupdateClinicalDataOperationCompleted(object arg) {
            if ((this.updateClinicalDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateClinicalDataCompleted(this, new updateClinicalDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void deleteClinicalDataCompletedEventHandler(object sender, deleteClinicalDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class deleteClinicalDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal deleteClinicalDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void createClinicalDataCompletedEventHandler(object sender, createClinicalDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class createClinicalDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal createClinicalDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void readClinicalData1CompletedEventHandler(object sender, readClinicalData1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class readClinicalData1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal readClinicalData1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void appendClinicalDataCompletedEventHandler(object sender, appendClinicalDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class appendClinicalDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal appendClinicalDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void readClinicalDataCompletedEventHandler(object sender, readClinicalDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class readClinicalDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal readClinicalDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void isAliveCompletedEventHandler(object sender, isAliveCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class isAliveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal isAliveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void updateClinicalDataCompletedEventHandler(object sender, updateClinicalDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateClinicalDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateClinicalDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591