<?php
/**
 * @file
 * ------------------------------------------------------------------------------------
 * Created by SAN Business Consultants for RAPTOR phase 2
 * Open Source VA Innovation Project 2011-2014
 * VA Innovator: Dr. Jonathan Medverd
 * SAN Implementation: Andrew Casertano, Frank Font, et al
 * Contacts: acasertano@sanbusinessconsultants.com, ffont@sanbusinessconsultants.com
 * ------------------------------------------------------------------------------------
 *  
 * A contraindication engine module for the RAPTOR application. 
 */

require_once ('core/ContraIndEngine.inc');

defined('RAPTOR_CI_MODULE_PATH')
    or define('RAPTOR_CI_MODULE_PATH', dirname(__FILE__));  

function raptor_contraindications_help($path, $arg) 
{
  switch ($path)
  {
    case "admin/help#raptor_contraindications":
        return '<p>'.  t("Evaluates conditions that result in contraindication warnings.") .'</p>';
        break;
  }
}

function raptor_contraindications_menu() 
{
    $items = array();
    
    $items['raptor/contraindications/exportdata'] = array(
      'title' => t('Contraindications Data Dump'),
      'page callback' => 'raptor_admincontraindicationdatadump_form',
      'access arguments' => array('access content'),
      'access callback' => TRUE,        
      'description' => t('Extract to a file all contraindication rules data'),
      'type' => MENU_CALLBACK,
    );
    
    $items['raptor/contraindications/exportxml'] = array(
      'title' => t('XML Rulebase Dump'),
      'page callback' => 'raptor_contraindications_exportxml_form',
      'access arguments' => array('access content'),
      'access callback' => TRUE,        
      'description' => t('Export all the rulebase info in a shareable XML format'),
      'type' => MENU_CALLBACK,
    );
    
    $items['raptor/managecontraindications'] = array(
      'title' => t('Manage Contraindications'),
      'page callback' => 'raptor_contraindications_mng_ci_form',
      'access arguments' => array('access content'),
      'access callback' => TRUE,        
      'description' => t('Manage Contraindications Form'),
      'type' => MENU_CALLBACK,
      'file' => 'ManageContraIndicationsPage.php',
      'file path' => '/sites/all/modules/raptor_contraindications/form/',
    );
    $items['raptor/viewcontraindication'] = array(
      'title' => t('View Contraindication'),
      'page callback' => 'raptor_contraindications_viewci_form',
      'access arguments' => array('access content'),
      'access callback' => TRUE,        
      'description' => t('View Contraindications Detail'),
      'type' => MENU_CALLBACK,
      'file' => 'ViewContraIndicationPage.php',
      'file path' => '/sites/all/modules/raptor_contraindications/form/',
    );
    $items['raptor/addcontraindication'] = array(
      'title' => t('Add Contraindication'),
      'page callback' => 'raptor_contraindications_addci_form',
      'access arguments' => array('access content'),
      'access callback' => TRUE,        
      'description' => t('Add Contraindications Detail'),
      'type' => MENU_CALLBACK,
      'file' => 'AddContraIndicationPage.php',
      'file path' => '/sites/all/modules/raptor_contraindications/form/',
    );
    $items['raptor/editcontraindication'] = array(
      'title' => t('Edit Contraindication'),
      'page callback' => 'raptor_contraindications_editci_form',
      'access arguments' => array('access content'),
      'access callback' => TRUE,        
      'description' => t('Edit Contraindications Detail'),
      'type' => MENU_CALLBACK,
      'file' => 'EditContraIndicationPage.php',
      'file path' => '/sites/all/modules/raptor_contraindications/form/',
    );
    $items['raptor/deletecontraindication'] = array(
      'title' => t('Delete Contraindication'),
      'page callback' => 'raptor_contraindications_deleteci_form',
      'access arguments' => array('access content'),
      'access callback' => TRUE,        
      'description' => t('Delete Contraindications Detail'),
      'type' => MENU_CALLBACK,
      'file' => 'DeleteContraIndicationPage.php',
      'file path' => '/sites/all/modules/raptor_contraindications/form/',
    );

    return $items;
}

function raptor_admincontraindicationdatadump_form() 
{
    return drupal_get_form("raptor_admincontraindicationdatadump_form_builder");
}

function raptor_contraindications_exportxml_form() 
{
    return drupal_get_form("raptor_contraindications_exportxml_form_builder");
}


//Manage contraindications
function raptor_contraindications_mng_ci_form() 
{
    return drupal_get_form("raptor_contraindications_mng_ci_form_builder");
}
function raptor_contraindications_viewci_form() 
{
    return drupal_get_form("raptor_contraindications_viewci_form_builder");
}
function raptor_contraindications_addci_form() 
{
    return drupal_get_form("raptor_contraindications_addci_form_builder");
}
function raptor_contraindications_editci_form() 
{
    return drupal_get_form("raptor_contraindications_editci_form_builder");
}
function raptor_contraindications_deleteci_form() 
{
    return drupal_get_form("raptor_contraindications_deleteci_form_builder");
}


function raptor_contraindications_mng_ci_form_builder($form, &$form_state)
{
    $oPI = new \raptor\ManageContraIndicationsPage();
    $form = array();
    $disabled = false;
    $myvalues = array();    //No values for this one.
    return $oPI->getForm($form, $form_state, $disabled, $myvalues);
}

function raptor_contraindications_addci_form_builder($form, &$form_state)
{
    $oPI = new \raptor\AddContraIndicationPage();
    $form = array();
    $disabled = false;
    $myvalues = $oPI->getFieldValues();
    return $oPI->getForm($form, $form_state, $disabled, $myvalues);
}
function raptor_contraindications_addci_form_builder_validate($form, &$form_state) 
{
    $oPI = new \raptor\AddContraIndicationPage();
    return $oPI->looksValid($form, $form_state['values']);
}
function raptor_contraindications_addci_form_builder_submit($form, &$form_state) 
{
    $oPI = new \raptor\AddContraIndicationPage();
    $rowsupdated = $oPI->updateDatabase($form, $form_state['values']);
    if($rowsupdated == 1)
    {
        //Success!
        $form_state['redirect'] = array(
            'raptor/managecontraindications',
            array(
              'query' => array(),
            ),
          );
    }
}

function raptor_contraindications_viewci_form_builder($form, &$form_state)
{
    if(!isset($_GET['rn']))
    {
        die("Missing required rn url parameter!");
    }
    $rule_nm = $_GET['rn'];
    if(is_numeric($rule_nm))
    {
        die("Invalid rn url parameter: that value MUST NOT be numeric!");
    }

    $oPI = new \raptor\ViewContraindicationPage($rule_nm);
    $form = array();
    $disabled = false;
    $myvalues = $oPI->getFieldValues($rule_nm);
    return $oPI->getForm($form, $form_state, $disabled, $myvalues);
}
function raptor_contraindications_deleteci_form_builder($form, &$form_state)
{
    if(!isset($_GET['rn']))
    {
        die("Missing required rn url parameter!");
    }
    $rule_nm = $_GET['rn'];
    if(is_numeric($rule_nm))
    {
        die("Invalid rn url parameter: that value MUST NOT be numeric!");
    }
    
    $oPI = new \raptor\DeleteContraindicationPage($rule_nm);
    $form = array();
    $disabled = false;
    $myvalues = $oPI->getFieldValues($rule_nm);
    return $oPI->getForm($form, $form_state, $disabled, $myvalues);
}
function raptor_contraindications_deleteci_form_builder_submit($form, &$form_state) 
{
    if(!isset($_GET['rn']))
    {
        die("Missing required rn url parameter!");
    }
    $rule_nm = $_GET['rn'];
    if(is_numeric($rule_nm))
    {
        die("Invalid rn url parameter: that value MUST NOT be numeric!");
    }
    $oPI = new \raptor\DeleteContraindicationPage($rule_nm);
    $rowsupdated = $oPI->updateDatabase($form, $form_state['values']);
    if($rowsupdated == 1)
    {
        //Success!
        $form_state['redirect'] = array(
            'raptor/managecontraindications',
            array(
              'query' => array(),
            ),
          );
    }
}
function raptor_contraindications_editci_form_builder($form, &$form_state)
{
    if(!isset($_GET['rn']))
    {
        die("Missing required rn url parameter!");
    }
    $rule_nm = $_GET['rn'];
    if(is_numeric($rule_nm))
    {
        die("Invalid rn url parameter: that value MUST NOT be numeric!");
    }
    $oPI = new \raptor\EditContraindicationPage($rule_nm);
    $form = array();
    $disabled = false;
    $myvalues = $oPI->getFieldValues($rule_nm);
    return $oPI->getForm($form, $form_state, $disabled, $myvalues);
}
function raptor_contraindications_editci_form_builder_validate($form, &$form_state) 
{
    if(!isset($_GET['rn']))
    {
        die("Missing required rn url parameter!");
    }
    $rule_nm = $_GET['rn'];
    $oPI = new \raptor\EditContraindicationPage($rule_nm);
    return $oPI->looksValid($form, $form_state['values']);
}
function raptor_contraindications_editci_form_builder_submit($form, &$form_state) 
{
    if(!isset($_GET['rn']))
    {
        die("Missing required rn url parameter!");
    }
    $rule_nm = $_GET['rn'];
    if(is_numeric($rule_nm))
    {
        die("Invalid rn url parameter: that value MUST NOT be numeric!");
    }
    $oPI = new \raptor\EditContraindicationPage($rule_nm);
    $rowsupdated = $oPI->updateDatabase($form, $form_state['values']);
    if($rowsupdated == 1)
    {
        //Success!
        $form_state['redirect'] = array(
            'raptor/managecontraindications',
            array(
              'query' => array(),
            ),
          );
    }
}

/**
 * Send a downloadable file to the browser
 * @param type $form_state
 * @return binary file
 */
function raptor_admincontraindicationdatadump_form_builder($form, &$form_state)
{
    //Log this.
    error_log('Dumping the contraindication library information');

    //Dump it.
    header("Cache-Control: public");
    header("Content-Description: File Transfer");
    //header("Content-Length: 64000;");
    header("Content-Disposition: attachment; filename=raptor_admincontraindicationdatadump.raw");
    header("Content-Type: application/octet-stream; "); 
    header("Content-Transfer-Encoding: binary");
    $now = date('Y-m-d H:i:s');
    echo '### RAPTOR DATA DUMPED ' . $now;
    echo "\n### TIMEZONE " . date_default_timezone_get();
    echo "\n### CONTRAINDICATION DATA DUMP TOOL VERSION 20140917.1";
    
    $tablename = 'raptor_contraindication_rule';
    $result = db_select($tablename, 'n')
            ->fields('n')
            ->orderBy('rule_nm')
            ->execute();
    $sDataDump = serialize($result->fetchAllAssoc('rule_nm'));
    echo "\n>>>tablename=" . $tablename;
    echo "\n>>>rows=" . $result->rowCount();
    echo "\n>>>data=$sDataDump";
    
    $tablename = 'raptor_contraindication_measure';
    $result = db_select($tablename, 'n')
            ->fields('n')
            ->orderBy('measure_nm')
            ->execute();
    $sDataDump = serialize($result->fetchAll());
    echo "\n>>>tablename=" . $tablename;
    echo "\n>>>rows=" . $result->rowCount();
    echo "\n>>>data=$sDataDump";

    drupal_exit();  //Otherwise more stuff gets added to the file.
}


/**
 * Send a downloadable file to the browser
 * @param type $form_state
 * @return binary file
 */
function raptor_contraindications_exportxml_form_builder($form, &$form_state)
{
    //Log this.
    global $user;
    error_log('Exporting rulebase XML as ' . print_r($user,TRUE));

    $loaded = module_load_include('inc','raptor_contraindications','core/SREContext');
    if(!$loaded)
    {
        drupal_set_message('Failed to load the SREContext class', 'error');
    }
    $loaded = module_load_include('inc','simplerulesengine_core','io/IO');
    if(!$loaded)
    {
        drupal_set_message('Failed to load the IO class', 'error');
    }

    $oSREContext = new \raptor_ci\SREContext();
    $oIO = new \simplerulesengine\IO($oSREContext);
    $sRulebaseName = 'RAPTOR';
    $sXML = $oIO->getRulebaseAsXML($sRulebaseName);
    
    //Dump it.
    header("Cache-Control: public");
    header("Content-Description: File Transfer");
    header("Content-Disposition: attachment; filename=raptor_contraindications_rulebase.xml");
    header("Content-Type: application/octet-stream; "); 
    header("Content-Transfer-Encoding: binary");
    
    echo $sXML;

    drupal_exit();  //Otherwise more stuff gets added to the file.
}


